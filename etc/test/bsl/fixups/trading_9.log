

test: 9:
any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy

tree1:  any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy
    1  : UnaryOp(TK.ANY, TK.ANY, 'any')
    2  :     Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    3  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    4  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    5  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    6  :                     Define(TK.DEFINE, TK.COLN, ':')
    7  :                         Block(TK.BLOCK, v=[Flow(), Flow()], '')
    8  :                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
    9  :                                 BinOp(TK.GTR, '>')
   10  :                                     Ref(TK.IDNT, 'close')
   11  :                                 FnCall('sma')
   12  :                                     Ref(TK.IDNT, 'sma')
   13  :                                     List(TK.TUPLE, [Int()])
   14  :                                         Int(TK.INT, 10)
   15  :                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   16  :                                 BinOp(TK.GTR, '>')
   17  :                                     Ref(TK.IDNT, 'close')
   18  :                                 FnCall('sma')
   19  :                                     Ref(TK.IDNT, 'sma')
   20  :                                     List(TK.TUPLE, [Int()])
   21  :                                         Int(TK.INT, 20)
   22  :                         Define(TK.DEFINE, TK.EQLS, '=')
   23  :                             Ref(TK.IDNT, 'threshold')
   24  :                             Float(TK.FLOT, 0.01)
   25  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   26  :                         Ref(TK.SIGNAL, 'signal')
   27  :                 FnCall('delay')
   28  :                     Ref(TK.IDNT, 'delay')
   29  :                     List(TK.TUPLE, [Duration()])
   30  :                         Duration(TK.DUR, 1 day, 0:00:00)
   31  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   32  :                 Ref(TK.IDNT, 'atr')
   33  :         ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   34  :             Ref(TK.BUY, 'buy')

tree1:(post)  any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy
    1  : UnaryOp(TK.ANY, TK.ANY, 'any')
    2  :     Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    3  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    4  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    5  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    6  :                     Define(TK.DEFINE, TK.COLN, ':')
    7  :                         Block(TK.BLOCK, v=[Flow(), Flow()], '')
    8  :                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
    9  :                                 BinOp(TK.GTR, '>')
   10  :                                     Ref(TK.IDNT, 'close')
   11  :                                 FnCall('sma')
   12  :                                     Ref(TK.IDNT, 'sma')
   13  :                                     List(TK.TUPLE, [Int()])
   14  :                                         Int(TK.INT, 10)
   15  :                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   16  :                                 BinOp(TK.GTR, '>')
   17  :                                     Ref(TK.IDNT, 'close')
   18  :                                 FnCall('sma')
   19  :                                     Ref(TK.IDNT, 'sma')
   20  :                                     List(TK.TUPLE, [Int()])
   21  :                                         Int(TK.INT, 20)
   22  :                         Define(TK.DEFINE, TK.EQLS, '=')
   23  :                             Ref(TK.IDNT, 'threshold')
   24  :                             Float(TK.FLOT, 0.01)
   25  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   26  :                         Ref(TK.SIGNAL, 'signal')
   27  :                 FnCall('delay')
   28  :                     Ref(TK.IDNT, 'delay')
   29  :                     List(TK.TUPLE, [Duration()])
   30  :                         Duration(TK.DUR, 1 day, 0:00:00)
   31  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   32  :                 Ref(TK.IDNT, 'atr')
   33  :         ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   34  :             Ref(TK.BUY, 'buy')
