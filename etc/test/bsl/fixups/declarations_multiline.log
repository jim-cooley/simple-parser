

test:
# var declarations
var f = 5
var f.a = 5
var f = { a=5 }
var f = { a(x):x*x }
var f = { a(_):_*_ }
var f = { 5 }
var f := 5
var f := { 5 }

# def declarations
def f(x) := x * 4;
def f(x) = x * 4
def f(x) := { x * 4 }
def f(x) := {
    x = 4
    y = 7
    x * y
}

# tuples
(x, y, z)
(1, 2, 3)
(x:1, y:2, z:3)
(x=1, y=2, z=3)
(x, y, z) = (1, 2, 3)
(x, y, z) = {q, r, s}:(1, 2, 3)
(x, y, z) = {q, r, s}:{q=1, r=2, s=3}
a = (1, 2, 3)
a = {q, r, s}:(1, 2, 3)
a = {q, r, s}:{q=1, r=2, s=3}

# blocks
{x, y, z}
{1, 2, 3}
{x:1, y:2, z:3}
{x=1, y=2, z=3}
{x=1, y=2, z=3*(x+y)}

{x, y, z}
{1, 2, 3}
{x:1, y:2, z:3}
{x=1, y=2, z=3}
{x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)

# declarations 2
a = (x, y, z)
a = (1, 2, 3)
a = (x:1, y:2, z:3)
a = (x=1, y=2, z=3)

b := {x, y, z}
b := {1, 2, 3}
b := {x:1, y:2, z:3}
b := {x=1, y=2, z=3}
b := {x=1, y=2, z=3*(x+y)}

def c = {x, y, z}
def c = {1, 2, 3}
def c = {x:1, y:2, z:3}
def c = {x=1, y=2, z=3}
def c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)

var c = {x, y, z}
var c = {1, 2, 3}
var c = {x:1, y:2, z:3}
var c = {x=1, y=2, z=3}
var c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)




tree1:  var f = 5
    1  : DefineVar(TK.DEFINE: f = 5)
    2  :     Ref(TK.IDENT, 'f')
    3  :     Int(TK.INT, 5)

tree2:  var f.a = 5
    1  : DefineVar(TK.DEFINE: PropRef(TK.REF, '.') = 5)
    2  :     PropRef(TK.REF: f . Ref(TK.IDENT, 'a'))
    3  :         Ref(TK.IDENT, 'f')
    4  :         Ref(TK.IDENT, 'a')
    5  :     Int(TK.INT, 5)

tree3:  var f = { a=5 }
    1  : DefineVar(TK.DEFINE: f = Set{count=-1})
    2  :     Ref(TK.IDENT, 'f')
    3  :     Set(TK.SET, [Define()])
    4  :         Define(TK.DEFINE: a = 5)
    5  :             Ref(TK.IDENT, 'a')
    6  :             Int(TK.INT, 5)

tree4:  var f = { a(x):x*x }
    1  : DefineVar(TK.DEFINE: f = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=1}
    4  :         DefineFn(TK.COMBINE: a : BinOp(TK.MUL, '*'))
    5  :             Ref(TK.IDENT, 'a')
    6  :             BinOp(TK.MUL, '*')
    7  :                 Ref(TK.IDENT, 'x')
    8  :                 Ref(TK.IDENT, 'x')
    9  :             List(TK.LIST, [Ref()])
   10  :                 Ref(TK.IDENT, 'x')

tree5:  var f = { a(_):_*_ }
    1  : DefineVar(TK.DEFINE: f = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=1}
    4  :         DefineFn(TK.COMBINE: a : BinOp(TK.MUL, '*'))
    5  :             Ref(TK.IDENT, 'a')
    6  :             BinOp(TK.MUL, '*')
    7  :                 Ref(TK.ANON, '_')
    8  :                 Ref(TK.ANON, '_')
    9  :             List(TK.LIST, [Ref()])
   10  :                 Ref(TK.ANON, '_')

tree6:  var f = { 5 }
    1  : DefineVar(TK.DEFINE: f = Set{count=-1})
    2  :     Ref(TK.IDENT, 'f')
    3  :     Set(TK.SET, [Int()])
    4  :         Int(TK.INT, 5)

tree7:  var f := 5
    1  : DefineVar(TK.DEFINE: f := 5)
    2  :     Ref(TK.IDENT, 'f')
    3  :     Int(TK.INT, 5)

tree8:  var f := { 5 }
    1  : DefineVar(TK.DEFINE: f := Set{count=-1})
    2  :     Ref(TK.IDENT, 'f')
    3  :     Set(TK.SET, [Int()])
    4  :         Int(TK.INT, 5)

tree9:  def f(x) := x * 4;
    1  : DefineVarFn(TK.DEFINE: f := BinOp(TK.MUL, '*'))
    2  :     Ref(TK.IDENT, 'f')
    3  :     BinOp(TK.MUL, '*')
    4  :         Ref(TK.IDENT, 'x')
    5  :         Int(TK.INT, 4)
    6  :     List(TK.LIST, [Ref()])
    7  :         Ref(TK.IDENT, 'x')

tree10:  def f(x) = x * 4
    1  : DefineFn(TK.DEFINE: f = BinOp(TK.MUL, '*'))
    2  :     Ref(TK.IDENT, 'f')
    3  :     BinOp(TK.MUL, '*')
    4  :         Ref(TK.IDENT, 'x')
    5  :         Int(TK.INT, 4)
    6  :     List(TK.LIST, [Ref()])
    7  :         Ref(TK.IDENT, 'x')

tree11:  def f(x) := { x * 4 }
    1  : DefineVarFn(TK.DEFINE: f := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=1}
    4  :         BinOp(TK.MUL, '*')
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 4)
    7  :     List(TK.LIST, [Ref()])
    8  :         Ref(TK.IDENT, 'x')

tree12:  def f(x) := {
    1  : DefineVarFn(TK.DEFINE: f := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=3}
    4  :         Define(TK.DEFINE: x = 4)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 4)
    7  :         Define(TK.DEFINE: y = 7)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 7)
   10  :         BinOp(TK.MUL, '*')
   11  :             Ref(TK.IDENT, 'x')
   12  :             Ref(TK.IDENT, 'y')
   13  :     List(TK.LIST, [Ref()])
   14  :         Ref(TK.IDENT, 'x')

tree13:  (x, y, z)
    1  : List(TK.TUPLE, [Get(), Get(), Get()])
    2  :     Get(TK.IDENT, 'x')
    3  :     Get(TK.IDENT, 'y')
    4  :     Get(TK.IDENT, 'z')

tree14:  (1, 2, 3)
    1  : List(TK.TUPLE, [Int(), Int(), Int()])
    2  :     Int(TK.INT, 1)
    3  :     Int(TK.INT, 2)
    4  :     Int(TK.INT, 3)

tree15:  (x:1, y:2, z:3)
    1  : List(TK.TUPLE, [Combine(), Combine(), Combine()])
    2  :     Combine(TK.COMBINE: x None 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Combine(TK.COMBINE: y None 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Combine(TK.COMBINE: z None 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree16:  (x=1, y=2, z=3)
    1  : List(TK.TUPLE, [Define(), Define(), Define()])
    2  :     Define(TK.DEFINE: x = 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Define(TK.DEFINE: y = 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Define(TK.DEFINE: z = 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree17:  (x, y, z) = (1, 2, 3)
    1  : Define(TK.DEFINE: ( = List[count=3])
    2  :     List(TK.TUPLE, [Ref(), Ref(), Ref()])
    3  :         Ref(TK.IDENT, 'x')
    4  :         Ref(TK.IDENT, 'y')
    5  :         Ref(TK.IDENT, 'z')
    6  :     List(TK.TUPLE, [Int(), Int(), Int()])
    7  :         Int(TK.INT, 1)
    8  :         Int(TK.INT, 2)
    9  :         Int(TK.INT, 3)

tree18:  (x, y, z) = {q, r, s}:(1, 2, 3)
    1  : Define(TK.DEFINE: ( = Combine(TK.DEFINE, 'None'))
    2  :     List(TK.TUPLE, [Ref(), Ref(), Ref()])
    3  :         Ref(TK.IDENT, 'x')
    4  :         Ref(TK.IDENT, 'y')
    5  :         Ref(TK.IDENT, 'z')
    6  :     Combine(TK.COMBINE:  None List[count=3])
    7  :         Set(TK.SET, [Ref(), Ref(), Ref()])
    8  :             Ref(TK.IDENT, 'q')
    9  :             Ref(TK.IDENT, 'r')
   10  :             Ref(TK.IDENT, 's')
   11  :         List(TK.TUPLE, [Int(), Int(), Int()])
   12  :             Int(TK.INT, 1)
   13  :             Int(TK.INT, 2)
   14  :             Int(TK.INT, 3)

tree19:  (x, y, z) = {q, r, s}:{q=1, r=2, s=3}
    1  : Define(TK.DEFINE: ( = Combine(TK.DEFINE, 'None'))
    2  :     List(TK.TUPLE, [Ref(), Ref(), Ref()])
    3  :         Ref(TK.IDENT, 'x')
    4  :         Ref(TK.IDENT, 'y')
    5  :         Ref(TK.IDENT, 'z')
    6  :     Combine(TK.COMBINE:  None Set{count=-1})
    7  :         Set(TK.SET, [Ref(), Ref(), Ref()])
    8  :             Ref(TK.IDENT, 'q')
    9  :             Ref(TK.IDENT, 'r')
   10  :             Ref(TK.IDENT, 's')
   11  :         Set(TK.SET, [Define(), Define(), Define()])
   12  :             Define(TK.DEFINE: q = 1)
   13  :                 Ref(TK.IDENT, 'q')
   14  :                 Int(TK.INT, 1)
   15  :             Define(TK.DEFINE: r = 2)
   16  :                 Ref(TK.IDENT, 'r')
   17  :                 Int(TK.INT, 2)
   18  :             Define(TK.DEFINE: s = 3)
   19  :                 Ref(TK.IDENT, 's')
   20  :                 Int(TK.INT, 3)

tree20:  a = (1, 2, 3)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree21:  a = {q, r, s}:(1, 2, 3)
    1  : Define(TK.DEFINE: a = Combine(TK.DEFINE, 'None'))
    2  :     Ref(TK.IDENT, 'a')
    3  :     Combine(TK.COMBINE:  None List[count=3])
    4  :         Set(TK.SET, [Ref(), Ref(), Ref()])
    5  :             Ref(TK.IDENT, 'q')
    6  :             Ref(TK.IDENT, 'r')
    7  :             Ref(TK.IDENT, 's')
    8  :         List(TK.TUPLE, [Int(), Int(), Int()])
    9  :             Int(TK.INT, 1)
   10  :             Int(TK.INT, 2)
   11  :             Int(TK.INT, 3)

tree22:  a = {q, r, s}:{q=1, r=2, s=3}
    1  : Define(TK.DEFINE: a = Combine(TK.DEFINE, 'None'))
    2  :     Ref(TK.IDENT, 'a')
    3  :     Combine(TK.COMBINE:  None Set{count=-1})
    4  :         Set(TK.SET, [Ref(), Ref(), Ref()])
    5  :             Ref(TK.IDENT, 'q')
    6  :             Ref(TK.IDENT, 'r')
    7  :             Ref(TK.IDENT, 's')
    8  :         Set(TK.SET, [Define(), Define(), Define()])
    9  :             Define(TK.DEFINE: q = 1)
   10  :                 Ref(TK.IDENT, 'q')
   11  :                 Int(TK.INT, 1)
   12  :             Define(TK.DEFINE: r = 2)
   13  :                 Ref(TK.IDENT, 'r')
   14  :                 Int(TK.INT, 2)
   15  :             Define(TK.DEFINE: s = 3)
   16  :                 Ref(TK.IDENT, 's')
   17  :                 Int(TK.INT, 3)

tree23:  {x, y, z}
    1  : Set(TK.SET, [Get(), Get(), Get()])
    2  :     Get(TK.IDENT, 'x')
    3  :     Get(TK.IDENT, 'y')
    4  :     Get(TK.IDENT, 'z')

tree24:  {1, 2, 3}
    1  : Set(TK.SET, [Int(), Int(), Int()])
    2  :     Int(TK.INT, 1)
    3  :     Int(TK.INT, 2)
    4  :     Int(TK.INT, 3)

tree25:  {x:1, y:2, z:3}
    1  : Set(TK.SET, [Combine(), Combine(), Combine()])
    2  :     Combine(TK.COMBINE: x None 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Combine(TK.COMBINE: y None 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Combine(TK.COMBINE: z None 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree26:  {x=1, y=2, z=3}
    1  : Set(TK.SET, [Define(), Define(), Define()])
    2  :     Define(TK.DEFINE: x = 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Define(TK.DEFINE: y = 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Define(TK.DEFINE: z = 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree27:  {x=1, y=2, z=3*(x+y)}
    1  : Block{TK.BLOCK, len=3}
    2  :     Define(TK.DEFINE: x = 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Define(TK.DEFINE: y = 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
    9  :         Ref(TK.IDENT, 'z')
   10  :         BinOp(TK.MUL, '*')
   11  :             Int(TK.INT, 3)
   12  :             BinOp(TK.ADD, '+')
   13  :                 Get(TK.IDENT, 'x')
   14  :                 Get(TK.IDENT, 'y')

tree28:  {x, y, z}
    1  : Set(TK.SET, [Get(), Get(), Get()])
    2  :     Get(TK.IDENT, 'x')
    3  :     Get(TK.IDENT, 'y')
    4  :     Get(TK.IDENT, 'z')

tree29:  {1, 2, 3}
    1  : Set(TK.SET, [Int(), Int(), Int()])
    2  :     Int(TK.INT, 1)
    3  :     Int(TK.INT, 2)
    4  :     Int(TK.INT, 3)

tree30:  {x:1, y:2, z:3}
    1  : Set(TK.SET, [Combine(), Combine(), Combine()])
    2  :     Combine(TK.COMBINE: x None 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Combine(TK.COMBINE: y None 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Combine(TK.COMBINE: z None 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree31:  {x=1, y=2, z=3}
    1  : Set(TK.SET, [Define(), Define(), Define()])
    2  :     Define(TK.DEFINE: x = 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Define(TK.DEFINE: y = 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Define(TK.DEFINE: z = 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree32:  {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
    1  : Combine(TK.COMBINE:  None List[count=3])
    2  :     Block{TK.BLOCK, len=3}
    3  :         Define(TK.DEFINE: x = 1)
    4  :             Ref(TK.IDENT, 'x')
    5  :             Int(TK.INT, 1)
    6  :         Define(TK.DEFINE: y = 2)
    7  :             Ref(TK.IDENT, 'y')
    8  :             Int(TK.INT, 2)
    9  :         Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
   10  :             Ref(TK.IDENT, 'z')
   11  :             BinOp(TK.MUL, '*')
   12  :                 Int(TK.INT, 3)
   13  :                 BinOp(TK.ADD, '+')
   14  :                     Ref(TK.IDENT, 'x')
   15  :                     Ref(TK.IDENT, 'y')
   16  :     List(TK.TUPLE, [Define(), Define(), Define()])
   17  :         Define(TK.DEFINE: x = 1)
   18  :             Ref(TK.IDENT, 'x')
   19  :             Int(TK.INT, 1)
   20  :         Define(TK.DEFINE: y = 2)
   21  :             Ref(TK.IDENT, 'y')
   22  :             Int(TK.INT, 2)
   23  :         Define(TK.DEFINE: z = 3)
   24  :             Ref(TK.IDENT, 'z')
   25  :             Int(TK.INT, 3)

tree33:  a = (x, y, z)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Get(), Get(), Get()])
    4  :         Get(TK.IDENT, 'x')
    5  :         Get(TK.IDENT, 'y')
    6  :         Get(TK.IDENT, 'z')

tree34:  a = (1, 2, 3)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree35:  a = (x:1, y:2, z:3)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Combine(), Combine(), Combine()])
    4  :         Combine(TK.COMBINE: x None 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Combine(TK.COMBINE: y None 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Combine(TK.COMBINE: z None 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree36:  a = (x=1, y=2, z=3)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Define(), Define(), Define()])
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree37:  b := {x, y, z}
    1  : DefineVar(TK.DEFINE: b := Set{count=-1})
    2  :     Ref(TK.IDENT, 'b')
    3  :     Set(TK.SET, [Get(), Get(), Get()])
    4  :         Get(TK.IDENT, 'x')
    5  :         Get(TK.IDENT, 'y')
    6  :         Get(TK.IDENT, 'z')

tree38:  b := {1, 2, 3}
    1  : DefineVar(TK.DEFINE: b := Set{count=-1})
    2  :     Ref(TK.IDENT, 'b')
    3  :     Set(TK.SET, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree39:  b := {x:1, y:2, z:3}
    1  : DefineVar(TK.DEFINE: b := Set{count=-1})
    2  :     Ref(TK.IDENT, 'b')
    3  :     Set(TK.SET, [Combine(), Combine(), Combine()])
    4  :         Combine(TK.COMBINE: x None 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Combine(TK.COMBINE: y None 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Combine(TK.COMBINE: z None 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree40:  b := {x=1, y=2, z=3}
    1  : DefineVar(TK.DEFINE: b := Set{count=-1})
    2  :     Ref(TK.IDENT, 'b')
    3  :     Set(TK.SET, [Define(), Define(), Define()])
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree41:  b := {x=1, y=2, z=3*(x+y)}
    1  : DefineVar(TK.DEFINE: b := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'b')
    3  :     Block{TK.BLOCK, len=3}
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
   11  :             Ref(TK.IDENT, 'z')
   12  :             BinOp(TK.MUL, '*')
   13  :                 Int(TK.INT, 3)
   14  :                 BinOp(TK.ADD, '+')
   15  :                     Get(TK.IDENT, 'x')
   16  :                     Get(TK.IDENT, 'y')

tree42:  def c = {x, y, z}
    1  : Define(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Ref(), Ref(), Ref()])
    4  :         Ref(TK.IDENT, 'x')
    5  :         Ref(TK.IDENT, 'y')
    6  :         Ref(TK.IDENT, 'z')

tree43:  def c = {1, 2, 3}
    1  : Define(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree44:  def c = {x:1, y:2, z:3}
    1  : Define(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Combine(), Combine(), Combine()])
    4  :         Combine(TK.COMBINE: x None 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Combine(TK.COMBINE: y None 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Combine(TK.COMBINE: z None 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree45:  def c = {x=1, y=2, z=3}
    1  : Define(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Define(), Define(), Define()])
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree46:  def c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
    1  : Define(TK.DEFINE: c = Combine(TK.DEFINE, 'None'))
    2  :     Ref(TK.IDENT, 'c')
    3  :     Combine(TK.COMBINE:  None List[count=3])
    4  :         Block{TK.BLOCK, len=3}
    5  :             Define(TK.DEFINE: x = 1)
    6  :                 Ref(TK.IDENT, 'x')
    7  :                 Int(TK.INT, 1)
    8  :             Define(TK.DEFINE: y = 2)
    9  :                 Ref(TK.IDENT, 'y')
   10  :                 Int(TK.INT, 2)
   11  :             Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
   12  :                 Ref(TK.IDENT, 'z')
   13  :                 BinOp(TK.MUL, '*')
   14  :                     Int(TK.INT, 3)
   15  :                     BinOp(TK.ADD, '+')
   16  :                         Ref(TK.IDENT, 'x')
   17  :                         Ref(TK.IDENT, 'y')
   18  :         List(TK.TUPLE, [Define(), Define(), Define()])
   19  :             Define(TK.DEFINE: x = 1)
   20  :                 Ref(TK.IDENT, 'x')
   21  :                 Int(TK.INT, 1)
   22  :             Define(TK.DEFINE: y = 2)
   23  :                 Ref(TK.IDENT, 'y')
   24  :                 Int(TK.INT, 2)
   25  :             Define(TK.DEFINE: z = 3)
   26  :                 Ref(TK.IDENT, 'z')
   27  :                 Int(TK.INT, 3)

tree47:  var c = {x, y, z}
    1  : DefineVar(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Ref(), Ref(), Ref()])
    4  :         Ref(TK.IDENT, 'x')
    5  :         Ref(TK.IDENT, 'y')
    6  :         Ref(TK.IDENT, 'z')

tree48:  var c = {1, 2, 3}
    1  : DefineVar(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree49:  var c = {x:1, y:2, z:3}
    1  : DefineVar(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Combine(), Combine(), Combine()])
    4  :         Combine(TK.COMBINE: x None 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Combine(TK.COMBINE: y None 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Combine(TK.COMBINE: z None 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree50:  var c = {x=1, y=2, z=3}
    1  : DefineVar(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Define(), Define(), Define()])
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree51:  var c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
    1  : DefineVar(TK.DEFINE: c = Combine(TK.DEFINE, 'None'))
    2  :     Ref(TK.IDENT, 'c')
    3  :     Combine(TK.COMBINE:  None List[count=3])
    4  :         Block{TK.BLOCK, len=3}
    5  :             Define(TK.DEFINE: x = 1)
    6  :                 Ref(TK.IDENT, 'x')
    7  :                 Int(TK.INT, 1)
    8  :             Define(TK.DEFINE: y = 2)
    9  :                 Ref(TK.IDENT, 'y')
   10  :                 Int(TK.INT, 2)
   11  :             Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
   12  :                 Ref(TK.IDENT, 'z')
   13  :                 BinOp(TK.MUL, '*')
   14  :                     Int(TK.INT, 3)
   15  :                     BinOp(TK.ADD, '+')
   16  :                         Ref(TK.IDENT, 'x')
   17  :                         Ref(TK.IDENT, 'y')
   18  :         List(TK.TUPLE, [Define(), Define(), Define()])
   19  :             Define(TK.DEFINE: x = 1)
   20  :                 Ref(TK.IDENT, 'x')
   21  :                 Int(TK.INT, 1)
   22  :             Define(TK.DEFINE: y = 2)
   23  :                 Ref(TK.IDENT, 'y')
   24  :                 Int(TK.INT, 2)
   25  :             Define(TK.DEFINE: z = 3)
   26  :                 Ref(TK.IDENT, 'z')
   27  :                 Int(TK.INT, 3)

tree1:(post)  var f = 5
    1  : DefineVar(TK.DEFINE: f = 5)
    2  :     Ref(TK.IDENT, 'f')
    3  :     Int(TK.INT, 5)

tree2:(post)  var f.a = 5
    1  : DefineVar(TK.DEFINE: PropRef(TK.REF, '.') = 5)
    2  :     PropRef(TK.REF: f . Ref(TK.IDENT, 'a'))
    3  :         Ref(TK.IDENT, 'f')
    4  :         Ref(TK.IDENT, 'a')
    5  :     Int(TK.INT, 5)

tree3:(post)  var f = { a=5 }
    1  : DefineVar(TK.DEFINE: f = Set{count=-1})
    2  :     Ref(TK.IDENT, 'f')
    3  :     Set(TK.SET, [Define()])
    4  :         Define(TK.DEFINE: a = 5)
    5  :             Ref(TK.IDENT, 'a')
    6  :             Int(TK.INT, 5)

tree4:(post)  var f = { a(x):x*x }
    1  : DefineVar(TK.DEFINE: f = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=1}
    4  :         DefineFn(TK.COMBINE: a : BinOp(TK.MUL, '*'))
    5  :             Ref(TK.IDENT, 'a')
    6  :             BinOp(TK.MUL, '*')
    7  :                 Ref(TK.IDENT, 'x')
    8  :                 Ref(TK.IDENT, 'x')
    9  :             List(TK.LIST, [Ref()])
   10  :                 Ref(TK.IDENT, 'x')

tree5:(post)  var f = { a(_):_*_ }
    1  : DefineVar(TK.DEFINE: f = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=1}
    4  :         DefineFn(TK.COMBINE: a : BinOp(TK.MUL, '*'))
    5  :             Ref(TK.IDENT, 'a')
    6  :             BinOp(TK.MUL, '*')
    7  :                 Ref(TK.ANON, '_')
    8  :                 Ref(TK.ANON, '_')
    9  :             List(TK.LIST, [Ref()])
   10  :                 Ref(TK.ANON, '_')

tree6:(post)  var f = { 5 }
    1  : DefineVar(TK.DEFINE: f = Set{count=-1})
    2  :     Ref(TK.IDENT, 'f')
    3  :     Set(TK.SET, [Int()])
    4  :         Int(TK.INT, 5)

tree7:(post)  var f := 5
    1  : DefineVar(TK.DEFINE: f := 5)
    2  :     Ref(TK.IDENT, 'f')
    3  :     Int(TK.INT, 5)

tree8:(post)  var f := { 5 }
    1  : DefineVar(TK.DEFINE: f := Set{count=-1})
    2  :     Ref(TK.IDENT, 'f')
    3  :     Set(TK.SET, [Int()])
    4  :         Int(TK.INT, 5)

tree9:(post)  def f(x) := x * 4;
    1  : DefineVarFn(TK.DEFINE: f := BinOp(TK.MUL, '*'))
    2  :     Ref(TK.IDENT, 'f')
    3  :     BinOp(TK.MUL, '*')
    4  :         Ref(TK.IDENT, 'x')
    5  :         Int(TK.INT, 4)
    6  :     List(TK.LIST, [Ref()])
    7  :         Ref(TK.IDENT, 'x')

tree10:(post)  def f(x) = x * 4
    1  : DefineFn(TK.DEFINE: f = BinOp(TK.MUL, '*'))
    2  :     Ref(TK.IDENT, 'f')
    3  :     BinOp(TK.MUL, '*')
    4  :         Ref(TK.IDENT, 'x')
    5  :         Int(TK.INT, 4)
    6  :     List(TK.LIST, [Ref()])
    7  :         Ref(TK.IDENT, 'x')

tree11:(post)  def f(x) := { x * 4 }
    1  : DefineVarFn(TK.DEFINE: f := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=1}
    4  :         BinOp(TK.MUL, '*')
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 4)
    7  :     List(TK.LIST, [Ref()])
    8  :         Ref(TK.IDENT, 'x')

tree12:(post)  def f(x) := {
    1  : DefineVarFn(TK.DEFINE: f := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=3}
    4  :         Define(TK.DEFINE: x = 4)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 4)
    7  :         Define(TK.DEFINE: y = 7)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 7)
   10  :         BinOp(TK.MUL, '*')
   11  :             Ref(TK.IDENT, 'x')
   12  :             Ref(TK.IDENT, 'y')
   13  :     List(TK.LIST, [Ref()])
   14  :         Ref(TK.IDENT, 'x')

tree13:(post)  (x, y, z)
result: list([Get(), Get(), Get()])
    1  : List(TK.TUPLE, [Get(), Get(), Get()])
    2  :     Get(TK.IDENT, 'x')
    3  :     Get(TK.IDENT, 'y')
    4  :     Get(TK.IDENT, 'z')

tree14:(post)  (1, 2, 3)
result: list([Int(), Int(), Int()])
    1  : List(TK.TUPLE, [Int(), Int(), Int()])
    2  :     Int(TK.INT, 1)
    3  :     Int(TK.INT, 2)
    4  :     Int(TK.INT, 3)

tree15:(post)  (x:1, y:2, z:3)
result: list([Combine(), Combine(), Combine()])
    1  : List(TK.TUPLE, [Combine(), Combine(), Combine()])
    2  :     Combine(TK.COMBINE: x None 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Combine(TK.COMBINE: y None 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Combine(TK.COMBINE: z None 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree16:(post)  (x=1, y=2, z=3)
result: list([Define(), Define(), Define()])
    1  : List(TK.TUPLE, [Define(), Define(), Define()])
    2  :     Define(TK.DEFINE: x = 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Define(TK.DEFINE: y = 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Define(TK.DEFINE: z = 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree17:(post)  (x, y, z) = (1, 2, 3)
    1  : Define(TK.DEFINE: ( = List[count=3])
    2  :     List(TK.TUPLE, [Ref(), Ref(), Ref()])
    3  :         Ref(TK.IDENT, 'x')
    4  :         Ref(TK.IDENT, 'y')
    5  :         Ref(TK.IDENT, 'z')
    6  :     List(TK.TUPLE, [Int(), Int(), Int()])
    7  :         Int(TK.INT, 1)
    8  :         Int(TK.INT, 2)
    9  :         Int(TK.INT, 3)

tree18:(post)  (x, y, z) = {q, r, s}:(1, 2, 3)
    1  : Define(TK.DEFINE: ( = Combine(TK.DEFINE, 'None'))
    2  :     List(TK.TUPLE, [Ref(), Ref(), Ref()])
    3  :         Ref(TK.IDENT, 'x')
    4  :         Ref(TK.IDENT, 'y')
    5  :         Ref(TK.IDENT, 'z')
    6  :     Combine(TK.COMBINE:  None List[count=3])
    7  :         Set(TK.SET, [Ref(), Ref(), Ref()])
    8  :             Ref(TK.IDENT, 'q')
    9  :             Ref(TK.IDENT, 'r')
   10  :             Ref(TK.IDENT, 's')
   11  :         List(TK.TUPLE, [Int(), Int(), Int()])
   12  :             Int(TK.INT, 1)
   13  :             Int(TK.INT, 2)
   14  :             Int(TK.INT, 3)

tree19:(post)  (x, y, z) = {q, r, s}:{q=1, r=2, s=3}
    1  : Define(TK.DEFINE: ( = Combine(TK.DEFINE, 'None'))
    2  :     List(TK.TUPLE, [Ref(), Ref(), Ref()])
    3  :         Ref(TK.IDENT, 'x')
    4  :         Ref(TK.IDENT, 'y')
    5  :         Ref(TK.IDENT, 'z')
    6  :     Combine(TK.COMBINE:  None Set{count=-1})
    7  :         Set(TK.SET, [Ref(), Ref(), Ref()])
    8  :             Ref(TK.IDENT, 'q')
    9  :             Ref(TK.IDENT, 'r')
   10  :             Ref(TK.IDENT, 's')
   11  :         Set(TK.SET, [Define(), Define(), Define()])
   12  :             Define(TK.DEFINE: q = 1)
   13  :                 Ref(TK.IDENT, 'q')
   14  :                 Int(TK.INT, 1)
   15  :             Define(TK.DEFINE: r = 2)
   16  :                 Ref(TK.IDENT, 'r')
   17  :                 Int(TK.INT, 2)
   18  :             Define(TK.DEFINE: s = 3)
   19  :                 Ref(TK.IDENT, 's')
   20  :                 Int(TK.INT, 3)

tree20:(post)  a = (1, 2, 3)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree21:(post)  a = {q, r, s}:(1, 2, 3)
    1  : Define(TK.DEFINE: a = Combine(TK.DEFINE, 'None'))
    2  :     Ref(TK.IDENT, 'a')
    3  :     Combine(TK.COMBINE:  None List[count=3])
    4  :         Set(TK.SET, [Ref(), Ref(), Ref()])
    5  :             Ref(TK.IDENT, 'q')
    6  :             Ref(TK.IDENT, 'r')
    7  :             Ref(TK.IDENT, 's')
    8  :         List(TK.TUPLE, [Int(), Int(), Int()])
    9  :             Int(TK.INT, 1)
   10  :             Int(TK.INT, 2)
   11  :             Int(TK.INT, 3)

tree22:(post)  a = {q, r, s}:{q=1, r=2, s=3}
    1  : Define(TK.DEFINE: a = Combine(TK.DEFINE, 'None'))
    2  :     Ref(TK.IDENT, 'a')
    3  :     Combine(TK.COMBINE:  None Set{count=-1})
    4  :         Set(TK.SET, [Ref(), Ref(), Ref()])
    5  :             Ref(TK.IDENT, 'q')
    6  :             Ref(TK.IDENT, 'r')
    7  :             Ref(TK.IDENT, 's')
    8  :         Set(TK.SET, [Define(), Define(), Define()])
    9  :             Define(TK.DEFINE: q = 1)
   10  :                 Ref(TK.IDENT, 'q')
   11  :                 Int(TK.INT, 1)
   12  :             Define(TK.DEFINE: r = 2)
   13  :                 Ref(TK.IDENT, 'r')
   14  :                 Int(TK.INT, 2)
   15  :             Define(TK.DEFINE: s = 3)
   16  :                 Ref(TK.IDENT, 's')
   17  :                 Int(TK.INT, 3)

tree23:(post)  {x, y, z}
result: list([Get(), Get(), Get()])
    1  : Set(TK.SET, [Get(), Get(), Get()])
    2  :     Get(TK.IDENT, 'x')
    3  :     Get(TK.IDENT, 'y')
    4  :     Get(TK.IDENT, 'z')

tree24:(post)  {1, 2, 3}
result: list([Int(), Int(), Int()])
    1  : Set(TK.SET, [Int(), Int(), Int()])
    2  :     Int(TK.INT, 1)
    3  :     Int(TK.INT, 2)
    4  :     Int(TK.INT, 3)

tree25:(post)  {x:1, y:2, z:3}
result: list([Combine(), Combine(), Combine()])
    1  : Set(TK.SET, [Combine(), Combine(), Combine()])
    2  :     Combine(TK.COMBINE: x None 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Combine(TK.COMBINE: y None 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Combine(TK.COMBINE: z None 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree26:(post)  {x=1, y=2, z=3}
result: list([Define(), Define(), Define()])
    1  : Set(TK.SET, [Define(), Define(), Define()])
    2  :     Define(TK.DEFINE: x = 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Define(TK.DEFINE: y = 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Define(TK.DEFINE: z = 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree27:(post)  {x=1, y=2, z=3*(x+y)}
result: list([Define(), Define(), Define()])
    1  : Block{TK.BLOCK, len=3}
    2  :     Define(TK.DEFINE: x = 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Define(TK.DEFINE: y = 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
    9  :         Ref(TK.IDENT, 'z')
   10  :         BinOp(TK.MUL, '*')
   11  :             Int(TK.INT, 3)
   12  :             BinOp(TK.ADD, '+')
   13  :                 Get(TK.IDENT, 'x')
   14  :                 Get(TK.IDENT, 'y')

tree28:(post)  {x, y, z}
result: list([Get(), Get(), Get()])
    1  : Set(TK.SET, [Get(), Get(), Get()])
    2  :     Get(TK.IDENT, 'x')
    3  :     Get(TK.IDENT, 'y')
    4  :     Get(TK.IDENT, 'z')

tree29:(post)  {1, 2, 3}
result: list([Int(), Int(), Int()])
    1  : Set(TK.SET, [Int(), Int(), Int()])
    2  :     Int(TK.INT, 1)
    3  :     Int(TK.INT, 2)
    4  :     Int(TK.INT, 3)

tree30:(post)  {x:1, y:2, z:3}
result: list([Combine(), Combine(), Combine()])
    1  : Set(TK.SET, [Combine(), Combine(), Combine()])
    2  :     Combine(TK.COMBINE: x None 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Combine(TK.COMBINE: y None 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Combine(TK.COMBINE: z None 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree31:(post)  {x=1, y=2, z=3}
result: list([Define(), Define(), Define()])
    1  : Set(TK.SET, [Define(), Define(), Define()])
    2  :     Define(TK.DEFINE: x = 1)
    3  :         Ref(TK.IDENT, 'x')
    4  :         Int(TK.INT, 1)
    5  :     Define(TK.DEFINE: y = 2)
    6  :         Ref(TK.IDENT, 'y')
    7  :         Int(TK.INT, 2)
    8  :     Define(TK.DEFINE: z = 3)
    9  :         Ref(TK.IDENT, 'z')
   10  :         Int(TK.INT, 3)

tree32:(post)  {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
    1  : Combine(TK.COMBINE:  None List[count=3])
    2  :     Block{TK.BLOCK, len=3}
    3  :         Define(TK.DEFINE: x = 1)
    4  :             Ref(TK.IDENT, 'x')
    5  :             Int(TK.INT, 1)
    6  :         Define(TK.DEFINE: y = 2)
    7  :             Ref(TK.IDENT, 'y')
    8  :             Int(TK.INT, 2)
    9  :         Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
   10  :             Ref(TK.IDENT, 'z')
   11  :             BinOp(TK.MUL, '*')
   12  :                 Int(TK.INT, 3)
   13  :                 BinOp(TK.ADD, '+')
   14  :                     Ref(TK.IDENT, 'x')
   15  :                     Ref(TK.IDENT, 'y')
   16  :     List(TK.TUPLE, [Define(), Define(), Define()])
   17  :         Define(TK.DEFINE: x = 1)
   18  :             Ref(TK.IDENT, 'x')
   19  :             Int(TK.INT, 1)
   20  :         Define(TK.DEFINE: y = 2)
   21  :             Ref(TK.IDENT, 'y')
   22  :             Int(TK.INT, 2)
   23  :         Define(TK.DEFINE: z = 3)
   24  :             Ref(TK.IDENT, 'z')
   25  :             Int(TK.INT, 3)

tree33:(post)  a = (x, y, z)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Get(), Get(), Get()])
    4  :         Get(TK.IDENT, 'x')
    5  :         Get(TK.IDENT, 'y')
    6  :         Get(TK.IDENT, 'z')

tree34:(post)  a = (1, 2, 3)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree35:(post)  a = (x:1, y:2, z:3)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Combine(), Combine(), Combine()])
    4  :         Combine(TK.COMBINE: x None 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Combine(TK.COMBINE: y None 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Combine(TK.COMBINE: z None 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree36:(post)  a = (x=1, y=2, z=3)
    1  : Define(TK.DEFINE: a = List[count=3])
    2  :     Ref(TK.IDENT, 'a')
    3  :     List(TK.TUPLE, [Define(), Define(), Define()])
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree37:(post)  b := {x, y, z}
    1  : DefineVar(TK.DEFINE: b := Set{count=-1})
    2  :     Ref(TK.IDENT, 'b')
    3  :     Set(TK.SET, [Get(), Get(), Get()])
    4  :         Get(TK.IDENT, 'x')
    5  :         Get(TK.IDENT, 'y')
    6  :         Get(TK.IDENT, 'z')

tree38:(post)  b := {1, 2, 3}
    1  : DefineVar(TK.DEFINE: b := Set{count=-1})
    2  :     Ref(TK.IDENT, 'b')
    3  :     Set(TK.SET, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree39:(post)  b := {x:1, y:2, z:3}
    1  : DefineVar(TK.DEFINE: b := Set{count=-1})
    2  :     Ref(TK.IDENT, 'b')
    3  :     Set(TK.SET, [Combine(), Combine(), Combine()])
    4  :         Combine(TK.COMBINE: x None 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Combine(TK.COMBINE: y None 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Combine(TK.COMBINE: z None 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree40:(post)  b := {x=1, y=2, z=3}
    1  : DefineVar(TK.DEFINE: b := Set{count=-1})
    2  :     Ref(TK.IDENT, 'b')
    3  :     Set(TK.SET, [Define(), Define(), Define()])
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree41:(post)  b := {x=1, y=2, z=3*(x+y)}
    1  : DefineVar(TK.DEFINE: b := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'b')
    3  :     Block{TK.BLOCK, len=3}
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
   11  :             Ref(TK.IDENT, 'z')
   12  :             BinOp(TK.MUL, '*')
   13  :                 Int(TK.INT, 3)
   14  :                 BinOp(TK.ADD, '+')
   15  :                     Get(TK.IDENT, 'x')
   16  :                     Get(TK.IDENT, 'y')

tree42:(post)  def c = {x, y, z}
    1  : Define(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Ref(), Ref(), Ref()])
    4  :         Ref(TK.IDENT, 'x')
    5  :         Ref(TK.IDENT, 'y')
    6  :         Ref(TK.IDENT, 'z')

tree43:(post)  def c = {1, 2, 3}
    1  : Define(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree44:(post)  def c = {x:1, y:2, z:3}
    1  : Define(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Combine(), Combine(), Combine()])
    4  :         Combine(TK.COMBINE: x None 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Combine(TK.COMBINE: y None 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Combine(TK.COMBINE: z None 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree45:(post)  def c = {x=1, y=2, z=3}
    1  : Define(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Define(), Define(), Define()])
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree46:(post)  def c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
    1  : Define(TK.DEFINE: c = Combine(TK.DEFINE, 'None'))
    2  :     Ref(TK.IDENT, 'c')
    3  :     Combine(TK.COMBINE:  None List[count=3])
    4  :         Block{TK.BLOCK, len=3}
    5  :             Define(TK.DEFINE: x = 1)
    6  :                 Ref(TK.IDENT, 'x')
    7  :                 Int(TK.INT, 1)
    8  :             Define(TK.DEFINE: y = 2)
    9  :                 Ref(TK.IDENT, 'y')
   10  :                 Int(TK.INT, 2)
   11  :             Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
   12  :                 Ref(TK.IDENT, 'z')
   13  :                 BinOp(TK.MUL, '*')
   14  :                     Int(TK.INT, 3)
   15  :                     BinOp(TK.ADD, '+')
   16  :                         Ref(TK.IDENT, 'x')
   17  :                         Ref(TK.IDENT, 'y')
   18  :         List(TK.TUPLE, [Define(), Define(), Define()])
   19  :             Define(TK.DEFINE: x = 1)
   20  :                 Ref(TK.IDENT, 'x')
   21  :                 Int(TK.INT, 1)
   22  :             Define(TK.DEFINE: y = 2)
   23  :                 Ref(TK.IDENT, 'y')
   24  :                 Int(TK.INT, 2)
   25  :             Define(TK.DEFINE: z = 3)
   26  :                 Ref(TK.IDENT, 'z')
   27  :                 Int(TK.INT, 3)

tree47:(post)  var c = {x, y, z}
    1  : DefineVar(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Ref(), Ref(), Ref()])
    4  :         Ref(TK.IDENT, 'x')
    5  :         Ref(TK.IDENT, 'y')
    6  :         Ref(TK.IDENT, 'z')

tree48:(post)  var c = {1, 2, 3}
    1  : DefineVar(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Int(), Int(), Int()])
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 2)
    6  :         Int(TK.INT, 3)

tree49:(post)  var c = {x:1, y:2, z:3}
    1  : DefineVar(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Combine(), Combine(), Combine()])
    4  :         Combine(TK.COMBINE: x None 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Combine(TK.COMBINE: y None 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Combine(TK.COMBINE: z None 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree50:(post)  var c = {x=1, y=2, z=3}
    1  : DefineVar(TK.DEFINE: c = Set{count=-1})
    2  :     Ref(TK.IDENT, 'c')
    3  :     Set(TK.SET, [Define(), Define(), Define()])
    4  :         Define(TK.DEFINE: x = 1)
    5  :             Ref(TK.IDENT, 'x')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE: y = 2)
    8  :             Ref(TK.IDENT, 'y')
    9  :             Int(TK.INT, 2)
   10  :         Define(TK.DEFINE: z = 3)
   11  :             Ref(TK.IDENT, 'z')
   12  :             Int(TK.INT, 3)

tree51:(post)  var c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
    1  : DefineVar(TK.DEFINE: c = Combine(TK.DEFINE, 'None'))
    2  :     Ref(TK.IDENT, 'c')
    3  :     Combine(TK.COMBINE:  None List[count=3])
    4  :         Block{TK.BLOCK, len=3}
    5  :             Define(TK.DEFINE: x = 1)
    6  :                 Ref(TK.IDENT, 'x')
    7  :                 Int(TK.INT, 1)
    8  :             Define(TK.DEFINE: y = 2)
    9  :                 Ref(TK.IDENT, 'y')
   10  :                 Int(TK.INT, 2)
   11  :             Define(TK.DEFINE: z = BinOp(TK.MUL, '*'))
   12  :                 Ref(TK.IDENT, 'z')
   13  :                 BinOp(TK.MUL, '*')
   14  :                     Int(TK.INT, 3)
   15  :                     BinOp(TK.ADD, '+')
   16  :                         Ref(TK.IDENT, 'x')
   17  :                         Ref(TK.IDENT, 'y')
   18  :         List(TK.TUPLE, [Define(), Define(), Define()])
   19  :             Define(TK.DEFINE: x = 1)
   20  :                 Ref(TK.IDENT, 'x')
   21  :                 Int(TK.INT, 1)
   22  :             Define(TK.DEFINE: y = 2)
   23  :                 Ref(TK.IDENT, 'y')
   24  :                 Int(TK.INT, 2)
   25  :             Define(TK.DEFINE: z = 3)
   26  :                 Ref(TK.IDENT, 'z')
   27  :                 Int(TK.INT, 3)
