

test: 10:
close <| sma(10) | signal >> delay(1d) | atr => sell

tree1:  close <| sma(10) | signal >> delay(1d) | atr => sell
    1  : Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    2  :     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    3  :         Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
    4  :             BinOp(TK.FALL_BELOW, '<|')
    5  :                 Get(TK.IDNT, 'close')
    6  :                 FnCall('sma')
    7  :                     Get(TK.IDNT, 'sma')
    8  :                     List(TK.TUPLE, [Int()])
    9  :                         Int(TK.INT, 10)
   10  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   11  :                 Ref(TK.IDNT, 'signal')
   12  :         FnCall('delay')
   13  :             Ref(TK.IDNT, 'delay')
   14  :             List(TK.TUPLE, [Duration()])
   15  :                 Duration(TK.DUR, 1 day, 0:00:00)
   16  :     DefineFn(TK.DEFINE, TK.EQGT, '=>')
   17  :         Ref(TK.IDNT, 'atr')
   18  :         Ref(TK.SELL, 'sell')

tree1:(post)  close <| sma(10) | signal >> delay(1d) | atr => sell
result: list([Flow(), DefineFn()])
    1  : Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    2  :     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    3  :         Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
    4  :             BinOp(TK.FALL_BELOW, '<|')
    5  :                 Get(TK.IDNT, 'close')
    6  :                 FnCall('sma')
    7  :                     Get(TK.IDNT, 'sma')
    8  :                     List(TK.TUPLE, [Int()])
    9  :                         Int(TK.INT, 10)
   10  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   11  :                 Ref(TK.IDNT, 'signal')
   12  :         FnCall('delay')
   13  :             Ref(TK.IDNT, 'delay')
   14  :             List(TK.TUPLE, [Duration()])
   15  :                 Duration(TK.DUR, 1 day, 0:00:00)
   16  :     DefineFn(TK.DEFINE, TK.EQGT, '=>')
   17  :         Ref(TK.IDNT, 'atr')
   18  :         Ref(TK.SELL, 'sell')
