

test:
# sample rules file for pyser / qtradr

%%yahoo (file='spq500.csv', 2y)
%%backtest (rules, period='train')
%%report { report >> rules }

#
periods = {
    train: (today-2y)..today
}
sma_period = [3,5,10..20,28]

# productions: new datasets
atr := (high + low) / 2
median_price := (open + close) / 2
price10a := price.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }


rules: {
    baseline = {
        buy: any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
        sell: close <| sma(10) | signal >> delay(1d) | atr
    },
    scenario = {
        buy: { close >| sma(sma_period) } | signal >> atr.delay(1d),
        sell: close <| sma(sma_period) | signal >> atr.delay(1d)
    }
}


tree1:  periods = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'periods')
    3  :     Block(TK.BLOCK, v=[Define()], '')
    4  :         Define(TK.DEFINE, TK.COLN, ':')
    5  :             Ref(TK.IDNT, 'train')
    6  :             BinOp(TK.RANGE, '..')
    7  :                 BinOp(TK.SUB, '-')
    8  :                     Get(TK.IDNT, 'today')
    9  :                     Duration(TK.DUR, 730 days, 0:00:00)
   10  :                 Get(TK.IDNT, 'today')

tree2:  sma_period = [3,5,10..20,28]
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'sma_period')
    3  :     List(TK.LIST, [Int(), Int(), BinOp(), Int()])
    4  :         Int(TK.INT, 3)
    5  :         Int(TK.INT, 5)
    6  :         BinOp(TK.RANGE, '.')
    7  :             Float(TK.FLOT, 10.0)
    8  :             Int(TK.INT, 20)
    9  :         Int(TK.INT, 28)

tree3:  atr := (high + low) / 2
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'atr')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDNT, 'high')
    6  :             Get(TK.IDNT, 'low')
    7  :         Int(TK.INT, 2)

tree4:  median_price := (open + close) / 2
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'median_price')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDNT, 'open')
    6  :             Get(TK.IDNT, 'close')
    7  :         Int(TK.INT, 2)

tree5:  price10a := price.delay(1d)[10:00]
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'price10a')
    3  :     PropRef(TK.REF, '.')
    4  :         Get(TK.IDNT, 'price')
    5  :         FnCall('delay')
    6  :             Get(TK.IDNT, 'delay')
    7  :             List(TK.TUPLE, [Duration()])
    8  :                 Duration(TK.DUR, 1 day, 0:00:00)

tree6:  price10a := price.delay(1d)[10:00]
    1  : List(TK.LIST, [Time()])
    2  :     Time(TK.TIME, 10:00:00)

tree7:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'report')
    3  :     Block(TK.BLOCK, v=[Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Get(), FnCall()], '|')
    5  :             Get(TK.IDNT, 'trades')
    6  :             FnCall('select')
    7  :                 Ref(TK.IDNT, 'select')
    8  :                 List(TK.TUPLE, [Str(), Str(), Str(), Str(), Str()])
    9  :                     Str(TK.STR, symbol)
   10  :                     Str(TK.STR, buy_date)
   11  :                     Str(TK.STR, buy_price)
   12  :                     Str(TK.STR, sell_date)
   13  :                     Str(TK.STR, sell_price)

tree8:  rules: {
    1  : Define(TK.DEFINE, TK.COLN, ':')
    2  :     Ref(TK.IDNT, 'rules')
    3  :     Block(TK.BLOCK, v=[Define(), Define()], '')
    4  :         Define(TK.DEFINE, TK.EQLS, '=')
    5  :             Ref(TK.IDNT, 'baseline')
    6  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
    7  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    8  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    9  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   10  :                             Define(TK.DEFINE, TK.COLN, ':')
   11  :                                 Ref(TK.BUY, 'buy')
   12  :                                 UnaryOp(TK.ANY, TK.ANY, 'any:')
   13  :                                     Define(TK.DEFINE, TK.COLN, ':')
   14  :                                         Block(TK.BLOCK, v=[Flow(), Flow(), Flow()], '')
   15  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   16  :                                                 BinOp(TK.GTR, '>')
   17  :                                                     Ref(TK.IDNT, 'close')
   18  :                                                 FnCall('sma')
   19  :                                                     Ref(TK.IDNT, 'sma')
   20  :                                                     List(TK.TUPLE, [Int()])
   21  :                                                         Int(TK.INT, 10)
   22  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   23  :                                                 BinOp(TK.GTR, '>')
   24  :                                                     Ref(TK.IDNT, 'close')
   25  :                                                 FnCall('sma')
   26  :                                                     Ref(TK.IDNT, 'sma')
   27  :                                                     List(TK.TUPLE, [Int()])
   28  :                                                         Int(TK.INT, 20)
   29  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   30  :                                                 BinOp(TK.GTR, '>')
   31  :                                                     FnCall('sma')
   32  :                                                         Ref(TK.IDNT, 'sma')
   33  :                                                         List(TK.TUPLE, [Int()])
   34  :                                                             Int(TK.INT, 10)
   35  :                                                 FnCall('sma')
   36  :                                                     Ref(TK.IDNT, 'sma')
   37  :                                                     List(TK.TUPLE, [Int()])
   38  :                                                         Int(TK.INT, 20)
   39  :                                         Define(TK.DEFINE, TK.EQLS, '=')
   40  :                                             Ref(TK.IDNT, 'threshold')
   41  :                                             Float(TK.FLOT, 0.01)
   42  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   43  :                                 Ref(TK.IDNT, 'signal')
   44  :                         FnCall('delay')
   45  :                             Ref(TK.IDNT, 'delay')
   46  :                             List(TK.TUPLE, [Duration()])
   47  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   48  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                         Ref(TK.IDNT, 'atr')
   50  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   51  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   52  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   53  :                             Define(TK.DEFINE, TK.COLN, ':')
   54  :                                 Ref(TK.SELL, 'sell')
   55  :                                 BinOp(TK.FALL_BELOW, '<|')
   56  :                                     Get(TK.IDNT, 'close')
   57  :                                     FnCall('sma')
   58  :                                         Get(TK.IDNT, 'sma')
   59  :                                         List(TK.TUPLE, [Int()])
   60  :                                             Int(TK.INT, 10)
   61  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   62  :                                 Ref(TK.IDNT, 'signal')
   63  :                         FnCall('delay')
   64  :                             Ref(TK.IDNT, 'delay')
   65  :                             List(TK.TUPLE, [Duration()])
   66  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   67  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   68  :                         Ref(TK.IDNT, 'atr')
   69  :         Define(TK.DEFINE, TK.EQLS, '=')
   70  :             Ref(TK.IDNT, 'scenario')
   71  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   72  :                 Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
   73  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   74  :                         Define(TK.DEFINE, TK.COLN, ':')
   75  :                             Ref(TK.BUY, 'buy')
   76  :                             Block(TK.BLOCK, v=[Flow()], '')
   77  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   78  :                                     BinOp(TK.GTR, '>')
   79  :                                         Get(TK.IDNT, 'close')
   80  :                                     FnCall('sma')
   81  :                                         Ref(TK.IDNT, 'sma')
   82  :                                         List(TK.TUPLE, [Ref()])
   83  :                                             Ref(TK.IDNT, 'sma_period')
   84  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   85  :                             Ref(TK.IDNT, 'signal')
   86  :                     PropRef(TK.REF, '.')
   87  :                         Ref(TK.IDNT, 'atr')
   88  :                         FnCall('delay')
   89  :                             Ref(TK.IDNT, 'delay')
   90  :                             List(TK.TUPLE, [Duration()])
   91  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   92  :                 Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
   93  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   94  :                         Define(TK.DEFINE, TK.COLN, ':')
   95  :                             Ref(TK.SELL, 'sell')
   96  :                             BinOp(TK.FALL_BELOW, '<|')
   97  :                                 Get(TK.IDNT, 'close')
   98  :                                 FnCall('sma')
   99  :                                     Get(TK.IDNT, 'sma')
  100  :                                     List(TK.TUPLE, [Get()])
  101  :                                         Get(TK.IDNT, 'sma_period')
  102  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  103  :                             Ref(TK.IDNT, 'signal')
  104  :                     PropRef(TK.REF, '.')
  105  :                         Ref(TK.IDNT, 'atr')
  106  :                         FnCall('delay')
  107  :                             Ref(TK.IDNT, 'delay')
  108  :                             List(TK.TUPLE, [Duration()])
  109  :                                 Duration(TK.DUR, 1 day, 0:00:00)

tree1:(post)  periods = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'periods')
    3  :     Block(TK.BLOCK, v=[Define()], '')
    4  :         Define(TK.DEFINE, TK.COLN, ':')
    5  :             Ref(TK.IDNT, 'train')
    6  :             BinOp(TK.RANGE, '..')
    7  :                 BinOp(TK.SUB, '-')
    8  :                     Get(TK.IDNT, 'today')
    9  :                     Duration(TK.DUR, 730 days, 0:00:00)
   10  :                 Get(TK.IDNT, 'today')

tree2:(post)  sma_period = [3,5,10..20,28]
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'sma_period')
    3  :     List(TK.LIST, [Int(), Int(), Literal(), Int()])
    4  :         Int(TK.INT, 3)
    5  :         Int(TK.INT, 5)
    6  :         Literal(TK.NONE, None)
    7  :         Int(TK.INT, 28)

tree3:(post)  atr := (high + low) / 2
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'atr')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDNT, 'high')
    6  :             Get(TK.IDNT, 'low')
    7  :         Int(TK.INT, 2)

tree4:(post)  median_price := (open + close) / 2
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'median_price')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDNT, 'open')
    6  :             Get(TK.IDNT, 'close')
    7  :         Int(TK.INT, 2)

tree5:(post)  price10a := price.delay(1d)[10:00]
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'price10a')
    3  :     PropRef(TK.REF, '.')
    4  :         Get(TK.IDNT, 'price')
    5  :         FnCall('delay')
    6  :             Get(TK.IDNT, 'delay')
    7  :             List(TK.TUPLE, [Duration()])
    8  :                 Duration(TK.DUR, 1 day, 0:00:00)

tree6:(post)  price10a := price.delay(1d)[10:00]
result: list([Time()])
    1  : List(TK.LIST, [Time()])
    2  :     Time(TK.TIME, 10:00:00)

tree7:(post)  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'report')
    3  :     Block(TK.BLOCK, v=[Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Get(), FnCall()], '|')
    5  :             Get(TK.IDNT, 'trades')
    6  :             FnCall('select')
    7  :                 Ref(TK.IDNT, 'select')
    8  :                 List(TK.TUPLE, [Str(), Str(), Str(), Str(), Str()])
    9  :                     Str(TK.STR, symbol)
   10  :                     Str(TK.STR, buy_date)
   11  :                     Str(TK.STR, buy_price)
   12  :                     Str(TK.STR, sell_date)
   13  :                     Str(TK.STR, sell_price)

tree8:(post)  rules: {
    1  : Define(TK.DEFINE, TK.COLN, ':')
    2  :     Ref(TK.IDNT, 'rules')
    3  :     Block(TK.BLOCK, v=[Define(), Define()], '')
    4  :         Define(TK.DEFINE, TK.EQLS, '=')
    5  :             Ref(TK.IDNT, 'baseline')
    6  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
    7  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    8  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    9  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   10  :                             Define(TK.DEFINE, TK.COLN, ':')
   11  :                                 Ref(TK.BUY, 'buy')
   12  :                                 UnaryOp(TK.ANY, TK.ANY, 'any:')
   13  :                                     Define(TK.DEFINE, TK.COLN, ':')
   14  :                                         Block(TK.BLOCK, v=[Flow(), Flow(), Flow()], '')
   15  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   16  :                                                 BinOp(TK.GTR, '>')
   17  :                                                     Ref(TK.IDNT, 'close')
   18  :                                                 FnCall('sma')
   19  :                                                     Ref(TK.IDNT, 'sma')
   20  :                                                     List(TK.TUPLE, [Int()])
   21  :                                                         Int(TK.INT, 10)
   22  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   23  :                                                 BinOp(TK.GTR, '>')
   24  :                                                     Ref(TK.IDNT, 'close')
   25  :                                                 FnCall('sma')
   26  :                                                     Ref(TK.IDNT, 'sma')
   27  :                                                     List(TK.TUPLE, [Int()])
   28  :                                                         Int(TK.INT, 20)
   29  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   30  :                                                 BinOp(TK.GTR, '>')
   31  :                                                     FnCall('sma')
   32  :                                                         Ref(TK.IDNT, 'sma')
   33  :                                                         List(TK.TUPLE, [Int()])
   34  :                                                             Int(TK.INT, 10)
   35  :                                                 FnCall('sma')
   36  :                                                     Ref(TK.IDNT, 'sma')
   37  :                                                     List(TK.TUPLE, [Int()])
   38  :                                                         Int(TK.INT, 20)
   39  :                                         Define(TK.DEFINE, TK.EQLS, '=')
   40  :                                             Ref(TK.IDNT, 'threshold')
   41  :                                             Float(TK.FLOT, 0.01)
   42  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   43  :                                 Ref(TK.IDNT, 'signal')
   44  :                         FnCall('delay')
   45  :                             Ref(TK.IDNT, 'delay')
   46  :                             List(TK.TUPLE, [Duration()])
   47  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   48  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                         Ref(TK.IDNT, 'atr')
   50  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   51  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   52  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   53  :                             Define(TK.DEFINE, TK.COLN, ':')
   54  :                                 Ref(TK.SELL, 'sell')
   55  :                                 BinOp(TK.FALL_BELOW, '<|')
   56  :                                     Get(TK.IDNT, 'close')
   57  :                                     FnCall('sma')
   58  :                                         Get(TK.IDNT, 'sma')
   59  :                                         List(TK.TUPLE, [Int()])
   60  :                                             Int(TK.INT, 10)
   61  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   62  :                                 Ref(TK.IDNT, 'signal')
   63  :                         FnCall('delay')
   64  :                             Ref(TK.IDNT, 'delay')
   65  :                             List(TK.TUPLE, [Duration()])
   66  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   67  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   68  :                         Ref(TK.IDNT, 'atr')
   69  :         Define(TK.DEFINE, TK.EQLS, '=')
   70  :             Ref(TK.IDNT, 'scenario')
   71  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   72  :                 Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
   73  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   74  :                         Define(TK.DEFINE, TK.COLN, ':')
   75  :                             Ref(TK.BUY, 'buy')
   76  :                             Block(TK.BLOCK, v=[Flow()], '')
   77  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   78  :                                     BinOp(TK.GTR, '>')
   79  :                                         Get(TK.IDNT, 'close')
   80  :                                     FnCall('sma')
   81  :                                         Ref(TK.IDNT, 'sma')
   82  :                                         List(TK.TUPLE, [Ref()])
   83  :                                             Ref(TK.IDNT, 'sma_period')
   84  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   85  :                             Ref(TK.IDNT, 'signal')
   86  :                     PropRef(TK.REF, '.')
   87  :                         Ref(TK.IDNT, 'atr')
   88  :                         FnCall('delay')
   89  :                             Ref(TK.IDNT, 'delay')
   90  :                             List(TK.TUPLE, [Duration()])
   91  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   92  :                 Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
   93  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   94  :                         Define(TK.DEFINE, TK.COLN, ':')
   95  :                             Ref(TK.SELL, 'sell')
   96  :                             BinOp(TK.FALL_BELOW, '<|')
   97  :                                 Get(TK.IDNT, 'close')
   98  :                                 FnCall('sma')
   99  :                                     Get(TK.IDNT, 'sma')
  100  :                                     List(TK.TUPLE, [Get()])
  101  :                                         Get(TK.IDNT, 'sma_period')
  102  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  103  :                             Ref(TK.IDNT, 'signal')
  104  :                     PropRef(TK.REF, '.')
  105  :                         Ref(TK.IDNT, 'atr')
  106  :                         FnCall('delay')
  107  :                             Ref(TK.IDNT, 'delay')
  108  :                             List(TK.TUPLE, [Duration()])
  109  :                                 Duration(TK.DUR, 1 day, 0:00:00)

tree1:  %%yahoo (file='spq500.csv', 2y)
    1  : Command(TK.IDNT, TK.IDNT, '%%yahoo')
    2  :     List(TK.TUPLE, [Define(), Duration()])
    3  :         Define(TK.DEFINE, TK.EQLS, '=')
    4  :             Ref(TK.IDNT, 'file')
    5  :             Str(TK.STR, spq500.csv)
    6  :         Duration(TK.DUR, 730 days, 0:00:00)

tree2:  %%backtest (rules, period='train')
    1  : Command(TK.IDNT, TK.IDNT, '%%backtest')
    2  :     List(TK.TUPLE, [Get(), Define()])
    3  :         Get(TK.IDNT, 'rules')
    4  :         Define(TK.DEFINE, TK.EQLS, '=')
    5  :             Ref(TK.IDNT, 'period')
    6  :             Str(TK.STR, train)

tree3:  %%report { report >> rules }
    1  : Command(TK.IDNT, TK.IDNT, '%%report')
    2  :     Block(TK.BLOCK, v=[Flow()], '')
    3  :         Flow(TK.APPLY, v=[Get(), ApplyChainProd()], '>>')
    4  :             Get(TK.IDNT, 'report')
    5  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '>>')
    6  :                 Ref(TK.IDNT, 'rules')
