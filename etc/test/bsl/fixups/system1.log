

test: "# sample rules file for pyser / qtradr

%%yahoo (file='spq500.csv', 2y)
%%backtest (rules, period='train')
%%report { report >> rules }

#
periods = {
    'train': today-2y..today
}
sma_period = [3,5,10..20,28]

# productions: new datasets
atr = (high + low) / 2
median_price = (open + close) / 2
price10a = price.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }


rules: {
    baseline = {
        any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
        close <| sma(10) | signal >> delay(1d) | atr -> sell
    },
    scenario1 = {
        { close >| sma(20) } | signal >> atr.delay(1d) => buy,
        close <| sma(10) | signal >> atr.delay(1d) => sell
    },
    scenario2 = {
        { close >| sma(10) }:(threshold=0.01) | signal >> atr.delay(1d) => buy,
        close <| sma(10) | signal >> atr.delay(1d) => sell
    },
    scenario3 = {
        { sma(10) >| sma(20) } | signal >> atr.delay(1d) => buy,
        close <| sma(10) | signal >> atr.delay(1d) => sell
    },
    {
        { close >| sma(sma_period) } | signal >> atr.delay(1d) => buy,
        close <| sma(sma_period) | signal >> atr.delay(1d) => sell
    }
}
"

tree1:  periods = {
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'periods', V=periods)
    3 :     Set TK.SET(SET, '{', V=[BinOp()])
    4 :         BinOp TK.TUPLE(BINOP, ':', V=None)
    5 :             Str TK.STR(LITERAL, 'train', V=train)
    6 :             BinOp TK.SUB(BINOP, '-', V=None)
    7 :                 Ident TK.TODAY(KEYWORD, 'today', V=today)
    8 :                 BinOp TK.RANGE(BINOP, '..', V=None)
    9 :                     Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)
   10 :                     Ident TK.TODAY(KEYWORD, 'today', V=today)

tree2:  sma_period = [3,5,10..20,28]
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'sma_period', V=sma_period)
    3 :     List TK.LIST(LIST, '[', V=[Int(), Int(), BinOp(), Int()])
    4 :         Int TK.INT(LITERAL, '3', V=3)
    5 :         Int TK.INT(LITERAL, '5', V=5)
    6 :         BinOp TK.RANGE(BINOP, '.', V=None)
    7 :             Float TK.FLOT(LITERAL, '10.', V=10.0)
    8 :             Int TK.INT(LITERAL, '20', V=20)
    9 :         Int TK.INT(LITERAL, '28', V=28)

tree3:  atr = (high + low) / 2
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'high', V=high)
    6 :             Ident TK.IDNT(DATASET, 'low', V=low)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree4:  median_price = (open + close) / 2
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'median_price', V=median_price)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'open', V=open)
    6 :             Ident TK.IDNT(DATASET, 'close', V=close)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree5:  price10a = price.delay(1d)[10:00]
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'price10a', V=price10a)
    3 :     PropRef TK.REF(BINOP, '.', V=None)
    4 :         Ident TK.IDNT(IDENTIFIER, 'price', V=price)
    5 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
    7 :             List TK.TUPLE(LIST, '(', V=[Duration()])
    8 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)

tree6:  price10a = price.delay(1d)[10:00]
result: time(10:00:00)
    1 : List TK.LIST(LIST, '[', V=[Time()])
    2 :     Time TK.TIME(LITERAL, '10:00', V=10:00:00)

tree7:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    3 :     Set TK.SET(SET, '{', V=[List()])
    4 :         List TK.CHAIN(LIST, '|', V=[Ident(), FnCall()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'trades', V=trades)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ident TK.IDNT(KEYWORD, 'select', V=select)
    8 :                 List TK.TUPLE(LIST, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree8:  rules: {
result: None
    1 : BinOp TK.TUPLE(BINOP, ':', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    3 :     Set TK.SET(SET, '{', V=[BinOp(), BinOp(), BinOp(), BinOp(), Set()])
    4 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
    5 :             Ident TK.IDNT(IDENTIFIER, 'baseline', V=baseline)
    6 :             Set TK.SET(SET, '{', V=[List(), List()])
    7 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
    8 :                     List TK.CHAIN(LIST, '|', V=[List(), Ident()])
    9 :                         List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   10 :                             List TK.CHAIN(LIST, '|', V=[UnaryOp(), Ident()])
   11 :                                 UnaryOp TK.ANY(UNARY, 'any:', V=None)
   12 :                                     BinOp TK.TUPLE(BINOP, ':', V=None)
   13 :                                         Set TK.SET(SET, '{', V=[BinOp(), BinOp(), BinOp()])
   14 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   15 :                                                 Ident TK.IDNT(DATASET, 'close', V=close)
   16 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   17 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   18 :                                                     List TK.TUPLE(LIST, '(', V=[Int()])
   19 :                                                         Int TK.INT(LITERAL, '10', V=10)
   20 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   21 :                                                 Ident TK.IDNT(DATASET, 'close', V=close)
   22 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   23 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   24 :                                                     List TK.TUPLE(LIST, '(', V=[Int()])
   25 :                                                         Int TK.INT(LITERAL, '20', V=20)
   26 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   27 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   28 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   29 :                                                     List TK.TUPLE(LIST, '(', V=[Int()])
   30 :                                                         Int TK.INT(LITERAL, '10', V=10)
   31 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   32 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   33 :                                                     List TK.TUPLE(LIST, '(', V=[Int()])
   34 :                                                         Int TK.INT(LITERAL, '20', V=20)
   35 :                                         BinOp TK.ASSIGN(BINOP, '=', V=None)
   36 :                                             Ident TK.IDNT(IDENTIFIER, 'threshold', V=threshold)
   37 :                                             Float TK.FLOT(LITERAL, '0.01', V=0.01)
   38 :                                 Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   39 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   40 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   41 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
   42 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   43 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   44 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
   45 :                 List TK.RAISE(LIST, '->', V=[List(), Ident()])
   46 :                     List TK.CHAIN(LIST, '|', V=[List(), Ident()])
   47 :                         List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   48 :                             List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
   49 :                                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   50 :                                     Ident TK.IDNT(DATASET, 'close', V=close)
   51 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   52 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   53 :                                         List TK.TUPLE(LIST, '(', V=[Int()])
   54 :                                             Int TK.INT(LITERAL, '10', V=10)
   55 :                                 Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   56 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   57 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   58 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
   59 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   60 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   61 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
   62 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
   63 :             Ident TK.IDNT(IDENTIFIER, 'scenario1', V=scenario1)
   64 :             Set TK.SET(SET, '{', V=[List(), List()])
   65 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
   66 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
   67 :                         List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
   68 :                             Set TK.SET(SET, '{', V=[BinOp()])
   69 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   70 :                                     Ident TK.IDNT(DATASET, 'close', V=close)
   71 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   72 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   73 :                                         List TK.TUPLE(LIST, '(', V=[Int()])
   74 :                                             Int TK.INT(LITERAL, '20', V=20)
   75 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   76 :                         PropRef TK.REF(BINOP, '.', V=None)
   77 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   78 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   79 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   80 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
   81 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   82 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
   83 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
   84 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
   85 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
   86 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   87 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
   88 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   89 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   90 :                                     List TK.TUPLE(LIST, '(', V=[Int()])
   91 :                                         Int TK.INT(LITERAL, '10', V=10)
   92 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   93 :                         PropRef TK.REF(BINOP, '.', V=None)
   94 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   95 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   96 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   97 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
   98 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   99 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  100 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
  101 :             Ident TK.IDNT(IDENTIFIER, 'scenario2', V=scenario2)
  102 :             Set TK.SET(SET, '{', V=[List(), List()])
  103 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  104 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  105 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  106 :                             BinOp TK.TUPLE(BINOP, ':', V=None)
  107 :                                 Set TK.SET(SET, '{', V=[BinOp()])
  108 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  109 :                                         Ident TK.IDNT(DATASET, 'close', V=close)
  110 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  111 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  112 :                                             List TK.TUPLE(LIST, '(', V=[Int()])
  113 :                                                 Int TK.INT(LITERAL, '10', V=10)
  114 :                                 BinOp TK.ASSIGN(BINOP, '=', V=None)
  115 :                                     Ident TK.IDNT(IDENTIFIER, 'threshold', V=threshold)
  116 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
  117 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  118 :                         PropRef TK.REF(BINOP, '.', V=None)
  119 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  120 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  121 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  122 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
  123 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  124 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
  125 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  126 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  127 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  128 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  129 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  130 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  131 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  132 :                                     List TK.TUPLE(LIST, '(', V=[Int()])
  133 :                                         Int TK.INT(LITERAL, '10', V=10)
  134 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  135 :                         PropRef TK.REF(BINOP, '.', V=None)
  136 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  137 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  138 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  139 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
  140 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  141 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  142 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
  143 :             Ident TK.IDNT(IDENTIFIER, 'scenario3', V=scenario3)
  144 :             Set TK.SET(SET, '{', V=[List(), List()])
  145 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  146 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  147 :                         List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
  148 :                             Set TK.SET(SET, '{', V=[BinOp()])
  149 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  150 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
  151 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  152 :                                         List TK.TUPLE(LIST, '(', V=[Int()])
  153 :                                             Int TK.INT(LITERAL, '10', V=10)
  154 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
  155 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  156 :                                         List TK.TUPLE(LIST, '(', V=[Int()])
  157 :                                             Int TK.INT(LITERAL, '20', V=20)
  158 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  159 :                         PropRef TK.REF(BINOP, '.', V=None)
  160 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  161 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  162 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  163 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
  164 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  165 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
  166 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  167 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  168 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  169 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  170 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  171 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  172 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  173 :                                     List TK.TUPLE(LIST, '(', V=[Int()])
  174 :                                         Int TK.INT(LITERAL, '10', V=10)
  175 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  176 :                         PropRef TK.REF(BINOP, '.', V=None)
  177 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  178 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  179 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  180 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
  181 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  182 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  183 :         Set TK.SET(SET, '{', V=[List(), List()])
  184 :             List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  185 :                 List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  186 :                     List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
  187 :                         Set TK.SET(SET, '{', V=[BinOp()])
  188 :                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  189 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  190 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  191 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  192 :                                     List TK.TUPLE(LIST, '(', V=[Ident()])
  193 :                                         Ident TK.IDNT(IDENTIFIER, 'sma_period', V=sma_period)
  194 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  195 :                     PropRef TK.REF(BINOP, '.', V=None)
  196 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  197 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  198 :                             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  199 :                             List TK.TUPLE(LIST, '(', V=[Duration()])
  200 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  201 :                 Ident TK.BUY(KEYWORD, 'buy', V=buy)
  202 :             List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  203 :                 List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  204 :                     List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  205 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  206 :                             Ident TK.IDNT(DATASET, 'close', V=close)
  207 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  208 :                                 Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  209 :                                 List TK.TUPLE(LIST, '(', V=[Ident()])
  210 :                                     Ident TK.IDNT(IDENTIFIER, 'sma_period', V=sma_period)
  211 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  212 :                     PropRef TK.REF(BINOP, '.', V=None)
  213 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  214 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  215 :                             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  216 :                             List TK.TUPLE(LIST, '(', V=[Duration()])
  217 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  218 :                 Ident TK.SELL(KEYWORD, 'sell', V=sell)

tree1:  %%yahoo (file='spq500.csv', 2y)
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'yahoo', V=yahoo)
    4 :         List TK.TUPLE(LIST, '(', V=[BinOp(), Duration()])
    5 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'file', V=file)
    7 :                 Str TK.STR(LITERAL, 'spq500.csv', V=spq500.csv)
    8 :             Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)

tree2:  %%backtest (rules, period='train')
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'backtest', V=backtest)
    4 :         List TK.TUPLE(LIST, '(', V=[Ident(), BinOp()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    6 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    7 :                 Ident TK.IDNT(IDENTIFIER, 'period', V=period)
    8 :                 Str TK.STR(LITERAL, 'train', V=train)

tree3:  %%report { report >> rules }
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=report)

tree4:  %%report { report >> rules }
    1 : Command TK.SET(UNARY, '{', V=[List()])
    2 :     Set TK.SET(UNARY, '{', V=[List()])
    3 :         List TK.APPLY(LIST, '>>', V=[Ident(), Ident()])
    4 :             Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    5 :             Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)

tree1:(post)  periods = {
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'periods', V=periods)
    3 :     Set TK.SET(SET, '{', V=[BinOp()])
    4 :         BinOp TK.TUPLE(BINOP, ':', V=None)
    5 :             Str TK.STR(LITERAL, 'train', V=train)
    6 :             BinOp TK.SUB(BINOP, '-', V=None)
    7 :                 Ident TK.TODAY(KEYWORD, 'today', V=today)
    8 :                 BinOp TK.RANGE(BINOP, '..', V=None)
    9 :                     Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)
   10 :                     Ident TK.TODAY(KEYWORD, 'today', V=today)

tree2:(post)  sma_period = [3,5,10..20,28]
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'sma_period', V=sma_period)
    3 :     List TK.LIST(LIST, '[', V=[Int(), Int(), BinOp(), Int()])
    4 :         Int TK.INT(LITERAL, '3', V=3)
    5 :         Int TK.INT(LITERAL, '5', V=5)
    6 :         BinOp TK.RANGE(BINOP, '.', V=None)
    7 :             Float TK.FLOT(LITERAL, '10.', V=10.0)
    8 :             Int TK.INT(LITERAL, '20', V=20)
    9 :         Int TK.INT(LITERAL, '28', V=28)

tree3:(post)  atr = (high + low) / 2
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'high', V=high)
    6 :             Ident TK.IDNT(DATASET, 'low', V=low)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree4:(post)  median_price = (open + close) / 2
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'median_price', V=median_price)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'open', V=open)
    6 :             Ident TK.IDNT(DATASET, 'close', V=close)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree5:(post)  price10a = price.delay(1d)[10:00]
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'price10a', V=price10a)
    3 :     PropRef TK.REF(BINOP, '.', V=None)
    4 :         Ident TK.IDNT(IDENTIFIER, 'price', V=price)
    5 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
    7 :             List TK.TUPLE(LIST, '(', V=[Duration()])
    8 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)

tree6:(post)  price10a = price.delay(1d)[10:00]
result: time(10:00:00)
    1 : List TK.LIST(LIST, '[', V=[Time()])
    2 :     Time TK.TIME(LITERAL, '10:00', V=10:00:00)

tree7:(post)  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    3 :     Set TK.SET(SET, '{', V=[List()])
    4 :         List TK.CHAIN(LIST, '|', V=[Ident(), FnCall()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'trades', V=trades)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ident TK.IDNT(KEYWORD, 'select', V=select)
    8 :                 List TK.TUPLE(LIST, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree8:(post)  rules: {
result: None
    1 : BinOp TK.TUPLE(BINOP, ':', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    3 :     Set TK.SET(SET, '{', V=[BinOp(), BinOp(), BinOp(), BinOp(), Set()])
    4 :         BinOp TK.TUPLE(BINOP, '=', V=None)
    5 :             Ident TK.IDNT(IDENTIFIER, 'baseline', V=baseline)
    6 :             Set TK.SET(SET, '{', V=[List(), List()])
    7 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
    8 :                     List TK.CHAIN(LIST, '|', V=[List(), Ident()])
    9 :                         List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   10 :                             List TK.CHAIN(LIST, '|', V=[UnaryOp(), Ident()])
   11 :                                 UnaryOp TK.ANY(UNARY, 'any:', V=None)
   12 :                                     BinOp TK.TUPLE(BINOP, ':', V=None)
   13 :                                         Set TK.SET(SET, '{', V=[BinOp(), BinOp(), BinOp()])
   14 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   15 :                                                 Ident TK.IDNT(DATASET, 'close', V=close)
   16 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   17 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   18 :                                                     List TK.TUPLE(LIST, '(', V=[Int()])
   19 :                                                         Int TK.INT(LITERAL, '10', V=10)
   20 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   21 :                                                 Ident TK.IDNT(DATASET, 'close', V=close)
   22 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   23 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   24 :                                                     List TK.TUPLE(LIST, '(', V=[Int()])
   25 :                                                         Int TK.INT(LITERAL, '20', V=20)
   26 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   27 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   28 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   29 :                                                     List TK.TUPLE(LIST, '(', V=[Int()])
   30 :                                                         Int TK.INT(LITERAL, '10', V=10)
   31 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   32 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   33 :                                                     List TK.TUPLE(LIST, '(', V=[Int()])
   34 :                                                         Int TK.INT(LITERAL, '20', V=20)
   35 :                                         List TK.TUPLE(LIST, '(', V=[BinOp()])
   36 :                                             BinOp TK.TUPLE(BINOP, '=', V=None)
   37 :                                                 Ident TK.IDNT(IDENTIFIER, 'threshold', V=threshold)
   38 :                                                 Float TK.FLOT(LITERAL, '0.01', V=0.01)
   39 :                                 Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   40 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   41 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   42 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
   43 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   44 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   45 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
   46 :                 List TK.RAISE(LIST, '->', V=[List(), Ident()])
   47 :                     List TK.CHAIN(LIST, '|', V=[List(), Ident()])
   48 :                         List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   49 :                             List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
   50 :                                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   51 :                                     Ident TK.IDNT(DATASET, 'close', V=close)
   52 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   53 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   54 :                                         List TK.TUPLE(LIST, '(', V=[Int()])
   55 :                                             Int TK.INT(LITERAL, '10', V=10)
   56 :                                 Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   57 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   58 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   59 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
   60 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   61 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   62 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
   63 :         BinOp TK.TUPLE(BINOP, '=', V=None)
   64 :             Ident TK.IDNT(IDENTIFIER, 'scenario1', V=scenario1)
   65 :             Set TK.SET(SET, '{', V=[List(), List()])
   66 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
   67 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
   68 :                         List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
   69 :                             Set TK.SET(SET, '{', V=[BinOp()])
   70 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   71 :                                     Ident TK.IDNT(DATASET, 'close', V=close)
   72 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   73 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   74 :                                         List TK.TUPLE(LIST, '(', V=[Int()])
   75 :                                             Int TK.INT(LITERAL, '20', V=20)
   76 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   77 :                         PropRef TK.REF(BINOP, '.', V=None)
   78 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   79 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   80 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   81 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
   82 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   83 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
   84 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
   85 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
   86 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
   87 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   88 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
   89 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   90 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   91 :                                     List TK.TUPLE(LIST, '(', V=[Int()])
   92 :                                         Int TK.INT(LITERAL, '10', V=10)
   93 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   94 :                         PropRef TK.REF(BINOP, '.', V=None)
   95 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   96 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   97 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   98 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
   99 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  100 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  101 :         BinOp TK.TUPLE(BINOP, '=', V=None)
  102 :             Ident TK.IDNT(IDENTIFIER, 'scenario2', V=scenario2)
  103 :             Set TK.SET(SET, '{', V=[List(), List()])
  104 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  105 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  106 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  107 :                             BinOp TK.TUPLE(BINOP, ':', V=None)
  108 :                                 Set TK.SET(SET, '{', V=[BinOp()])
  109 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  110 :                                         Ident TK.IDNT(DATASET, 'close', V=close)
  111 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  112 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  113 :                                             List TK.TUPLE(LIST, '(', V=[Int()])
  114 :                                                 Int TK.INT(LITERAL, '10', V=10)
  115 :                                 List TK.TUPLE(LIST, '(', V=[BinOp()])
  116 :                                     BinOp TK.TUPLE(BINOP, '=', V=None)
  117 :                                         Ident TK.IDNT(IDENTIFIER, 'threshold', V=threshold)
  118 :                                         Float TK.FLOT(LITERAL, '0.01', V=0.01)
  119 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  120 :                         PropRef TK.REF(BINOP, '.', V=None)
  121 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  122 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  123 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  124 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
  125 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  126 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
  127 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  128 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  129 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  130 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  131 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  132 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  133 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  134 :                                     List TK.TUPLE(LIST, '(', V=[Int()])
  135 :                                         Int TK.INT(LITERAL, '10', V=10)
  136 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  137 :                         PropRef TK.REF(BINOP, '.', V=None)
  138 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  139 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  140 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  141 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
  142 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  143 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  144 :         BinOp TK.TUPLE(BINOP, '=', V=None)
  145 :             Ident TK.IDNT(IDENTIFIER, 'scenario3', V=scenario3)
  146 :             Set TK.SET(SET, '{', V=[List(), List()])
  147 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  148 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  149 :                         List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
  150 :                             Set TK.SET(SET, '{', V=[BinOp()])
  151 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  152 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
  153 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  154 :                                         List TK.TUPLE(LIST, '(', V=[Int()])
  155 :                                             Int TK.INT(LITERAL, '10', V=10)
  156 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
  157 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  158 :                                         List TK.TUPLE(LIST, '(', V=[Int()])
  159 :                                             Int TK.INT(LITERAL, '20', V=20)
  160 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  161 :                         PropRef TK.REF(BINOP, '.', V=None)
  162 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  163 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  164 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  165 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
  166 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  167 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
  168 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  169 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  170 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  171 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  172 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  173 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  174 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  175 :                                     List TK.TUPLE(LIST, '(', V=[Int()])
  176 :                                         Int TK.INT(LITERAL, '10', V=10)
  177 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  178 :                         PropRef TK.REF(BINOP, '.', V=None)
  179 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  180 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  181 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  182 :                                 List TK.TUPLE(LIST, '(', V=[Duration()])
  183 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  184 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  185 :         Set TK.SET(SET, '{', V=[List(), List()])
  186 :             List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  187 :                 List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  188 :                     List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
  189 :                         Set TK.SET(SET, '{', V=[BinOp()])
  190 :                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  191 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  192 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  193 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  194 :                                     List TK.TUPLE(LIST, '(', V=[Ident()])
  195 :                                         Ident TK.IDNT(IDENTIFIER, 'sma_period', V=sma_period)
  196 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  197 :                     PropRef TK.REF(BINOP, '.', V=None)
  198 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  199 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  200 :                             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  201 :                             List TK.TUPLE(LIST, '(', V=[Duration()])
  202 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  203 :                 Ident TK.BUY(KEYWORD, 'buy', V=buy)
  204 :             List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  205 :                 List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  206 :                     List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  207 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  208 :                             Ident TK.IDNT(DATASET, 'close', V=close)
  209 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  210 :                                 Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  211 :                                 List TK.TUPLE(LIST, '(', V=[Ident()])
  212 :                                     Ident TK.IDNT(IDENTIFIER, 'sma_period', V=sma_period)
  213 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  214 :                     PropRef TK.REF(BINOP, '.', V=None)
  215 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  216 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  217 :                             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  218 :                             List TK.TUPLE(LIST, '(', V=[Duration()])
  219 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  220 :                 Ident TK.SELL(KEYWORD, 'sell', V=sell)

tree1:  %%yahoo (file='spq500.csv', 2y)
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'yahoo', V=yahoo)
    4 :         List TK.TUPLE(LIST, '(', V=[BinOp(), Duration()])
    5 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'file', V=file)
    7 :                 Str TK.STR(LITERAL, 'spq500.csv', V=spq500.csv)
    8 :             Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)

tree2:  %%backtest (rules, period='train')
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'backtest', V=backtest)
    4 :         List TK.TUPLE(LIST, '(', V=[Ident(), BinOp()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    6 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    7 :                 Ident TK.IDNT(IDENTIFIER, 'period', V=period)
    8 :                 Str TK.STR(LITERAL, 'train', V=train)

tree3:  %%report { report >> rules }
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=report)

tree4:  %%report { report >> rules }
    1 : Command TK.SET(UNARY, '{', V=[List()])
    2 :     Set TK.SET(UNARY, '{', V=[List()])
    3 :         List TK.APPLY(LIST, '>>', V=[Ident(), Ident()])
    4 :             Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    5 :             Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
