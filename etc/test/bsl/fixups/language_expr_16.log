

test: 16:
"close >| sma(20) | signal | open.delay(1d) | buy; close <| sma(10) | signal | open.delay(1d) | sell"

tree1:  close >| sma(20) | signal | open.delay(1d) | buy; close <| sma(10) | signal | open.delay(1d) | sell
result: list([BinOp(), Get(), PropRef(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[BinOp(), Get(), PropRef(), ApplyChainProd()])
    2 :     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    3 :         Get TK.IDNT(IDENTIFIER, 'close', V=None)
    4 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    6 :             List TK.TUPLE(LITERAL, '(', V=[Int()])
    7 :                 Int TK.INT(LITERAL, '20', V=20)
    8 :     Get TK.SIGNAL(IDENTIFIER, 'signal', V=None)
    9 :     PropRef TK.REF(BINOP, '.', V=None)
   10 :         Get TK.IDNT(IDENTIFIER, 'open', V=None)
   11 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
   12 :             Get TK.IDNT(IDENTIFIER, 'delay', V=None)
   13 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   14 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   15 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   16 :         Ref TK.BUY(IDENTIFIER, 'buy', V=None)

tree2:  close >| sma(20) | signal | open.delay(1d) | buy; close <| sma(10) | signal | open.delay(1d) | sell
result: list([BinOp(), Get(), PropRef(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[BinOp(), Get(), PropRef(), ApplyChainProd()])
    2 :     BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
    3 :         Get TK.IDNT(IDENTIFIER, 'close', V=None)
    4 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    6 :             List TK.TUPLE(LITERAL, '(', V=[Int()])
    7 :                 Int TK.INT(LITERAL, '10', V=10)
    8 :     Get TK.SIGNAL(IDENTIFIER, 'signal', V=None)
    9 :     PropRef TK.REF(BINOP, '.', V=None)
   10 :         Get TK.IDNT(IDENTIFIER, 'open', V=None)
   11 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
   12 :             Get TK.IDNT(IDENTIFIER, 'delay', V=None)
   13 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   14 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   15 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   16 :         Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree1:(post)  close >| sma(20) | signal | open.delay(1d) | buy; close <| sma(10) | signal | open.delay(1d) | sell
result: list([BinOp(), Get(), PropRef(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[BinOp(), Get(), PropRef(), ApplyChainProd()])
    2 :     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    3 :         Get TK.IDNT(IDENTIFIER, 'close', V=None)
    4 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    6 :             List TK.TUPLE(LITERAL, '(', V=[Int()])
    7 :                 Int TK.INT(LITERAL, '20', V=20)
    8 :     Get TK.SIGNAL(IDENTIFIER, 'signal', V=None)
    9 :     PropRef TK.REF(BINOP, '.', V=None)
   10 :         Get TK.IDNT(IDENTIFIER, 'open', V=None)
   11 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
   12 :             Get TK.IDNT(IDENTIFIER, 'delay', V=None)
   13 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   14 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   15 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   16 :         Ref TK.BUY(IDENTIFIER, 'buy', V=None)

tree2:(post)  close >| sma(20) | signal | open.delay(1d) | buy; close <| sma(10) | signal | open.delay(1d) | sell
result: list([BinOp(), Get(), PropRef(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[BinOp(), Get(), PropRef(), ApplyChainProd()])
    2 :     BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
    3 :         Get TK.IDNT(IDENTIFIER, 'close', V=None)
    4 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    6 :             List TK.TUPLE(LITERAL, '(', V=[Int()])
    7 :                 Int TK.INT(LITERAL, '10', V=10)
    8 :     Get TK.SIGNAL(IDENTIFIER, 'signal', V=None)
    9 :     PropRef TK.REF(BINOP, '.', V=None)
   10 :         Get TK.IDNT(IDENTIFIER, 'open', V=None)
   11 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
   12 :             Get TK.IDNT(IDENTIFIER, 'delay', V=None)
   13 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   14 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   15 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   16 :         Ref TK.SELL(IDENTIFIER, 'sell', V=None)
