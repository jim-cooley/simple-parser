

test: 58:
{ _ => _.left = _.right}:(node)

tree1:  { _ => _.left = _.right}:(node)
    1  : Combine(TK.COMBINE:  None Get(TK.IDENT, 'node'))
    2  :     Block{TK.BLOCK, len=1}
    3  :         DefineFn(TK.PRODUCE: _ => PropRef(TK.REF, '.'))
    4  :             Ref(TK.ANON, '_')
    5  :             PropRef(TK.REF: _ . Ref(TK.IDENT, 'right'))
    6  :                 Ref(TK.ANON, '_')
    7  :                 Ref(TK.IDENT, 'right')
    8  :             List(TK.TUPLE, [PropRef()])
    9  :                 PropRef(TK.REF: _ . Ref(TK.IDENT, 'left'))
   10  :                     Ref(TK.ANON, '_')
   11  :                     Ref(TK.IDENT, 'left')
   12  :     Get(TK.IDENT, 'node')

tree1:(post)  { _ => _.left = _.right}:(node)
    1  : Combine(TK.COMBINE:  None Get(TK.IDENT, 'node'))
    2  :     Block{TK.BLOCK, len=1}
    3  :         DefineFn(TK.PRODUCE: _ => PropRef(TK.REF, '.'))
    4  :             Ref(TK.ANON, '_')
    5  :             PropRef(TK.REF: _ . Ref(TK.IDENT, 'right'))
    6  :                 Ref(TK.ANON, '_')
    7  :                 Ref(TK.IDENT, 'right')
    8  :             List(TK.TUPLE, [PropRef()])
    9  :                 PropRef(TK.REF: _ . Ref(TK.IDENT, 'left'))
   10  :                     Ref(TK.ANON, '_')
   11  :                     Ref(TK.IDENT, 'left')
   12  :     Get(TK.IDENT, 'node')
