

test:
# sample rules file for pyser / qtradr
%%backtest (period='train5', rules=rules)

atr := (high + low) / 2
median_price := (open + close) / 2
trade_size := position * 10%

def buy = { position += trade_size }
def sell = { position -= trade_size }

rules => {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules2 := {
    buy: any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
    sell: close <| sma(10) | signal >> delay(1d) | atr
}
rules3 := {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules4 = {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
def rules5 = {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

%%report (report)



tree1:  atr := (high + low) / 2
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'atr')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDENT, 'high')
    6  :             Get(TK.IDENT, 'low')
    7  :         Int(TK.INT, 2)

tree2:  median_price := (open + close) / 2
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'median_price')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDENT, 'open')
    6  :             Get(TK.IDENT, 'close')
    7  :         Int(TK.INT, 2)

tree3:  trade_size := position * 10%
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'trade_size')
    3  :     BinOp(TK.MUL, '*')
    4  :         Get(TK.IDENT, 'position')
    5  :         Percent(TK.PCT, 0.1)

tree4:  def buy = { position += trade_size }
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'buy')
    3  :     Block(TK.BLOCK, v=[Assign()], '')
    4  :         Assign(TK.ASSIGN, TK.ASSIGN, '+=')
    5  :             Ref(TK.IDENT, 'position')
    6  :             Ref(TK.IDENT, 'trade_size')

tree5:  def sell = { position -= trade_size }
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'sell')
    3  :     Block(TK.BLOCK, v=[Assign()], '')
    4  :         Assign(TK.ASSIGN, TK.ASSIGN, '-=')
    5  :             Ref(TK.IDENT, 'position')
    6  :             Ref(TK.IDENT, 'trade_size')

tree6:  rules => {
    1  : DefineFn(TK.DEFINE, TK.DEFINE, '=>')
    2  :     Ref(TK.IDENT, 'rules')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    6  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    7  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    8  :                         Define(TK.DEFINE, TK.DEFINE, ':')
    9  :                             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   10  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   11  :                                     BinOp(TK.GTR, '>')
   12  :                                         Ref(TK.IDENT, 'close')
   13  :                                     FnCall('sma')
   14  :                                         Ref(TK.IDENT, 'sma')
   15  :                                         List(TK.LIST, [Int()])
   16  :                                             Int(TK.INT, 10)
   17  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   18  :                                     BinOp(TK.GTR, '>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                     FnCall('sma')
   21  :                                         Ref(TK.IDENT, 'sma')
   22  :                                         List(TK.LIST, [Int()])
   23  :                                             Int(TK.INT, 20)
   24  :                             Define(TK.DEFINE, TK.DEFINE, '=')
   25  :                                 Ref(TK.IDENT, 'threshold')
   26  :                                 Float(TK.FLOT, 0.01)
   27  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   28  :                             Ref(TK.IDENT, 'signal')
   29  :                     FnCall('delay')
   30  :                         Ref(TK.IDENT, 'delay')
   31  :                         List(TK.LIST, [Duration()])
   32  :                             Duration(TK.DUR, 1 day, 0:00:00)
   33  :                 DefineFn(TK.DEFINE, TK.DEFINE, '=>')
   34  :                     Ref(TK.IDENT, 'atr')
   35  :                     Ref(TK.IDENT, 'buy')
   36  :         Flow(TK.RAISE, v=[Flow(), ApplyChainProd()], '->')
   37  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Get(TK.IDENT, 'close')
   42  :                             FnCall('sma')
   43  :                                 Get(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   47  :                             Ref(TK.IDENT, 'signal')
   48  :                     FnCall('delay')
   49  :                         Ref(TK.IDENT, 'delay')
   50  :                         List(TK.LIST, [Duration()])
   51  :                             Duration(TK.DUR, 1 day, 0:00:00)
   52  :                 ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   53  :                     Ref(TK.IDENT, 'atr')
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '->')
   55  :                 Ref(TK.IDENT, 'sell')

tree7:  rules2 := {
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'rules2')
    3  :     Block(TK.BLOCK, v=[Flow(), Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    5  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    6  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    7  :                     Define(TK.DEFINE, TK.DEFINE, ':')
    8  :                         Ref(TK.IDENT, 'buy')
    9  :                         UnaryOp(TK.ANY, TK.ANY, 'any:')
   10  :                             Define(TK.DEFINE, TK.DEFINE, ':')
   11  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   12  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   13  :                                         BinOp(TK.GTR, '>')
   14  :                                             Ref(TK.IDENT, 'close')
   15  :                                         FnCall('sma')
   16  :                                             Ref(TK.IDENT, 'sma')
   17  :                                             List(TK.LIST, [Int()])
   18  :                                                 Int(TK.INT, 10)
   19  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   20  :                                         BinOp(TK.GTR, '>')
   21  :                                             Ref(TK.IDENT, 'close')
   22  :                                         FnCall('sma')
   23  :                                             Ref(TK.IDENT, 'sma')
   24  :                                             List(TK.LIST, [Int()])
   25  :                                                 Int(TK.INT, 20)
   26  :                                 Define(TK.DEFINE, TK.DEFINE, '=')
   27  :                                     Ref(TK.IDENT, 'threshold')
   28  :                                     Float(TK.FLOT, 0.01)
   29  :                     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   30  :                         Ref(TK.IDENT, 'signal')
   31  :                 FnCall('delay')
   32  :                     Ref(TK.IDENT, 'delay')
   33  :                     List(TK.LIST, [Duration()])
   34  :                         Duration(TK.DUR, 1 day, 0:00:00)
   35  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   36  :                 Ref(TK.IDENT, 'atr')
   37  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   40  :                     Define(TK.DEFINE, TK.DEFINE, ':')
   41  :                         Ref(TK.IDENT, 'sell')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Get(TK.IDENT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Get(TK.IDENT, 'sma')
   46  :                                 List(TK.LIST, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   49  :                         Ref(TK.IDENT, 'signal')
   50  :                 FnCall('delay')
   51  :                     Ref(TK.IDENT, 'delay')
   52  :                     List(TK.LIST, [Duration()])
   53  :                         Duration(TK.DUR, 1 day, 0:00:00)
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   55  :                 Ref(TK.IDENT, 'atr')

tree8:  rules3 := {
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'rules3')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    6  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    7  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    8  :                         Define(TK.DEFINE, TK.DEFINE, ':')
    9  :                             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   10  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   11  :                                     BinOp(TK.GTR, '>')
   12  :                                         Ref(TK.IDENT, 'close')
   13  :                                     FnCall('sma')
   14  :                                         Ref(TK.IDENT, 'sma')
   15  :                                         List(TK.LIST, [Int()])
   16  :                                             Int(TK.INT, 10)
   17  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   18  :                                     BinOp(TK.GTR, '>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                     FnCall('sma')
   21  :                                         Ref(TK.IDENT, 'sma')
   22  :                                         List(TK.LIST, [Int()])
   23  :                                             Int(TK.INT, 20)
   24  :                             Define(TK.DEFINE, TK.DEFINE, '=')
   25  :                                 Ref(TK.IDENT, 'threshold')
   26  :                                 Float(TK.FLOT, 0.01)
   27  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   28  :                             Ref(TK.IDENT, 'signal')
   29  :                     FnCall('delay')
   30  :                         Ref(TK.IDENT, 'delay')
   31  :                         List(TK.LIST, [Duration()])
   32  :                             Duration(TK.DUR, 1 day, 0:00:00)
   33  :                 DefineFn(TK.DEFINE, TK.DEFINE, '=>')
   34  :                     Ref(TK.IDENT, 'atr')
   35  :                     Ref(TK.IDENT, 'buy')
   36  :         Flow(TK.RAISE, v=[Flow(), ApplyChainProd()], '->')
   37  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Get(TK.IDENT, 'close')
   42  :                             FnCall('sma')
   43  :                                 Get(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   47  :                             Ref(TK.IDENT, 'signal')
   48  :                     FnCall('delay')
   49  :                         Ref(TK.IDENT, 'delay')
   50  :                         List(TK.LIST, [Duration()])
   51  :                             Duration(TK.DUR, 1 day, 0:00:00)
   52  :                 ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   53  :                     Ref(TK.IDENT, 'atr')
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '->')
   55  :                 Ref(TK.IDENT, 'sell')

tree9:  rules4 = {
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'rules4')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    6  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    7  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    8  :                         Define(TK.DEFINE, TK.DEFINE, ':')
    9  :                             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   10  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   11  :                                     BinOp(TK.GTR, '>')
   12  :                                         Ref(TK.IDENT, 'close')
   13  :                                     FnCall('sma')
   14  :                                         Ref(TK.IDENT, 'sma')
   15  :                                         List(TK.LIST, [Int()])
   16  :                                             Int(TK.INT, 10)
   17  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   18  :                                     BinOp(TK.GTR, '>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                     FnCall('sma')
   21  :                                         Ref(TK.IDENT, 'sma')
   22  :                                         List(TK.LIST, [Int()])
   23  :                                             Int(TK.INT, 20)
   24  :                             Define(TK.DEFINE, TK.DEFINE, '=')
   25  :                                 Ref(TK.IDENT, 'threshold')
   26  :                                 Float(TK.FLOT, 0.01)
   27  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   28  :                             Ref(TK.IDENT, 'signal')
   29  :                     FnCall('delay')
   30  :                         Ref(TK.IDENT, 'delay')
   31  :                         List(TK.LIST, [Duration()])
   32  :                             Duration(TK.DUR, 1 day, 0:00:00)
   33  :                 DefineFn(TK.DEFINE, TK.DEFINE, '=>')
   34  :                     Ref(TK.IDENT, 'atr')
   35  :                     Ref(TK.IDENT, 'buy')
   36  :         Flow(TK.RAISE, v=[Flow(), ApplyChainProd()], '->')
   37  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Get(TK.IDENT, 'close')
   42  :                             FnCall('sma')
   43  :                                 Get(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   47  :                             Ref(TK.IDENT, 'signal')
   48  :                     FnCall('delay')
   49  :                         Ref(TK.IDENT, 'delay')
   50  :                         List(TK.LIST, [Duration()])
   51  :                             Duration(TK.DUR, 1 day, 0:00:00)
   52  :                 ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   53  :                     Ref(TK.IDENT, 'atr')
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '->')
   55  :                 Ref(TK.IDENT, 'sell')

tree10:  def rules5 = {
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'rules5')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    6  :                 Flow(TK.APPLY, v=[Flow(), FnRef()], '>>')
    7  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    8  :                         Define(TK.DEFINE, TK.DEFINE, ':')
    9  :                             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   10  :                                 Flow(TK.CHAIN, v=[BinOp(), FnRef()], '|')
   11  :                                     BinOp(TK.GTR, '>')
   12  :                                         Ref(TK.IDENT, 'close')
   13  :                                     FnRef(TK.FUNCTION, 'sma')
   14  :                                         Ref(TK.IDENT, 'sma')
   15  :                                         List(TK.LIST, [Int()])
   16  :                                             Int(TK.INT, 10)
   17  :                                 Flow(TK.CHAIN, v=[BinOp(), FnRef()], '|')
   18  :                                     BinOp(TK.GTR, '>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                     FnRef(TK.FUNCTION, 'sma')
   21  :                                         Ref(TK.IDENT, 'sma')
   22  :                                         List(TK.LIST, [Int()])
   23  :                                             Int(TK.INT, 20)
   24  :                             Define(TK.DEFINE, TK.DEFINE, '=')
   25  :                                 Ref(TK.IDENT, 'threshold')
   26  :                                 Float(TK.FLOT, 0.01)
   27  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   28  :                             Ref(TK.IDENT, 'signal')
   29  :                     FnRef(TK.FUNCTION, 'delay')
   30  :                         Ref(TK.IDENT, 'delay')
   31  :                         List(TK.LIST, [Duration()])
   32  :                             Duration(TK.DUR, 1 day, 0:00:00)
   33  :                 DefineFn(TK.DEFINE, TK.DEFINE, '=>')
   34  :                     Ref(TK.IDENT, 'atr')
   35  :                     Ref(TK.IDENT, 'buy')
   36  :         Flow(TK.RAISE, v=[Flow(), ApplyChainProd()], '->')
   37  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :                 Flow(TK.APPLY, v=[Flow(), FnRef()], '>>')
   39  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Ref(TK.IDENT, 'close')
   42  :                             FnRef(TK.FUNCTION, 'sma')
   43  :                                 Ref(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   47  :                             Ref(TK.IDENT, 'signal')
   48  :                     FnRef(TK.FUNCTION, 'delay')
   49  :                         Ref(TK.IDENT, 'delay')
   50  :                         List(TK.LIST, [Duration()])
   51  :                             Duration(TK.DUR, 1 day, 0:00:00)
   52  :                 ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   53  :                     Ref(TK.IDENT, 'atr')
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '->')
   55  :                 Ref(TK.IDENT, 'sell')

tree11:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'report')
    3  :     Block(TK.BLOCK, v=[Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Get(), FnCall()], '|')
    5  :             Get(TK.IDENT, 'trades')
    6  :             FnCall('select')
    7  :                 Ref(TK.IDENT, 'select')
    8  :                 List(TK.TUPLE, [Str(), Str(), Str(), Str(), Str()])
    9  :                     Str(TK.STR, symbol)
   10  :                     Str(TK.STR, buy_date)
   11  :                     Str(TK.STR, buy_price)
   12  :                     Str(TK.STR, sell_date)
   13  :                     Str(TK.STR, sell_price)

tree1:(post)  atr := (high + low) / 2
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'atr')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDENT, 'high')
    6  :             Get(TK.IDENT, 'low')
    7  :         Int(TK.INT, 2)

tree2:(post)  median_price := (open + close) / 2
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'median_price')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDENT, 'open')
    6  :             Get(TK.IDENT, 'close')
    7  :         Int(TK.INT, 2)

tree3:(post)  trade_size := position * 10%
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'trade_size')
    3  :     BinOp(TK.MUL, '*')
    4  :         Get(TK.IDENT, 'position')
    5  :         Percent(TK.PCT, 0.1)

tree4:(post)  def buy = { position += trade_size }
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'buy')
    3  :     Block(TK.BLOCK, v=[Assign()], '')
    4  :         Assign(TK.ASSIGN, TK.ASSIGN, '+=')
    5  :             Ref(TK.IDENT, 'position')
    6  :             Ref(TK.IDENT, 'trade_size')

tree5:(post)  def sell = { position -= trade_size }
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'sell')
    3  :     Block(TK.BLOCK, v=[Assign()], '')
    4  :         Assign(TK.ASSIGN, TK.ASSIGN, '-=')
    5  :             Ref(TK.IDENT, 'position')
    6  :             Ref(TK.IDENT, 'trade_size')

tree6:(post)  rules => {
    1  : DefineFn(TK.DEFINE, TK.DEFINE, '=>')
    2  :     Ref(TK.IDENT, 'rules')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    6  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    7  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    8  :                         Define(TK.DEFINE, TK.DEFINE, ':')
    9  :                             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   10  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   11  :                                     BinOp(TK.GTR, '>')
   12  :                                         Ref(TK.IDENT, 'close')
   13  :                                     FnCall('sma')
   14  :                                         Ref(TK.IDENT, 'sma')
   15  :                                         List(TK.LIST, [Int()])
   16  :                                             Int(TK.INT, 10)
   17  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   18  :                                     BinOp(TK.GTR, '>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                     FnCall('sma')
   21  :                                         Ref(TK.IDENT, 'sma')
   22  :                                         List(TK.LIST, [Int()])
   23  :                                             Int(TK.INT, 20)
   24  :                             Define(TK.DEFINE, TK.DEFINE, '=')
   25  :                                 Ref(TK.IDENT, 'threshold')
   26  :                                 Float(TK.FLOT, 0.01)
   27  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   28  :                             Ref(TK.IDENT, 'signal')
   29  :                     FnCall('delay')
   30  :                         Ref(TK.IDENT, 'delay')
   31  :                         List(TK.LIST, [Duration()])
   32  :                             Duration(TK.DUR, 1 day, 0:00:00)
   33  :                 DefineFn(TK.DEFINE, TK.DEFINE, '=>')
   34  :                     Ref(TK.IDENT, 'atr')
   35  :                     Ref(TK.IDENT, 'buy')
   36  :         Flow(TK.RAISE, v=[Flow(), ApplyChainProd()], '->')
   37  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Get(TK.IDENT, 'close')
   42  :                             FnCall('sma')
   43  :                                 Get(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   47  :                             Ref(TK.IDENT, 'signal')
   48  :                     FnCall('delay')
   49  :                         Ref(TK.IDENT, 'delay')
   50  :                         List(TK.LIST, [Duration()])
   51  :                             Duration(TK.DUR, 1 day, 0:00:00)
   52  :                 ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   53  :                     Ref(TK.IDENT, 'atr')
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '->')
   55  :                 Ref(TK.IDENT, 'sell')

tree7:(post)  rules2 := {
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'rules2')
    3  :     Block(TK.BLOCK, v=[Flow(), Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    5  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    6  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    7  :                     Define(TK.DEFINE, TK.DEFINE, ':')
    8  :                         Ref(TK.IDENT, 'buy')
    9  :                         UnaryOp(TK.ANY, TK.ANY, 'any:')
   10  :                             Define(TK.DEFINE, TK.DEFINE, ':')
   11  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   12  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   13  :                                         BinOp(TK.GTR, '>')
   14  :                                             Ref(TK.IDENT, 'close')
   15  :                                         FnCall('sma')
   16  :                                             Ref(TK.IDENT, 'sma')
   17  :                                             List(TK.LIST, [Int()])
   18  :                                                 Int(TK.INT, 10)
   19  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   20  :                                         BinOp(TK.GTR, '>')
   21  :                                             Ref(TK.IDENT, 'close')
   22  :                                         FnCall('sma')
   23  :                                             Ref(TK.IDENT, 'sma')
   24  :                                             List(TK.LIST, [Int()])
   25  :                                                 Int(TK.INT, 20)
   26  :                                 Define(TK.DEFINE, TK.DEFINE, '=')
   27  :                                     Ref(TK.IDENT, 'threshold')
   28  :                                     Float(TK.FLOT, 0.01)
   29  :                     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   30  :                         Ref(TK.IDENT, 'signal')
   31  :                 FnCall('delay')
   32  :                     Ref(TK.IDENT, 'delay')
   33  :                     List(TK.LIST, [Duration()])
   34  :                         Duration(TK.DUR, 1 day, 0:00:00)
   35  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   36  :                 Ref(TK.IDENT, 'atr')
   37  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   40  :                     Define(TK.DEFINE, TK.DEFINE, ':')
   41  :                         Ref(TK.IDENT, 'sell')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Get(TK.IDENT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Get(TK.IDENT, 'sma')
   46  :                                 List(TK.LIST, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   49  :                         Ref(TK.IDENT, 'signal')
   50  :                 FnCall('delay')
   51  :                     Ref(TK.IDENT, 'delay')
   52  :                     List(TK.LIST, [Duration()])
   53  :                         Duration(TK.DUR, 1 day, 0:00:00)
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   55  :                 Ref(TK.IDENT, 'atr')

tree8:(post)  rules3 := {
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'rules3')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    6  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    7  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    8  :                         Define(TK.DEFINE, TK.DEFINE, ':')
    9  :                             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   10  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   11  :                                     BinOp(TK.GTR, '>')
   12  :                                         Ref(TK.IDENT, 'close')
   13  :                                     FnCall('sma')
   14  :                                         Ref(TK.IDENT, 'sma')
   15  :                                         List(TK.LIST, [Int()])
   16  :                                             Int(TK.INT, 10)
   17  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   18  :                                     BinOp(TK.GTR, '>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                     FnCall('sma')
   21  :                                         Ref(TK.IDENT, 'sma')
   22  :                                         List(TK.LIST, [Int()])
   23  :                                             Int(TK.INT, 20)
   24  :                             Define(TK.DEFINE, TK.DEFINE, '=')
   25  :                                 Ref(TK.IDENT, 'threshold')
   26  :                                 Float(TK.FLOT, 0.01)
   27  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   28  :                             Ref(TK.IDENT, 'signal')
   29  :                     FnCall('delay')
   30  :                         Ref(TK.IDENT, 'delay')
   31  :                         List(TK.LIST, [Duration()])
   32  :                             Duration(TK.DUR, 1 day, 0:00:00)
   33  :                 DefineFn(TK.DEFINE, TK.DEFINE, '=>')
   34  :                     Ref(TK.IDENT, 'atr')
   35  :                     Ref(TK.IDENT, 'buy')
   36  :         Flow(TK.RAISE, v=[Flow(), ApplyChainProd()], '->')
   37  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Get(TK.IDENT, 'close')
   42  :                             FnCall('sma')
   43  :                                 Get(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   47  :                             Ref(TK.IDENT, 'signal')
   48  :                     FnCall('delay')
   49  :                         Ref(TK.IDENT, 'delay')
   50  :                         List(TK.LIST, [Duration()])
   51  :                             Duration(TK.DUR, 1 day, 0:00:00)
   52  :                 ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   53  :                     Ref(TK.IDENT, 'atr')
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '->')
   55  :                 Ref(TK.IDENT, 'sell')

tree9:(post)  rules4 = {
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'rules4')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    6  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    7  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    8  :                         Define(TK.DEFINE, TK.DEFINE, ':')
    9  :                             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   10  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   11  :                                     BinOp(TK.GTR, '>')
   12  :                                         Ref(TK.IDENT, 'close')
   13  :                                     FnCall('sma')
   14  :                                         Ref(TK.IDENT, 'sma')
   15  :                                         List(TK.LIST, [Int()])
   16  :                                             Int(TK.INT, 10)
   17  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   18  :                                     BinOp(TK.GTR, '>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                     FnCall('sma')
   21  :                                         Ref(TK.IDENT, 'sma')
   22  :                                         List(TK.LIST, [Int()])
   23  :                                             Int(TK.INT, 20)
   24  :                             Define(TK.DEFINE, TK.DEFINE, '=')
   25  :                                 Ref(TK.IDENT, 'threshold')
   26  :                                 Float(TK.FLOT, 0.01)
   27  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   28  :                             Ref(TK.IDENT, 'signal')
   29  :                     FnCall('delay')
   30  :                         Ref(TK.IDENT, 'delay')
   31  :                         List(TK.LIST, [Duration()])
   32  :                             Duration(TK.DUR, 1 day, 0:00:00)
   33  :                 DefineFn(TK.DEFINE, TK.DEFINE, '=>')
   34  :                     Ref(TK.IDENT, 'atr')
   35  :                     Ref(TK.IDENT, 'buy')
   36  :         Flow(TK.RAISE, v=[Flow(), ApplyChainProd()], '->')
   37  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Get(TK.IDENT, 'close')
   42  :                             FnCall('sma')
   43  :                                 Get(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   47  :                             Ref(TK.IDENT, 'signal')
   48  :                     FnCall('delay')
   49  :                         Ref(TK.IDENT, 'delay')
   50  :                         List(TK.LIST, [Duration()])
   51  :                             Duration(TK.DUR, 1 day, 0:00:00)
   52  :                 ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   53  :                     Ref(TK.IDENT, 'atr')
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '->')
   55  :                 Ref(TK.IDENT, 'sell')

tree10:(post)  def rules5 = {
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'rules5')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.CHAIN, v=[Flow(), DefineFn()], '|')
    6  :                 Flow(TK.APPLY, v=[Flow(), FnRef()], '>>')
    7  :                     Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    8  :                         Define(TK.DEFINE, TK.DEFINE, ':')
    9  :                             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   10  :                                 Flow(TK.CHAIN, v=[BinOp(), FnRef()], '|')
   11  :                                     BinOp(TK.GTR, '>')
   12  :                                         Ref(TK.IDENT, 'close')
   13  :                                     FnRef(TK.FUNCTION, 'sma')
   14  :                                         Ref(TK.IDENT, 'sma')
   15  :                                         List(TK.LIST, [Int()])
   16  :                                             Int(TK.INT, 10)
   17  :                                 Flow(TK.CHAIN, v=[BinOp(), FnRef()], '|')
   18  :                                     BinOp(TK.GTR, '>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                     FnRef(TK.FUNCTION, 'sma')
   21  :                                         Ref(TK.IDENT, 'sma')
   22  :                                         List(TK.LIST, [Int()])
   23  :                                             Int(TK.INT, 20)
   24  :                             Define(TK.DEFINE, TK.DEFINE, '=')
   25  :                                 Ref(TK.IDENT, 'threshold')
   26  :                                 Float(TK.FLOT, 0.01)
   27  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   28  :                             Ref(TK.IDENT, 'signal')
   29  :                     FnRef(TK.FUNCTION, 'delay')
   30  :                         Ref(TK.IDENT, 'delay')
   31  :                         List(TK.LIST, [Duration()])
   32  :                             Duration(TK.DUR, 1 day, 0:00:00)
   33  :                 DefineFn(TK.DEFINE, TK.DEFINE, '=>')
   34  :                     Ref(TK.IDENT, 'atr')
   35  :                     Ref(TK.IDENT, 'buy')
   36  :         Flow(TK.RAISE, v=[Flow(), ApplyChainProd()], '->')
   37  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :                 Flow(TK.APPLY, v=[Flow(), FnRef()], '>>')
   39  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Ref(TK.IDENT, 'close')
   42  :                             FnRef(TK.FUNCTION, 'sma')
   43  :                                 Ref(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   47  :                             Ref(TK.IDENT, 'signal')
   48  :                     FnRef(TK.FUNCTION, 'delay')
   49  :                         Ref(TK.IDENT, 'delay')
   50  :                         List(TK.LIST, [Duration()])
   51  :                             Duration(TK.DUR, 1 day, 0:00:00)
   52  :                 ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   53  :                     Ref(TK.IDENT, 'atr')
   54  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '->')
   55  :                 Ref(TK.IDENT, 'sell')

tree11:(post)  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'report')
    3  :     Block(TK.BLOCK, v=[Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Get(), FnCall()], '|')
    5  :             Get(TK.IDENT, 'trades')
    6  :             FnCall('select')
    7  :                 Ref(TK.IDENT, 'select')
    8  :                 List(TK.TUPLE, [Str(), Str(), Str(), Str(), Str()])
    9  :                     Str(TK.STR, symbol)
   10  :                     Str(TK.STR, buy_date)
   11  :                     Str(TK.STR, buy_price)
   12  :                     Str(TK.STR, sell_date)
   13  :                     Str(TK.STR, sell_price)

tree1:  %%backtest (period='train5', rules=rules)
    1  : Command(TK.IDENT, TK.IDENT, '%%backtest')
    2  :     List(TK.TUPLE, [Define(), Define()])
    3  :         Define(TK.DEFINE, TK.DEFINE, '=')
    4  :             Ref(TK.IDENT, 'period')
    5  :             Str(TK.STR, train5)
    6  :         Define(TK.DEFINE, TK.DEFINE, '=')
    7  :             Ref(TK.IDENT, 'rules')
    8  :             Get(TK.IDENT, 'rules')

tree2:  %%report (report)
    1  : Command(TK.IDENT, TK.IDENT, '%%report')
    2  :     Get(TK.IDENT, 'report')
