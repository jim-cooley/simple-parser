

test: "# sample rules file for pyser / qtradr
%%backtest (period='train5', rules=rules)

atr := (high + low) / 2
median_price := (open + close) / 2
trade_size := position * 10%

def buy = { position += trade_size }
def sell = { position -= trade_size }

rules => {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

%%report (report)

"

tree1:  atr := (high + low) / 2
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'high', V=high)
    6 :             Ident TK.IDNT(DATASET, 'low', V=low)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree2:  median_price := (open + close) / 2
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'median_price', V=median_price)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'open', V=open)
    6 :             Ident TK.IDNT(DATASET, 'close', V=close)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree3:  trade_size := position * 10%
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'trade_size', V=trade_size)
    3 :     BinOp TK.MUL(BINOP, '*', V=None)
    4 :         Ident TK.IDNT(IDENTIFIER, 'position', V=position)
    5 :         Percent TK.PCT(LITERAL, '10%', V=0.1)

tree4:  def buy = { position += trade_size }
result: None
    1 : UnaryOp TK.DEFATTR(UNARY, 'def', V=None)
    2 :     BinOp TK.ASSIGN(BINOP, '=', V=None)
    3 :         Ident TK.BUY(KEYWORD, 'buy', V=buy)
    4 :         Set TK.SET(SET, '{', V=[BinOp()])
    5 :             BinOp TK.PLEQ(BINOP, '+=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'position', V=position)
    7 :                 Ident TK.IDNT(IDENTIFIER, 'trade_size', V=trade_size)

tree5:  def sell = { position -= trade_size }
result: None
    1 : UnaryOp TK.DEFATTR(UNARY, 'def', V=None)
    2 :     BinOp TK.ASSIGN(BINOP, '=', V=None)
    3 :         Ident TK.SELL(KEYWORD, 'sell', V=sell)
    4 :         Set TK.SET(SET, '{', V=[BinOp()])
    5 :             BinOp TK.MNEQ(BINOP, '-=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'position', V=position)
    7 :                 Ident TK.IDNT(IDENTIFIER, 'trade_size', V=trade_size)

tree6:  rules => {
result: str(rules)
    1 : List TK.RAISE(LIST, '=>', V=[Ident(), Set()])
    2 :     Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    3 :     Set TK.SET(SET, '{', V=[List(), List()])
    4 :         List TK.RAISE(LIST, '=>', V=[List(), Ident()])
    5 :             List TK.CHAIN(LIST, '|', V=[List(), Ident()])
    6 :                 List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
    7 :                     List TK.CHAIN(LIST, '|', V=[UnaryOp(), Ident()])
    8 :                         UnaryOp TK.ANY(UNARY, 'any:', V=None)
    9 :                             BinOp TK.TUPLE(BINOP, ':', V=None)
   10 :                                 Set TK.SET(SET, '{', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ident TK.IDNT(DATASET, 'close', V=close)
   13 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   15 :                                             List TK.TUPLE(LIST, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ident TK.IDNT(DATASET, 'close', V=close)
   19 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   21 :                                             List TK.TUPLE(LIST, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 BinOp TK.ASSIGN(BINOP, '=', V=None)
   24 :                                     Ident TK.IDNT(IDENTIFIER, 'threshold', V=threshold)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   27 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   28 :                         Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   29 :                         List TK.TUPLE(LIST, '(', V=[Duration()])
   30 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   31 :                 Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   32 :             Ident TK.BUY(KEYWORD, 'buy', V=buy)
   33 :         List TK.RAISE(LIST, '->', V=[List(), Ident()])
   34 :             List TK.CHAIN(LIST, '|', V=[List(), Ident()])
   35 :                 List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   36 :                     List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
   37 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   38 :                             Ident TK.IDNT(DATASET, 'close', V=close)
   39 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   40 :                                 Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   41 :                                 List TK.TUPLE(LIST, '(', V=[Int()])
   42 :                                     Int TK.INT(LITERAL, '10', V=10)
   43 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   44 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   45 :                         Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   46 :                         List TK.TUPLE(LIST, '(', V=[Duration()])
   47 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   48 :                 Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   49 :             Ident TK.SELL(KEYWORD, 'sell', V=sell)

tree7:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    3 :     Set TK.SET(SET, '{', V=[List()])
    4 :         List TK.CHAIN(LIST, '|', V=[Ident(), FnCall()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'trades', V=trades)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ident TK.IDNT(KEYWORD, 'select', V=select)
    8 :                 List TK.TUPLE(LIST, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree1:  %%backtest (period='train5', rules=rules)
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'backtest', V=backtest)
    4 :         List TK.TUPLE(LIST, '(', V=[BinOp(), BinOp()])
    5 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'period', V=period)
    7 :                 Str TK.STR(LITERAL, 'train5', V=train5)
    8 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    9 :                 Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
   10 :                 Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)

tree2:  %%report (report)
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    4 :         List TK.TUPLE(LIST, '(', V=[Ident()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'report', V=report)

tree1:(post)  atr := (high + low) / 2
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'high', V=high)
    6 :             Ident TK.IDNT(DATASET, 'low', V=low)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree2:(post)  median_price := (open + close) / 2
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'median_price', V=median_price)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'open', V=open)
    6 :             Ident TK.IDNT(DATASET, 'close', V=close)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree3:(post)  trade_size := position * 10%
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'trade_size', V=trade_size)
    3 :     BinOp TK.MUL(BINOP, '*', V=None)
    4 :         Ident TK.IDNT(IDENTIFIER, 'position', V=position)
    5 :         Percent TK.PCT(LITERAL, '10%', V=0.1)

tree4:(post)  def buy = { position += trade_size }
result: None
    1 : UnaryOp TK.DEFATTR(UNARY, 'def', V=None)
    2 :     BinOp TK.ASSIGN(BINOP, '=', V=None)
    3 :         Ident TK.BUY(KEYWORD, 'buy', V=buy)
    4 :         Set TK.SET(SET, '{', V=[BinOp()])
    5 :             BinOp TK.PLEQ(BINOP, '+=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'position', V=position)
    7 :                 Ident TK.IDNT(IDENTIFIER, 'trade_size', V=trade_size)

tree5:(post)  def sell = { position -= trade_size }
result: None
    1 : UnaryOp TK.DEFATTR(UNARY, 'def', V=None)
    2 :     BinOp TK.ASSIGN(BINOP, '=', V=None)
    3 :         Ident TK.SELL(KEYWORD, 'sell', V=sell)
    4 :         Set TK.SET(SET, '{', V=[BinOp()])
    5 :             BinOp TK.MNEQ(BINOP, '-=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'position', V=position)
    7 :                 Ident TK.IDNT(IDENTIFIER, 'trade_size', V=trade_size)

tree6:(post)  rules => {
result: str(rules)
    1 : List TK.RAISE(LIST, '=>', V=[Ident(), Set()])
    2 :     Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    3 :     Set TK.SET(SET, '{', V=[List(), List()])
    4 :         List TK.RAISE(LIST, '=>', V=[List(), Ident()])
    5 :             List TK.CHAIN(LIST, '|', V=[List(), Ident()])
    6 :                 List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
    7 :                     List TK.CHAIN(LIST, '|', V=[UnaryOp(), Ident()])
    8 :                         UnaryOp TK.ANY(UNARY, 'any:', V=None)
    9 :                             BinOp TK.TUPLE(BINOP, ':', V=None)
   10 :                                 Set TK.SET(SET, '{', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ident TK.IDNT(DATASET, 'close', V=close)
   13 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   15 :                                             List TK.TUPLE(LIST, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ident TK.IDNT(DATASET, 'close', V=close)
   19 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   21 :                                             List TK.TUPLE(LIST, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 List TK.TUPLE(LIST, '(', V=[BinOp()])
   24 :                                     BinOp TK.TUPLE(BINOP, '=', V=None)
   25 :                                         Ident TK.IDNT(IDENTIFIER, 'threshold', V=threshold)
   26 :                                         Float TK.FLOT(LITERAL, '0.01', V=0.01)
   27 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   28 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                         Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   30 :                         List TK.TUPLE(LIST, '(', V=[Duration()])
   31 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                 Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   33 :             Ident TK.BUY(KEYWORD, 'buy', V=buy)
   34 :         List TK.RAISE(LIST, '->', V=[List(), Ident()])
   35 :             List TK.CHAIN(LIST, '|', V=[List(), Ident()])
   36 :                 List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   37 :                     List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
   38 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   39 :                             Ident TK.IDNT(DATASET, 'close', V=close)
   40 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   41 :                                 Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   42 :                                 List TK.TUPLE(LIST, '(', V=[Int()])
   43 :                                     Int TK.INT(LITERAL, '10', V=10)
   44 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   45 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   46 :                         Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   47 :                         List TK.TUPLE(LIST, '(', V=[Duration()])
   48 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   49 :                 Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   50 :             Ident TK.SELL(KEYWORD, 'sell', V=sell)

tree7:(post)  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    3 :     Set TK.SET(SET, '{', V=[List()])
    4 :         List TK.CHAIN(LIST, '|', V=[Ident(), FnCall()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'trades', V=trades)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ident TK.IDNT(KEYWORD, 'select', V=select)
    8 :                 List TK.TUPLE(LIST, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree1:  %%backtest (period='train5', rules=rules)
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'backtest', V=backtest)
    4 :         List TK.TUPLE(LIST, '(', V=[BinOp(), BinOp()])
    5 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'period', V=period)
    7 :                 Str TK.STR(LITERAL, 'train5', V=train5)
    8 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    9 :                 Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
   10 :                 Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)

tree2:  %%report (report)
    1 : Command TK.PCT2(UNARY, '%%', V=None)
    2 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    4 :         List TK.TUPLE(LIST, '(', V=[Ident()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'report', V=report)
