

test:
periods = {
    'train': (today-2y)..today
}

var sma_periods1 = [3,5,10..20,28]
var sma_periods2 = [5,10,12,20,30,60,90]

(open, high, low, close, adj_close) = yahoo( file='spq500.csv', periods['train5'] )
atr = mean(high, low)
median_price = mean(open, close)
price10a := _.delay(1d)[10:00]

report := { trades(buy, sell) | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

rules := {
    baseline = {
        any:{ close |> sma(10), close |> sma(20), sma(10) |> sma(20) }:(threshold=0.01) | signal(close) >> delay(1d) -> buy(atr),
        close <| sma(10) | delay(1d) | signal(close) -> sell
    },
    scenario1 = {
        { close |> sma(r2) } | delay(1d) | signal(atr)  -> buy,
        close <| sma(r1) | delay(1d) | signal(atr) -> sell
    },
    scenario2 = {
        { close |> sma(r1) }:(threshold=0.01) | delay(1d) | signal -> buy,
        close <| sma(r1) | delay(1d) | signal -> sell
    },
    scenario3 = {
        { sma(r1) |> sma(r2) } | delay(1d) | signal -> buy,
        close <| sma(r1) | delay(1d) | signal -> sell
    },
    {
        { close |> sma(r1) } | delay(1d) | signal -> buy,
        close <| sma(r2) | delay(1d) | signal -> sell
    }
}

backtest( rules:{r1=sma_periods1, r2=sma_periods2}, period=period['train'])
rules => report | print


tree1:  periods = {
    1  : Define(TK.DEFINE: periods = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'periods')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: train None GenerateRange(TK.GEN, ''))
    5  :             Str(TK.STR, 'train')
    6  :             GenerateRange(TK.RANGE, len=3)
    7  :                 BinOp(TK.SUB, '-')
    8  :                     Get(TK.IDENT, 'today')
    9  :                     Duration(TK.DUR, 730 days, 0:00:00)
   10  :                 Get(TK.IDENT, 'today')

tree2:  var sma_periods1 = [3,5,10..20,28]
    1  : DefineVar(TK.DEFINE: sma_periods1 = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'sma_periods1')
    3  :     Generate(TK.LIST, len=4)
    4  :         Int(TK.INT, 3)
    5  :         Int(TK.INT, 5)
    6  :         GenerateRange(TK.RANGE, len=3)
    7  :             Int(TK.INT, 10)
    8  :             Int(TK.INT, 20)
    9  :         Int(TK.INT, 28)

tree3:  var sma_periods2 = [5,10,12,20,30,60,90]
    1  : DefineVar(TK.DEFINE: sma_periods2 = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'sma_periods2')
    3  :     Generate(TK.LIST, len=7)
    4  :         Int(TK.INT, 5)
    5  :         Int(TK.INT, 10)
    6  :         Int(TK.INT, 12)
    7  :         Int(TK.INT, 20)
    8  :         Int(TK.INT, 30)
    9  :         Int(TK.INT, 60)
   10  :         Int(TK.INT, 90)

tree4:  (open, high, low, close, adj_close) = yahoo( file='spq500.csv', periods['train5'] )
    1  : Define(TK.DEFINE: [count=4]:tup = FnCall(TK.FUNCTION, 'yahoo'))
    2  :     Generate(TK.TUPLE, len=5)
    3  :         Get(TK.IDENT, 'open')
    4  :         Get(TK.IDENT, 'high')
    5  :         Get(TK.IDENT, 'low')
    6  :         Get(TK.IDENT, 'close')
    7  :         Get(TK.IDENT, 'adj_close')
    8  :     FnCall('yahoo')
    9  :         Get(TK.IDENT, 'yahoo')
   10  :         Generate(TK.NAMEDTUPLE, len=2)
   11  :             Define(TK.DEFINE: file = spq500.csv)
   12  :                 Ref(TK.IDENT, 'file')
   13  :                 Str(TK.STR, 'spq500.csv')
   14  :             Index('periods')
   15  :                 Get(TK.IDENT, 'periods')
   16  :                 List(TK.TUPLE, [Str()])
   17  :                     Str(TK.STR, 'train5')

tree5:  atr = mean(high, low)
    1  : Define(TK.DEFINE: atr = FnCall(TK.FUNCTION, 'mean'))
    2  :     Ref(TK.IDENT, 'atr')
    3  :     FnCall('mean')
    4  :         Get(TK.IDENT, 'mean')
    5  :         Generate(TK.LIST, len=2)
    6  :             Get(TK.IDENT, 'high')
    7  :             Get(TK.IDENT, 'low')

tree6:  median_price = mean(open, close)
    1  : Define(TK.DEFINE: median_price = FnCall(TK.FUNCTION, 'mean'))
    2  :     Ref(TK.IDENT, 'median_price')
    3  :     FnCall('mean')
    4  :         Get(TK.IDENT, 'mean')
    5  :         Generate(TK.LIST, len=2)
    6  :             Get(TK.IDENT, 'open')
    7  :             Get(TK.IDENT, 'close')

tree7:  price10a := _.delay(1d)[10:00]
    1  : DefineVar(TK.DEFINE: price10a := PropCall(TK.PROPCALL, '_'))
    2  :     Ref(TK.IDENT, 'price10a')
    3  :     PropCall(TK.PROPCALL, '_')
    4  :         Get(TK.ANON, '_')
    5  :         List(TK.LIST, [Duration()])
    6  :             Duration(TK.DUR, 1 day, 0:00:00)

tree8:  periods = {
    1  : Generate(TK.LIST, len=1)
    2  :     Time(TK.TIME, 10:00:00)

tree9:  report := { trades(buy, sell) | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1  : DefineVar(TK.DEFINE: report := Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'report')
    3  :     Generate(TK.SET, len=1)
    4  :         Flow{TK.CHAIN, '|' len=2}
    5  :             FnCall('trades')
    6  :                 Get(TK.IDENT, 'trades')
    7  :                 Generate(TK.LIST, len=2)
    8  :                     Get(TK.IDENT, 'buy')
    9  :                     Get(TK.IDENT, 'sell')
   10  :             FnCall('select')
   11  :                 Ref(TK.IDENT, 'select')
   12  :                 List(TK.LIST, [Str(), Str(), Str(), Str(), Str()])
   13  :                     Str(TK.STR, 'symbol')
   14  :                     Str(TK.STR, 'buy_date')
   15  :                     Str(TK.STR, 'buy_price')
   16  :                     Str(TK.STR, 'sell_date')
   17  :                     Str(TK.STR, 'sell_price')

tree10:  rules := {
    1  : DefineVar(TK.DEFINE: rules := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules')
    3  :     Block{TK.BLOCK, len=5}
    4  :         Define(TK.DEFINE: baseline = Generate(TK.GEN, ''))
    5  :             Ref(TK.IDENT, 'baseline')
    6  :             Generate(TK.SET, len=2)
    7  :                 UnaryOp(TK.ANY, 'any')
    8  :                     Flow{TK.RAISE, '->' len=2}
    9  :                         Flow{TK.APPLY, '>>' len=2}
   10  :                             Flow{TK.CHAIN, '|' len=2}
   11  :                                 Combine(TK.COMBINE: [count=2]:set None Define(TK.DEFINE, '='))
   12  :                                     Generate(TK.SET, len=3)
   13  :                                         BinOp(TK.RISE_ABOVE, '|>')
   14  :                                             Get(TK.IDENT, 'close')
   15  :                                             FnCall('sma')
   16  :                                                 Get(TK.IDENT, 'sma')
   17  :                                                 List(TK.LIST, [Int()])
   18  :                                                     Int(TK.INT, 10)
   19  :                                         BinOp(TK.RISE_ABOVE, '|>')
   20  :                                             Get(TK.IDENT, 'close')
   21  :                                             FnCall('sma')
   22  :                                                 Get(TK.IDENT, 'sma')
   23  :                                                 List(TK.LIST, [Int()])
   24  :                                                     Int(TK.INT, 20)
   25  :                                         BinOp(TK.RISE_ABOVE, '|>')
   26  :                                             FnCall('sma')
   27  :                                                 Get(TK.IDENT, 'sma')
   28  :                                                 List(TK.LIST, [Int()])
   29  :                                                     Int(TK.INT, 10)
   30  :                                             FnCall('sma')
   31  :                                                 Get(TK.IDENT, 'sma')
   32  :                                                 List(TK.LIST, [Int()])
   33  :                                                     Int(TK.INT, 20)
   34  :                                     Define(TK.DEFINE: threshold = 0.01)
   35  :                                         Ref(TK.IDENT, 'threshold')
   36  :                                         Float(TK.FLOT, 0.01)
   37  :                                 FnCall('signal')
   38  :                                     Ref(TK.IDENT, 'signal')
   39  :                                     List(TK.LIST, [Ref()])
   40  :                                         Ref(TK.IDENT, 'close')
   41  :                             FnCall('delay')
   42  :                                 Ref(TK.IDENT, 'delay')
   43  :                                 List(TK.LIST, [Duration()])
   44  :                                     Duration(TK.DUR, 1 day, 0:00:00)
   45  :                         FnCall('buy')
   46  :                             Ref(TK.IDENT, 'buy')
   47  :                             List(TK.LIST, [Ref()])
   48  :                                 Ref(TK.IDENT, 'atr')
   49  :                 Flow{TK.RAISE, '->' len=2}
   50  :                     Flow{TK.CHAIN, '|' len=3}
   51  :                         BinOp(TK.FALL_BELOW, '<|')
   52  :                             Get(TK.IDENT, 'close')
   53  :                             FnCall('sma')
   54  :                                 Get(TK.IDENT, 'sma')
   55  :                                 List(TK.LIST, [Int()])
   56  :                                     Int(TK.INT, 10)
   57  :                         FnCall('delay')
   58  :                             Ref(TK.IDENT, 'delay')
   59  :                             List(TK.LIST, [Duration()])
   60  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   61  :                         FnCall('signal')
   62  :                             Ref(TK.IDENT, 'signal')
   63  :                             List(TK.LIST, [Ref()])
   64  :                                 Ref(TK.IDENT, 'close')
   65  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   66  :                         Ref(TK.IDENT, 'sell')
   67  :         Define(TK.DEFINE: scenario1 = Generate(TK.GEN, ''))
   68  :             Ref(TK.IDENT, 'scenario1')
   69  :             Generate(TK.SET, len=2)
   70  :                 Flow{TK.RAISE, '->' len=2}
   71  :                     Flow{TK.CHAIN, '|' len=3}
   72  :                         Generate(TK.SET, len=1)
   73  :                             BinOp(TK.RISE_ABOVE, '|>')
   74  :                                 Get(TK.IDENT, 'close')
   75  :                                 FnCall('sma')
   76  :                                     Get(TK.IDENT, 'sma')
   77  :                                     List(TK.LIST, [Get()])
   78  :                                         Get(TK.IDENT, 'r2')
   79  :                         FnCall('delay')
   80  :                             Ref(TK.IDENT, 'delay')
   81  :                             List(TK.LIST, [Duration()])
   82  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   83  :                         FnCall('signal')
   84  :                             Ref(TK.IDENT, 'signal')
   85  :                             List(TK.LIST, [Ref()])
   86  :                                 Ref(TK.IDENT, 'atr')
   87  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'buy'))
   88  :                         Ref(TK.IDENT, 'buy')
   89  :                 Flow{TK.RAISE, '->' len=2}
   90  :                     Flow{TK.CHAIN, '|' len=3}
   91  :                         BinOp(TK.FALL_BELOW, '<|')
   92  :                             Get(TK.IDENT, 'close')
   93  :                             FnCall('sma')
   94  :                                 Get(TK.IDENT, 'sma')
   95  :                                 List(TK.LIST, [Get()])
   96  :                                     Get(TK.IDENT, 'r1')
   97  :                         FnCall('delay')
   98  :                             Ref(TK.IDENT, 'delay')
   99  :                             List(TK.LIST, [Duration()])
  100  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  101  :                         FnCall('signal')
  102  :                             Ref(TK.IDENT, 'signal')
  103  :                             List(TK.LIST, [Ref()])
  104  :                                 Ref(TK.IDENT, 'atr')
  105  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
  106  :                         Ref(TK.IDENT, 'sell')
  107  :         Define(TK.DEFINE: scenario2 = Generate(TK.GEN, ''))
  108  :             Ref(TK.IDENT, 'scenario2')
  109  :             Generate(TK.SET, len=2)
  110  :                 Flow{TK.RAISE, '->' len=2}
  111  :                     Flow{TK.CHAIN, '|' len=3}
  112  :                         Combine(TK.COMBINE: [count=0]:set None Define(TK.DEFINE, '='))
  113  :                             Generate(TK.SET, len=1)
  114  :                                 BinOp(TK.RISE_ABOVE, '|>')
  115  :                                     Get(TK.IDENT, 'close')
  116  :                                     FnCall('sma')
  117  :                                         Get(TK.IDENT, 'sma')
  118  :                                         List(TK.LIST, [Get()])
  119  :                                             Get(TK.IDENT, 'r1')
  120  :                             Define(TK.DEFINE: threshold = 0.01)
  121  :                                 Ref(TK.IDENT, 'threshold')
  122  :                                 Float(TK.FLOT, 0.01)
  123  :                         FnCall('delay')
  124  :                             Ref(TK.IDENT, 'delay')
  125  :                             List(TK.LIST, [Duration()])
  126  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  127  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  128  :                             Ref(TK.IDENT, 'signal')
  129  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'buy'))
  130  :                         Ref(TK.IDENT, 'buy')
  131  :                 Flow{TK.RAISE, '->' len=2}
  132  :                     Flow{TK.CHAIN, '|' len=3}
  133  :                         BinOp(TK.FALL_BELOW, '<|')
  134  :                             Get(TK.IDENT, 'close')
  135  :                             FnCall('sma')
  136  :                                 Get(TK.IDENT, 'sma')
  137  :                                 List(TK.LIST, [Get()])
  138  :                                     Get(TK.IDENT, 'r1')
  139  :                         FnCall('delay')
  140  :                             Ref(TK.IDENT, 'delay')
  141  :                             List(TK.LIST, [Duration()])
  142  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  143  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  144  :                             Ref(TK.IDENT, 'signal')
  145  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
  146  :                         Ref(TK.IDENT, 'sell')
  147  :         Define(TK.DEFINE: scenario3 = Generate(TK.GEN, ''))
  148  :             Ref(TK.IDENT, 'scenario3')
  149  :             Generate(TK.SET, len=2)
  150  :                 Flow{TK.RAISE, '->' len=2}
  151  :                     Flow{TK.CHAIN, '|' len=3}
  152  :                         Generate(TK.SET, len=1)
  153  :                             BinOp(TK.RISE_ABOVE, '|>')
  154  :                                 FnCall('sma')
  155  :                                     Get(TK.IDENT, 'sma')
  156  :                                     List(TK.LIST, [Get()])
  157  :                                         Get(TK.IDENT, 'r1')
  158  :                                 FnCall('sma')
  159  :                                     Get(TK.IDENT, 'sma')
  160  :                                     List(TK.LIST, [Get()])
  161  :                                         Get(TK.IDENT, 'r2')
  162  :                         FnCall('delay')
  163  :                             Ref(TK.IDENT, 'delay')
  164  :                             List(TK.LIST, [Duration()])
  165  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  166  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  167  :                             Ref(TK.IDENT, 'signal')
  168  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'buy'))
  169  :                         Ref(TK.IDENT, 'buy')
  170  :                 Flow{TK.RAISE, '->' len=2}
  171  :                     Flow{TK.CHAIN, '|' len=3}
  172  :                         BinOp(TK.FALL_BELOW, '<|')
  173  :                             Get(TK.IDENT, 'close')
  174  :                             FnCall('sma')
  175  :                                 Get(TK.IDENT, 'sma')
  176  :                                 List(TK.LIST, [Get()])
  177  :                                     Get(TK.IDENT, 'r1')
  178  :                         FnCall('delay')
  179  :                             Ref(TK.IDENT, 'delay')
  180  :                             List(TK.LIST, [Duration()])
  181  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  182  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  183  :                             Ref(TK.IDENT, 'signal')
  184  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
  185  :                         Ref(TK.IDENT, 'sell')
  186  :         Generate(TK.SET, len=2)
  187  :             Flow{TK.RAISE, '->' len=2}
  188  :                 Flow{TK.CHAIN, '|' len=3}
  189  :                     Generate(TK.SET, len=1)
  190  :                         BinOp(TK.RISE_ABOVE, '|>')
  191  :                             Get(TK.IDENT, 'close')
  192  :                             FnCall('sma')
  193  :                                 Get(TK.IDENT, 'sma')
  194  :                                 List(TK.LIST, [Get()])
  195  :                                     Get(TK.IDENT, 'r1')
  196  :                     FnCall('delay')
  197  :                         Ref(TK.IDENT, 'delay')
  198  :                         List(TK.LIST, [Duration()])
  199  :                             Duration(TK.DUR, 1 day, 0:00:00)
  200  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  201  :                         Ref(TK.IDENT, 'signal')
  202  :                 ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'buy'))
  203  :                     Ref(TK.IDENT, 'buy')
  204  :             Flow{TK.RAISE, '->' len=2}
  205  :                 Flow{TK.CHAIN, '|' len=3}
  206  :                     BinOp(TK.FALL_BELOW, '<|')
  207  :                         Get(TK.IDENT, 'close')
  208  :                         FnCall('sma')
  209  :                             Get(TK.IDENT, 'sma')
  210  :                             List(TK.LIST, [Get()])
  211  :                                 Get(TK.IDENT, 'r2')
  212  :                     FnCall('delay')
  213  :                         Ref(TK.IDENT, 'delay')
  214  :                         List(TK.LIST, [Duration()])
  215  :                             Duration(TK.DUR, 1 day, 0:00:00)
  216  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  217  :                         Ref(TK.IDENT, 'signal')
  218  :                 ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
  219  :                     Ref(TK.IDENT, 'sell')

tree11:  backtest( rules:{r1=sma_periods1, r2=sma_periods2}, period=period['train'])
    1  : FnCall('backtest')
    2  :     Get(TK.IDENT, 'backtest')
    3  :     Generate(TK.NAMEDTUPLE, len=2)
    4  :         Combine(TK.COMBINE: rules None Block(TK.BLOCK, ''))
    5  :             Ref(TK.IDENT, 'rules')
    6  :             Block{TK.BLOCK, len=2}
    7  :                 Define(TK.DEFINE: r1 = Get(TK.IDENT, 'sma_periods1'))
    8  :                     Ref(TK.IDENT, 'r1')
    9  :                     Get(TK.IDENT, 'sma_periods1')
   10  :                 Define(TK.DEFINE: r2 = Get(TK.IDENT, 'sma_periods2'))
   11  :                     Ref(TK.IDENT, 'r2')
   12  :                     Get(TK.IDENT, 'sma_periods2')
   13  :         Define(TK.DEFINE: period = Index(TK.INDEX, 'index'))
   14  :             Ref(TK.IDENT, 'period')
   15  :             Index('period')
   16  :                 Get(TK.IDENT, 'period')
   17  :                 List(TK.TUPLE, [Str()])
   18  :                     Str(TK.STR, 'train')

tree12:  rules => report | print
    1  : DefineFn(TK.PRODUCE: rules => Flow(TK.CHAIN, '|'))
    2  :     Ref(TK.IDENT, 'rules')
    3  :     Flow{TK.CHAIN, '|' len=2}
    4  :         Get(TK.IDENT, 'report')
    5  :         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
    6  :             Ref(TK.IDENT, 'print')

tree1:(post)  periods = {
    1  : Define(TK.DEFINE: periods = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'periods')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: train None GenerateRange(TK.GEN, ''))
    5  :             Str(TK.STR, 'train')
    6  :             GenerateRange(TK.RANGE, len=3)
    7  :                 BinOp(TK.SUB, '-')
    8  :                     Get(TK.IDENT, 'today')
    9  :                     Duration(TK.DUR, 730 days, 0:00:00)
   10  :                 Get(TK.IDENT, 'today')

tree2:(post)  var sma_periods1 = [3,5,10..20,28]
    1  : DefineVar(TK.DEFINE: sma_periods1 = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'sma_periods1')
    3  :     Generate(TK.LIST, len=4)
    4  :         Int(TK.INT, 3)
    5  :         Int(TK.INT, 5)
    6  :         GenerateRange(TK.RANGE, len=3)
    7  :             Int(TK.INT, 10)
    8  :             Int(TK.INT, 20)
    9  :         Int(TK.INT, 28)

tree3:(post)  var sma_periods2 = [5,10,12,20,30,60,90]
    1  : DefineVar(TK.DEFINE: sma_periods2 = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'sma_periods2')
    3  :     Generate(TK.LIST, len=7)
    4  :         Int(TK.INT, 5)
    5  :         Int(TK.INT, 10)
    6  :         Int(TK.INT, 12)
    7  :         Int(TK.INT, 20)
    8  :         Int(TK.INT, 30)
    9  :         Int(TK.INT, 60)
   10  :         Int(TK.INT, 90)

tree4:(post)  (open, high, low, close, adj_close) = yahoo( file='spq500.csv', periods['train5'] )
    1  : Define(TK.DEFINE: [count=4]:tup = FnCall(TK.FUNCTION, 'yahoo'))
    2  :     Generate(TK.TUPLE, len=5)
    3  :         Get(TK.IDENT, 'open')
    4  :         Get(TK.IDENT, 'high')
    5  :         Get(TK.IDENT, 'low')
    6  :         Get(TK.IDENT, 'close')
    7  :         Get(TK.IDENT, 'adj_close')
    8  :     FnCall('yahoo')
    9  :         Get(TK.IDENT, 'yahoo')
   10  :         Generate(TK.NAMEDTUPLE, len=2)
   11  :             Define(TK.DEFINE: file = spq500.csv)
   12  :                 Ref(TK.IDENT, 'file')
   13  :                 Str(TK.STR, 'spq500.csv')
   14  :             Index('periods')
   15  :                 Get(TK.IDENT, 'periods')
   16  :                 List(TK.TUPLE, [Str()])
   17  :                     Str(TK.STR, 'train5')

tree5:(post)  atr = mean(high, low)
    1  : Define(TK.DEFINE: atr = FnCall(TK.FUNCTION, 'mean'))
    2  :     Ref(TK.IDENT, 'atr')
    3  :     FnCall('mean')
    4  :         Get(TK.IDENT, 'mean')
    5  :         Generate(TK.LIST, len=2)
    6  :             Get(TK.IDENT, 'high')
    7  :             Get(TK.IDENT, 'low')

tree6:(post)  median_price = mean(open, close)
    1  : Define(TK.DEFINE: median_price = FnCall(TK.FUNCTION, 'mean'))
    2  :     Ref(TK.IDENT, 'median_price')
    3  :     FnCall('mean')
    4  :         Get(TK.IDENT, 'mean')
    5  :         Generate(TK.LIST, len=2)
    6  :             Get(TK.IDENT, 'open')
    7  :             Get(TK.IDENT, 'close')

tree7:(post)  price10a := _.delay(1d)[10:00]
    1  : DefineVar(TK.DEFINE: price10a := PropCall(TK.PROPCALL, '_'))
    2  :     Ref(TK.IDENT, 'price10a')
    3  :     PropCall(TK.PROPCALL, '_')
    4  :         Get(TK.ANON, '_')
    5  :         List(TK.LIST, [Duration()])
    6  :             Duration(TK.DUR, 1 day, 0:00:00)

tree8:(post)  periods = {
    1  : Generate(TK.LIST, len=1)
    2  :     Time(TK.TIME, 10:00:00)

tree9:(post)  report := { trades(buy, sell) | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1  : DefineVar(TK.DEFINE: report := Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'report')
    3  :     Generate(TK.SET, len=1)
    4  :         Flow{TK.CHAIN, '|' len=2}
    5  :             FnCall('trades')
    6  :                 Get(TK.IDENT, 'trades')
    7  :                 Generate(TK.LIST, len=2)
    8  :                     Get(TK.IDENT, 'buy')
    9  :                     Get(TK.IDENT, 'sell')
   10  :             FnCall('select')
   11  :                 Ref(TK.IDENT, 'select')
   12  :                 List(TK.LIST, [Str(), Str(), Str(), Str(), Str()])
   13  :                     Str(TK.STR, 'symbol')
   14  :                     Str(TK.STR, 'buy_date')
   15  :                     Str(TK.STR, 'buy_price')
   16  :                     Str(TK.STR, 'sell_date')
   17  :                     Str(TK.STR, 'sell_price')

tree10:(post)  rules := {
    1  : DefineVar(TK.DEFINE: rules := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules')
    3  :     Block{TK.BLOCK, len=5}
    4  :         Define(TK.DEFINE: baseline = Generate(TK.GEN, ''))
    5  :             Ref(TK.IDENT, 'baseline')
    6  :             Generate(TK.SET, len=2)
    7  :                 UnaryOp(TK.ANY, 'any')
    8  :                     Flow{TK.RAISE, '->' len=2}
    9  :                         Flow{TK.APPLY, '>>' len=2}
   10  :                             Flow{TK.CHAIN, '|' len=2}
   11  :                                 Combine(TK.COMBINE: [count=2]:set None Define(TK.DEFINE, '='))
   12  :                                     Generate(TK.SET, len=3)
   13  :                                         BinOp(TK.RISE_ABOVE, '|>')
   14  :                                             Get(TK.IDENT, 'close')
   15  :                                             FnCall('sma')
   16  :                                                 Get(TK.IDENT, 'sma')
   17  :                                                 List(TK.LIST, [Int()])
   18  :                                                     Int(TK.INT, 10)
   19  :                                         BinOp(TK.RISE_ABOVE, '|>')
   20  :                                             Get(TK.IDENT, 'close')
   21  :                                             FnCall('sma')
   22  :                                                 Get(TK.IDENT, 'sma')
   23  :                                                 List(TK.LIST, [Int()])
   24  :                                                     Int(TK.INT, 20)
   25  :                                         BinOp(TK.RISE_ABOVE, '|>')
   26  :                                             FnCall('sma')
   27  :                                                 Get(TK.IDENT, 'sma')
   28  :                                                 List(TK.LIST, [Int()])
   29  :                                                     Int(TK.INT, 10)
   30  :                                             FnCall('sma')
   31  :                                                 Get(TK.IDENT, 'sma')
   32  :                                                 List(TK.LIST, [Int()])
   33  :                                                     Int(TK.INT, 20)
   34  :                                     Define(TK.DEFINE: threshold = 0.01)
   35  :                                         Ref(TK.IDENT, 'threshold')
   36  :                                         Float(TK.FLOT, 0.01)
   37  :                                 FnCall('signal')
   38  :                                     Ref(TK.IDENT, 'signal')
   39  :                                     List(TK.LIST, [Ref()])
   40  :                                         Ref(TK.IDENT, 'close')
   41  :                             FnCall('delay')
   42  :                                 Ref(TK.IDENT, 'delay')
   43  :                                 List(TK.LIST, [Duration()])
   44  :                                     Duration(TK.DUR, 1 day, 0:00:00)
   45  :                         FnCall('buy')
   46  :                             Ref(TK.IDENT, 'buy')
   47  :                             List(TK.LIST, [Ref()])
   48  :                                 Ref(TK.IDENT, 'atr')
   49  :                 Flow{TK.RAISE, '->' len=2}
   50  :                     Flow{TK.CHAIN, '|' len=3}
   51  :                         BinOp(TK.FALL_BELOW, '<|')
   52  :                             Get(TK.IDENT, 'close')
   53  :                             FnCall('sma')
   54  :                                 Get(TK.IDENT, 'sma')
   55  :                                 List(TK.LIST, [Int()])
   56  :                                     Int(TK.INT, 10)
   57  :                         FnCall('delay')
   58  :                             Ref(TK.IDENT, 'delay')
   59  :                             List(TK.LIST, [Duration()])
   60  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   61  :                         FnCall('signal')
   62  :                             Ref(TK.IDENT, 'signal')
   63  :                             List(TK.LIST, [Ref()])
   64  :                                 Ref(TK.IDENT, 'close')
   65  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   66  :                         Ref(TK.IDENT, 'sell')
   67  :         Define(TK.DEFINE: scenario1 = Generate(TK.GEN, ''))
   68  :             Ref(TK.IDENT, 'scenario1')
   69  :             Generate(TK.SET, len=2)
   70  :                 Flow{TK.RAISE, '->' len=2}
   71  :                     Flow{TK.CHAIN, '|' len=3}
   72  :                         Generate(TK.SET, len=1)
   73  :                             BinOp(TK.RISE_ABOVE, '|>')
   74  :                                 Get(TK.IDENT, 'close')
   75  :                                 FnCall('sma')
   76  :                                     Get(TK.IDENT, 'sma')
   77  :                                     List(TK.LIST, [Get()])
   78  :                                         Get(TK.IDENT, 'r2')
   79  :                         FnCall('delay')
   80  :                             Ref(TK.IDENT, 'delay')
   81  :                             List(TK.LIST, [Duration()])
   82  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   83  :                         FnCall('signal')
   84  :                             Ref(TK.IDENT, 'signal')
   85  :                             List(TK.LIST, [Ref()])
   86  :                                 Ref(TK.IDENT, 'atr')
   87  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'buy'))
   88  :                         Ref(TK.IDENT, 'buy')
   89  :                 Flow{TK.RAISE, '->' len=2}
   90  :                     Flow{TK.CHAIN, '|' len=3}
   91  :                         BinOp(TK.FALL_BELOW, '<|')
   92  :                             Get(TK.IDENT, 'close')
   93  :                             FnCall('sma')
   94  :                                 Get(TK.IDENT, 'sma')
   95  :                                 List(TK.LIST, [Get()])
   96  :                                     Get(TK.IDENT, 'r1')
   97  :                         FnCall('delay')
   98  :                             Ref(TK.IDENT, 'delay')
   99  :                             List(TK.LIST, [Duration()])
  100  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  101  :                         FnCall('signal')
  102  :                             Ref(TK.IDENT, 'signal')
  103  :                             List(TK.LIST, [Ref()])
  104  :                                 Ref(TK.IDENT, 'atr')
  105  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
  106  :                         Ref(TK.IDENT, 'sell')
  107  :         Define(TK.DEFINE: scenario2 = Generate(TK.GEN, ''))
  108  :             Ref(TK.IDENT, 'scenario2')
  109  :             Generate(TK.SET, len=2)
  110  :                 Flow{TK.RAISE, '->' len=2}
  111  :                     Flow{TK.CHAIN, '|' len=3}
  112  :                         Combine(TK.COMBINE: [count=0]:set None Define(TK.DEFINE, '='))
  113  :                             Generate(TK.SET, len=1)
  114  :                                 BinOp(TK.RISE_ABOVE, '|>')
  115  :                                     Get(TK.IDENT, 'close')
  116  :                                     FnCall('sma')
  117  :                                         Get(TK.IDENT, 'sma')
  118  :                                         List(TK.LIST, [Get()])
  119  :                                             Get(TK.IDENT, 'r1')
  120  :                             Define(TK.DEFINE: threshold = 0.01)
  121  :                                 Ref(TK.IDENT, 'threshold')
  122  :                                 Float(TK.FLOT, 0.01)
  123  :                         FnCall('delay')
  124  :                             Ref(TK.IDENT, 'delay')
  125  :                             List(TK.LIST, [Duration()])
  126  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  127  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  128  :                             Ref(TK.IDENT, 'signal')
  129  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'buy'))
  130  :                         Ref(TK.IDENT, 'buy')
  131  :                 Flow{TK.RAISE, '->' len=2}
  132  :                     Flow{TK.CHAIN, '|' len=3}
  133  :                         BinOp(TK.FALL_BELOW, '<|')
  134  :                             Get(TK.IDENT, 'close')
  135  :                             FnCall('sma')
  136  :                                 Get(TK.IDENT, 'sma')
  137  :                                 List(TK.LIST, [Get()])
  138  :                                     Get(TK.IDENT, 'r1')
  139  :                         FnCall('delay')
  140  :                             Ref(TK.IDENT, 'delay')
  141  :                             List(TK.LIST, [Duration()])
  142  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  143  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  144  :                             Ref(TK.IDENT, 'signal')
  145  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
  146  :                         Ref(TK.IDENT, 'sell')
  147  :         Define(TK.DEFINE: scenario3 = Generate(TK.GEN, ''))
  148  :             Ref(TK.IDENT, 'scenario3')
  149  :             Generate(TK.SET, len=2)
  150  :                 Flow{TK.RAISE, '->' len=2}
  151  :                     Flow{TK.CHAIN, '|' len=3}
  152  :                         Generate(TK.SET, len=1)
  153  :                             BinOp(TK.RISE_ABOVE, '|>')
  154  :                                 FnCall('sma')
  155  :                                     Get(TK.IDENT, 'sma')
  156  :                                     List(TK.LIST, [Get()])
  157  :                                         Get(TK.IDENT, 'r1')
  158  :                                 FnCall('sma')
  159  :                                     Get(TK.IDENT, 'sma')
  160  :                                     List(TK.LIST, [Get()])
  161  :                                         Get(TK.IDENT, 'r2')
  162  :                         FnCall('delay')
  163  :                             Ref(TK.IDENT, 'delay')
  164  :                             List(TK.LIST, [Duration()])
  165  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  166  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  167  :                             Ref(TK.IDENT, 'signal')
  168  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'buy'))
  169  :                         Ref(TK.IDENT, 'buy')
  170  :                 Flow{TK.RAISE, '->' len=2}
  171  :                     Flow{TK.CHAIN, '|' len=3}
  172  :                         BinOp(TK.FALL_BELOW, '<|')
  173  :                             Get(TK.IDENT, 'close')
  174  :                             FnCall('sma')
  175  :                                 Get(TK.IDENT, 'sma')
  176  :                                 List(TK.LIST, [Get()])
  177  :                                     Get(TK.IDENT, 'r1')
  178  :                         FnCall('delay')
  179  :                             Ref(TK.IDENT, 'delay')
  180  :                             List(TK.LIST, [Duration()])
  181  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  182  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  183  :                             Ref(TK.IDENT, 'signal')
  184  :                     ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
  185  :                         Ref(TK.IDENT, 'sell')
  186  :         Generate(TK.SET, len=2)
  187  :             Flow{TK.RAISE, '->' len=2}
  188  :                 Flow{TK.CHAIN, '|' len=3}
  189  :                     Generate(TK.SET, len=1)
  190  :                         BinOp(TK.RISE_ABOVE, '|>')
  191  :                             Get(TK.IDENT, 'close')
  192  :                             FnCall('sma')
  193  :                                 Get(TK.IDENT, 'sma')
  194  :                                 List(TK.LIST, [Get()])
  195  :                                     Get(TK.IDENT, 'r1')
  196  :                     FnCall('delay')
  197  :                         Ref(TK.IDENT, 'delay')
  198  :                         List(TK.LIST, [Duration()])
  199  :                             Duration(TK.DUR, 1 day, 0:00:00)
  200  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  201  :                         Ref(TK.IDENT, 'signal')
  202  :                 ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'buy'))
  203  :                     Ref(TK.IDENT, 'buy')
  204  :             Flow{TK.RAISE, '->' len=2}
  205  :                 Flow{TK.CHAIN, '|' len=3}
  206  :                     BinOp(TK.FALL_BELOW, '<|')
  207  :                         Get(TK.IDENT, 'close')
  208  :                         FnCall('sma')
  209  :                             Get(TK.IDENT, 'sma')
  210  :                             List(TK.LIST, [Get()])
  211  :                                 Get(TK.IDENT, 'r2')
  212  :                     FnCall('delay')
  213  :                         Ref(TK.IDENT, 'delay')
  214  :                         List(TK.LIST, [Duration()])
  215  :                             Duration(TK.DUR, 1 day, 0:00:00)
  216  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  217  :                         Ref(TK.IDENT, 'signal')
  218  :                 ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
  219  :                     Ref(TK.IDENT, 'sell')

tree11:(post)  backtest( rules:{r1=sma_periods1, r2=sma_periods2}, period=period['train'])
    1  : FnCall('backtest')
    2  :     Get(TK.IDENT, 'backtest')
    3  :     Generate(TK.NAMEDTUPLE, len=2)
    4  :         Combine(TK.COMBINE: rules None Block(TK.BLOCK, ''))
    5  :             Ref(TK.IDENT, 'rules')
    6  :             Block{TK.BLOCK, len=2}
    7  :                 Define(TK.DEFINE: r1 = Get(TK.IDENT, 'sma_periods1'))
    8  :                     Ref(TK.IDENT, 'r1')
    9  :                     Get(TK.IDENT, 'sma_periods1')
   10  :                 Define(TK.DEFINE: r2 = Get(TK.IDENT, 'sma_periods2'))
   11  :                     Ref(TK.IDENT, 'r2')
   12  :                     Get(TK.IDENT, 'sma_periods2')
   13  :         Define(TK.DEFINE: period = Index(TK.INDEX, 'index'))
   14  :             Ref(TK.IDENT, 'period')
   15  :             Index('period')
   16  :                 Get(TK.IDENT, 'period')
   17  :                 List(TK.TUPLE, [Str()])
   18  :                     Str(TK.STR, 'train')

tree12:(post)  rules => report | print
    1  : DefineFn(TK.PRODUCE: rules => Flow(TK.CHAIN, '|'))
    2  :     Ref(TK.IDENT, 'rules')
    3  :     Flow{TK.CHAIN, '|' len=2}
    4  :         Get(TK.IDENT, 'report')
    5  :         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
    6  :             Ref(TK.IDENT, 'print')
