

test: 9:
a | b | c | d >> e | f | g > h

tree1:  a | b | c | d >> e | f | g > h
    1  : Flow{TK.CHAIN, '|' len=3}
    2  :     Flow{TK.APPLY, '>>' len=2}
    3  :         Flow{TK.CHAIN, '|' len=4}
    4  :             Get(TK.IDENT, 'a')
    5  :             Ref(TK.IDENT, 'b')
    6  :             Ref(TK.IDENT, 'c')
    7  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'd'))
    8  :                 Ref(TK.IDENT, 'd')
    9  :         ApplyChainProd(TK.APPLY: None >> Ref(TK.IDENT, 'e'))
   10  :             Ref(TK.IDENT, 'e')
   11  :     Ref(TK.IDENT, 'f')
   12  :     BinOp(TK.GTR, '>')
   13  :         Ref(TK.IDENT, 'g')
   14  :         Ref(TK.IDENT, 'h')

tree1:(post)  a | b | c | d >> e | f | g > h
result: list([Flow(), Ref(), BinOp()])
    1  : Flow{TK.CHAIN, '|' len=3}
    2  :     Flow{TK.APPLY, '>>' len=2}
    3  :         Flow{TK.CHAIN, '|' len=4}
    4  :             Get(TK.IDENT, 'a')
    5  :             Ref(TK.IDENT, 'b')
    6  :             Ref(TK.IDENT, 'c')
    7  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'd'))
    8  :                 Ref(TK.IDENT, 'd')
    9  :         ApplyChainProd(TK.APPLY: None >> Ref(TK.IDENT, 'e'))
   10  :             Ref(TK.IDENT, 'e')
   11  :     Ref(TK.IDENT, 'f')
   12  :     BinOp(TK.GTR, '>')
   13  :         Ref(TK.IDENT, 'g')
   14  :         Ref(TK.IDENT, 'h')
