

test: 22:
def f(x) = { a.b(x):x*x }

tree1:  def f(x) = { a.b(x):x*x }
    1  : DefineFn(TK.DEFINE: f = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: a None BinOp(TK.MUL, '*'))
    5  :             PropCall(TK.PROPCALL, 'a')
    6  :                 Ref(TK.IDENT, 'a')
    7  :                 List(TK.LIST, [Ref()])
    8  :                     Ref(TK.IDENT, 'x')
    9  :             BinOp(TK.MUL, '*')
   10  :                 Get(TK.IDENT, 'x')
   11  :                 Get(TK.IDENT, 'x')
   12  :     List(TK.LIST, [Ref()])
   13  :         Ref(TK.IDENT, 'x')

tree1:(post)  def f(x) = { a.b(x):x*x }
    1  : DefineFn(TK.DEFINE: f = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: a None BinOp(TK.MUL, '*'))
    5  :             PropCall(TK.PROPCALL, 'a')
    6  :                 Ref(TK.IDENT, 'a')
    7  :                 List(TK.LIST, [Ref()])
    8  :                     Ref(TK.IDENT, 'x')
    9  :             BinOp(TK.MUL, '*')
   10  :                 Get(TK.IDENT, 'x')
   11  :                 Get(TK.IDENT, 'x')
   12  :     List(TK.LIST, [Ref()])
   13  :         Ref(TK.IDENT, 'x')
