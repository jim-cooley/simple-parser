

test: 22:
def f(x) = { a.b(x):x*x }

tree1:  def f(x) = { a.b(x):x*x }
    1  : DefineFn(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block(TK.BLOCK, v=[Define()], '')
    4  :         Define(TK.DEFINE, TK.DEFINE, ':')
    5  :             PropRef(TK.REF, '.')
    6  :                 Ref(TK.IDENT, 'a')
    7  :                 FnRef(TK.FUNCTION, 'b')
    8  :                     Ref(TK.IDENT, 'b')
    9  :                     List(TK.LIST, [Ref()])
   10  :                         Ref(TK.IDENT, 'x')
   11  :             BinOp(TK.MUL, '*')
   12  :                 Ref(TK.IDENT, 'x')
   13  :                 Ref(TK.IDENT, 'x')
   14  :     List(TK.LIST, [Ref()])
   15  :         Ref(TK.IDENT, 'x')

tree1:(post)  def f(x) = { a.b(x):x*x }
    1  : DefineFn(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block(TK.BLOCK, v=[Define()], '')
    4  :         Define(TK.DEFINE, TK.DEFINE, ':')
    5  :             PropRef(TK.REF, '.')
    6  :                 Ref(TK.IDENT, 'a')
    7  :                 FnRef(TK.FUNCTION, 'b')
    8  :                     Ref(TK.IDENT, 'b')
    9  :                     List(TK.LIST, [Ref()])
   10  :                         Ref(TK.IDENT, 'x')
   11  :             BinOp(TK.MUL, '*')
   12  :                 Ref(TK.IDENT, 'x')
   13  :                 Ref(TK.IDENT, 'x')
   14  :     List(TK.LIST, [Ref()])
   15  :         Ref(TK.IDENT, 'x')
