

test: 22:
def f(x) = { a.b(x):x*x }

tree1:  def f(x) = { a.b(x):x*x }
    1  : DefineFn(TK.DEFINE: f = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: PropRef(TK.REF, '.') None BinOp(TK.MUL, '*'))
    5  :             PropRef(TK.REF: a . FnCall(TK.FUNCTION, 'b'))
    6  :                 Ref(TK.IDENT, 'a')
    7  :                 FnCall('b')
    8  :                     Ref(TK.IDENT, 'b')
    9  :                     List(TK.LIST, [Ref()])
   10  :                         Ref(TK.IDENT, 'x')
   11  :             BinOp(TK.MUL, '*')
   12  :                 Get(TK.IDENT, 'x')
   13  :                 Get(TK.IDENT, 'x')
   14  :     List(TK.LIST, [Ref()])
   15  :         Ref(TK.IDENT, 'x')

tree1:(post)  def f(x) = { a.b(x):x*x }
    1  : DefineFn(TK.DEFINE: f = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: PropRef(TK.REF, '.') None BinOp(TK.MUL, '*'))
    5  :             PropRef(TK.REF: a . FnCall(TK.FUNCTION, 'b'))
    6  :                 Ref(TK.IDENT, 'a')
    7  :                 FnCall('b')
    8  :                     Ref(TK.IDENT, 'b')
    9  :                     List(TK.LIST, [Ref()])
   10  :                         Ref(TK.IDENT, 'x')
   11  :             BinOp(TK.MUL, '*')
   12  :                 Get(TK.IDENT, 'x')
   13  :                 Get(TK.IDENT, 'x')
   14  :     List(TK.LIST, [Ref()])
   15  :         Ref(TK.IDENT, 'x')
