

test: 5:
any:{a=False, b=False, c=False}:{a=True}

tree1:  any:{a=False, b=False, c=False}:{a=True}
    1  : UnaryOp(TK.ANY, 'any')
    2  :     Combine(TK.COMBINE:  None Block(TK.BLOCK, ''))
    3  :         Block{TK.BLOCK, len=3}
    4  :             Define(TK.DEFINE: a = false)
    5  :                 Ref(TK.IDENT, 'a')
    6  :                 Bool(TK.BOOL, False)
    7  :             Define(TK.DEFINE: b = false)
    8  :                 Ref(TK.IDENT, 'b')
    9  :                 Bool(TK.BOOL, False)
   10  :             Define(TK.DEFINE: c = false)
   11  :                 Ref(TK.IDENT, 'c')
   12  :                 Bool(TK.BOOL, False)
   13  :         Block{TK.BLOCK, len=1}
   14  :             Define(TK.DEFINE: a = true)
   15  :                 Ref(TK.IDENT, 'a')
   16  :                 Bool(TK.BOOL, True)

tree1:(post)  any:{a=False, b=False, c=False}:{a=True}
    1  : UnaryOp(TK.ANY, 'any')
    2  :     Combine(TK.COMBINE:  None Block(TK.BLOCK, ''))
    3  :         Block{TK.BLOCK, len=3}
    4  :             Define(TK.DEFINE: a = false)
    5  :                 Ref(TK.IDENT, 'a')
    6  :                 Bool(TK.BOOL, False)
    7  :             Define(TK.DEFINE: b = false)
    8  :                 Ref(TK.IDENT, 'b')
    9  :                 Bool(TK.BOOL, False)
   10  :             Define(TK.DEFINE: c = false)
   11  :                 Ref(TK.IDENT, 'c')
   12  :                 Bool(TK.BOOL, False)
   13  :         Block{TK.BLOCK, len=1}
   14  :             Define(TK.DEFINE: a = true)
   15  :                 Ref(TK.IDENT, 'a')
   16  :                 Bool(TK.BOOL, True)
