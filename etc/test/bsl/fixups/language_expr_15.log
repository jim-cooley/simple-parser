

test: 15:
start: open.delay(1d) | buy; end: open | sell

tree1:  start: open.delay(1d) | buy; end: open | sell
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Combine(TK.COMBINE: start None PropCall(TK.PROPCALL, 'open'))
    3  :         Ref(TK.IDENT, 'start')
    4  :         PropCall(TK.PROPCALL, 'open')
    5  :             Get(TK.IDENT, 'open')
    6  :             List(TK.LIST, [Duration()])
    7  :                 Duration(TK.DUR, 1 day, 0:00:00)
    8  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'buy'))
    9  :         Ref(TK.IDENT, 'buy')

tree2:  start: open.delay(1d) | buy; end: open | sell
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Combine(TK.COMBINE: end None Get(TK.IDENT, 'open'))
    3  :         Ref(TK.IDENT, 'end')
    4  :         Get(TK.IDENT, 'open')
    5  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'sell'))
    6  :         Ref(TK.IDENT, 'sell')

tree1:(post)  start: open.delay(1d) | buy; end: open | sell
result: list([Combine(), ApplyChainProd()])
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Combine(TK.COMBINE: start None PropCall(TK.PROPCALL, 'open'))
    3  :         Ref(TK.IDENT, 'start')
    4  :         PropCall(TK.PROPCALL, 'open')
    5  :             Get(TK.IDENT, 'open')
    6  :             List(TK.LIST, [Duration()])
    7  :                 Duration(TK.DUR, 1 day, 0:00:00)
    8  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'buy'))
    9  :         Ref(TK.IDENT, 'buy')

tree2:(post)  start: open.delay(1d) | buy; end: open | sell
result: list([Combine(), ApplyChainProd()])
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Combine(TK.COMBINE: end None Get(TK.IDENT, 'open'))
    3  :         Ref(TK.IDENT, 'end')
    4  :         Get(TK.IDENT, 'open')
    5  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'sell'))
    6  :         Ref(TK.IDENT, 'sell')
