

test: 15:
start: open.delay(1d) | buy; end: open | sell

tree1:  start: open.delay(1d) | buy; end: open | sell
    1  : Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    2  :     Define(TK.DEFINE, TK.COLN, ':')
    3  :         Ref(TK.IDNT, 'start')
    4  :         PropRef(TK.REF, '.')
    5  :             Get(TK.IDNT, 'open')
    6  :             FnCall('delay')
    7  :                 Get(TK.IDNT, 'delay')
    8  :                 List(TK.TUPLE, [Duration()])
    9  :                     Duration(TK.DUR, 1 day, 0:00:00)
   10  :     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   11  :         Ref(TK.BUY, 'buy')

tree2:  start: open.delay(1d) | buy; end: open | sell
    1  : Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    2  :     Define(TK.DEFINE, TK.COLN, ':')
    3  :         Ref(TK.IDNT, 'end')
    4  :         Get(TK.IDNT, 'open')
    5  :     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
    6  :         Ref(TK.SELL, 'sell')

tree1:(post)  start: open.delay(1d) | buy; end: open | sell
result: list([Define(), ApplyChainProd()])
    1  : Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    2  :     Define(TK.DEFINE, TK.COLN, ':')
    3  :         Ref(TK.IDNT, 'start')
    4  :         PropRef(TK.REF, '.')
    5  :             Get(TK.IDNT, 'open')
    6  :             FnCall('delay')
    7  :                 Get(TK.IDNT, 'delay')
    8  :                 List(TK.TUPLE, [Duration()])
    9  :                     Duration(TK.DUR, 1 day, 0:00:00)
   10  :     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   11  :         Ref(TK.BUY, 'buy')

tree2:(post)  start: open.delay(1d) | buy; end: open | sell
result: list([Define(), ApplyChainProd()])
    1  : Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    2  :     Define(TK.DEFINE, TK.COLN, ':')
    3  :         Ref(TK.IDNT, 'end')
    4  :         Get(TK.IDNT, 'open')
    5  :     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
    6  :         Ref(TK.SELL, 'sell')
