

test: 10:
"start: open.delay(1d) | buy"

tree1:  start: open.delay(1d) | buy
result: list([Define(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    2 :     Define TK.COLN(NONE, ':', V=None)
    3 :         Ref TK.IDNT(IDENTIFIER, 'start', V=None)
    4 :         PropRef TK.REF(BINOP, '.', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'open', V=None)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Get TK.IDNT(IDENTIFIER, 'delay', V=None)
    8 :                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
    9 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   10 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   11 :         Ref TK.BUY(IDENTIFIER, 'buy', V=None)

tree1:(post)  start: open.delay(1d) | buy
result: list([Define(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    2 :     Define TK.COLN(NONE, ':', V=None)
    3 :         Ref TK.IDNT(IDENTIFIER, 'start', V=None)
    4 :         PropRef TK.REF(BINOP, '.', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'open', V=None)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Get TK.IDNT(IDENTIFIER, 'delay', V=None)
    8 :                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
    9 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   10 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   11 :         Ref TK.BUY(IDENTIFIER, 'buy', V=None)
