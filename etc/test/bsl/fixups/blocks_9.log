

test: 9:
node => { b : b.left = b.right}

tree1:  node => { b : b.left = b.right}
    1  : DefineFn(TK.PRODUCE: node => Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'node')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: b None PropSet(TK.PUT, 'put'))
    5  :             Ref(TK.IDENT, 'b')
    6  :             PropSet(TK.PUT, 'put')
    7  :                 Ref(TK.IDENT, 'b')
    8  :                 Ref(TK.IDENT, 'left')
    9  :                 PropRef(TK.REF: b . Get(TK.IDENT, 'right'))
   10  :                     Get(TK.IDENT, 'b')
   11  :                     Get(TK.IDENT, 'right')

tree1:(post)  node => { b : b.left = b.right}
    1  : DefineFn(TK.PRODUCE: node => Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'node')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: b None PropSet(TK.PUT, 'put'))
    5  :             Ref(TK.IDENT, 'b')
    6  :             PropSet(TK.PUT, 'put')
    7  :                 Ref(TK.IDENT, 'b')
    8  :                 Ref(TK.IDENT, 'left')
    9  :                 PropRef(TK.REF: b . Get(TK.IDENT, 'right'))
   10  :                     Get(TK.IDENT, 'b')
   11  :                     Get(TK.IDENT, 'right')
