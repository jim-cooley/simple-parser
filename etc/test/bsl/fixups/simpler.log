

test:
#rules0a := {
#    buy:: any:{ close |> sma(10), close |> sma(20) }:(threshold=0.01) | signal | delay(1d) | atr,
#    sell:: close <| sma(10) | signal | delay(1d) | atr
#}
rules0 := {
    close |> sma(10) | signal | delay(1d) | atr | buy,
    close <| sma(10) | signal | delay(1d) | atr | sell
}
rules1 => {
    any:{ close |> sma(10), close |> sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules2 := {
    buy: any:{ close |> sma(10), close |> sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
    sell: close <| sma(10) | signal >> delay(1d) | atr
}
rules3 := {
    any:{ close |> sma(10), close |> sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules4 = {
    any:{ close |> sma(10), close |> sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
def rules5 = {
    any:{ close |> sma(10), close |> sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}


tree1:  rules0 := {
    1  : DefineVar(TK.DEFINE: rules0 := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules0')
    3  :     Block{TK.BLOCK, len=2}
    4  :         Flow{TK.CHAIN, '|' len=5}
    5  :             BinOp(TK.RISE_ABOVE, '|>')
    6  :                 Get(TK.IDENT, 'close')
    7  :                 FnCall('sma')
    8  :                     Get(TK.IDENT, 'sma')
    9  :                     List(TK.LIST, [Int()])
   10  :                         Int(TK.INT, 10)
   11  :             Ref(TK.IDENT, 'signal')
   12  :             FnCall('delay')
   13  :                 Ref(TK.IDENT, 'delay')
   14  :                 List(TK.LIST, [Duration()])
   15  :                     Duration(TK.DUR, 1 day, 0:00:00)
   16  :             Ref(TK.IDENT, 'atr')
   17  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'buy'))
   18  :                 Ref(TK.IDENT, 'buy')
   19  :         Flow{TK.CHAIN, '|' len=5}
   20  :             BinOp(TK.FALL_BELOW, '<|')
   21  :                 Get(TK.IDENT, 'close')
   22  :                 FnCall('sma')
   23  :                     Get(TK.IDENT, 'sma')
   24  :                     List(TK.LIST, [Int()])
   25  :                         Int(TK.INT, 10)
   26  :             Ref(TK.IDENT, 'signal')
   27  :             FnCall('delay')
   28  :                 Ref(TK.IDENT, 'delay')
   29  :                 List(TK.LIST, [Duration()])
   30  :                     Duration(TK.DUR, 1 day, 0:00:00)
   31  :             Ref(TK.IDENT, 'atr')
   32  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'sell'))
   33  :                 Ref(TK.IDENT, 'sell')

tree2:  rules1 => {
    1  : DefineFn(TK.PRODUCE: rules1 => Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules1')
    3  :     Block{TK.BLOCK, len=2}
    4  :         UnaryOp(TK.ANY, 'any')
    5  :             Flow{TK.CHAIN, '|' len=2}
    6  :                 Flow{TK.APPLY, '>>' len=2}
    7  :                     Flow{TK.CHAIN, '|' len=2}
    8  :                         Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    9  :                             Block{TK.BLOCK, len=2}
   10  :                                 BinOp(TK.RISE_ABOVE, '|>')
   11  :                                     Ref(TK.IDENT, 'close')
   12  :                                     FnCall('sma')
   13  :                                         Ref(TK.IDENT, 'sma')
   14  :                                         List(TK.LIST, [Int()])
   15  :                                             Int(TK.INT, 10)
   16  :                                 BinOp(TK.RISE_ABOVE, '|>')
   17  :                                     Ref(TK.IDENT, 'close')
   18  :                                     FnCall('sma')
   19  :                                         Ref(TK.IDENT, 'sma')
   20  :                                         List(TK.LIST, [Int()])
   21  :                                             Int(TK.INT, 20)
   22  :                             Define(TK.DEFINE: threshold = 0.01)
   23  :                                 Ref(TK.IDENT, 'threshold')
   24  :                                 Float(TK.FLOT, 0.01)
   25  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   26  :                             Ref(TK.IDENT, 'signal')
   27  :                     FnCall('delay')
   28  :                         Ref(TK.IDENT, 'delay')
   29  :                         List(TK.LIST, [Duration()])
   30  :                             Duration(TK.DUR, 1 day, 0:00:00)
   31  :                 DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   32  :                     Ref(TK.IDENT, 'atr')
   33  :                     Ref(TK.IDENT, 'buy')
   34  :         Flow{TK.RAISE, '->' len=2}
   35  :             Flow{TK.CHAIN, '|' len=2}
   36  :                 Flow{TK.APPLY, '>>' len=2}
   37  :                     Flow{TK.CHAIN, '|' len=2}
   38  :                         BinOp(TK.FALL_BELOW, '<|')
   39  :                             Get(TK.IDENT, 'close')
   40  :                             FnCall('sma')
   41  :                                 Get(TK.IDENT, 'sma')
   42  :                                 List(TK.LIST, [Int()])
   43  :                                     Int(TK.INT, 10)
   44  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   45  :                             Ref(TK.IDENT, 'signal')
   46  :                     FnCall('delay')
   47  :                         Ref(TK.IDENT, 'delay')
   48  :                         List(TK.LIST, [Duration()])
   49  :                             Duration(TK.DUR, 1 day, 0:00:00)
   50  :                 ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   51  :                     Ref(TK.IDENT, 'atr')
   52  :             ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   53  :                 Ref(TK.IDENT, 'sell')

tree3:  rules2 := {
    1  : DefineVar(TK.DEFINE: rules2 := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules2')
    3  :     Block{TK.BLOCK, len=2}
    4  :         Flow{TK.CHAIN, '|' len=2}
    5  :             Flow{TK.APPLY, '>>' len=2}
    6  :                 Flow{TK.CHAIN, '|' len=2}
    7  :                     Combine(TK.COMBINE: buy None UnaryOp(TK.ANY, 'any:'))
    8  :                         Ref(TK.IDENT, 'buy')
    9  :                         UnaryOp(TK.ANY, 'any:')
   10  :                             Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
   11  :                                 Block{TK.BLOCK, len=2}
   12  :                                     BinOp(TK.RISE_ABOVE, '|>')
   13  :                                         Ref(TK.IDENT, 'close')
   14  :                                         FnCall('sma')
   15  :                                             Ref(TK.IDENT, 'sma')
   16  :                                             List(TK.LIST, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     BinOp(TK.RISE_ABOVE, '|>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                         FnCall('sma')
   21  :                                             Ref(TK.IDENT, 'sma')
   22  :                                             List(TK.LIST, [Int()])
   23  :                                                 Int(TK.INT, 20)
   24  :                                 Define(TK.DEFINE: threshold = 0.01)
   25  :                                     Ref(TK.IDENT, 'threshold')
   26  :                                     Float(TK.FLOT, 0.01)
   27  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   28  :                         Ref(TK.IDENT, 'signal')
   29  :                 FnCall('delay')
   30  :                     Ref(TK.IDENT, 'delay')
   31  :                     List(TK.LIST, [Duration()])
   32  :                         Duration(TK.DUR, 1 day, 0:00:00)
   33  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   34  :                 Ref(TK.IDENT, 'atr')
   35  :         Flow{TK.CHAIN, '|' len=2}
   36  :             Flow{TK.APPLY, '>>' len=2}
   37  :                 Flow{TK.CHAIN, '|' len=2}
   38  :                     Combine(TK.COMBINE: sell None BinOp(TK.FALL_BELOW, '<|'))
   39  :                         Ref(TK.IDENT, 'sell')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Get(TK.IDENT, 'close')
   42  :                             FnCall('sma')
   43  :                                 Get(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   47  :                         Ref(TK.IDENT, 'signal')
   48  :                 FnCall('delay')
   49  :                     Ref(TK.IDENT, 'delay')
   50  :                     List(TK.LIST, [Duration()])
   51  :                         Duration(TK.DUR, 1 day, 0:00:00)
   52  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   53  :                 Ref(TK.IDENT, 'atr')

tree4:  rules3 := {
    1  : DefineVar(TK.DEFINE: rules3 := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules3')
    3  :     Block{TK.BLOCK, len=2}
    4  :         UnaryOp(TK.ANY, 'any')
    5  :             Flow{TK.CHAIN, '|' len=2}
    6  :                 Flow{TK.APPLY, '>>' len=2}
    7  :                     Flow{TK.CHAIN, '|' len=2}
    8  :                         Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    9  :                             Block{TK.BLOCK, len=2}
   10  :                                 BinOp(TK.RISE_ABOVE, '|>')
   11  :                                     Ref(TK.IDENT, 'close')
   12  :                                     FnCall('sma')
   13  :                                         Ref(TK.IDENT, 'sma')
   14  :                                         List(TK.LIST, [Int()])
   15  :                                             Int(TK.INT, 10)
   16  :                                 BinOp(TK.RISE_ABOVE, '|>')
   17  :                                     Ref(TK.IDENT, 'close')
   18  :                                     FnCall('sma')
   19  :                                         Ref(TK.IDENT, 'sma')
   20  :                                         List(TK.LIST, [Int()])
   21  :                                             Int(TK.INT, 20)
   22  :                             Define(TK.DEFINE: threshold = 0.01)
   23  :                                 Ref(TK.IDENT, 'threshold')
   24  :                                 Float(TK.FLOT, 0.01)
   25  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   26  :                             Ref(TK.IDENT, 'signal')
   27  :                     FnCall('delay')
   28  :                         Ref(TK.IDENT, 'delay')
   29  :                         List(TK.LIST, [Duration()])
   30  :                             Duration(TK.DUR, 1 day, 0:00:00)
   31  :                 DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   32  :                     Ref(TK.IDENT, 'atr')
   33  :                     Ref(TK.IDENT, 'buy')
   34  :         Flow{TK.RAISE, '->' len=2}
   35  :             Flow{TK.CHAIN, '|' len=2}
   36  :                 Flow{TK.APPLY, '>>' len=2}
   37  :                     Flow{TK.CHAIN, '|' len=2}
   38  :                         BinOp(TK.FALL_BELOW, '<|')
   39  :                             Get(TK.IDENT, 'close')
   40  :                             FnCall('sma')
   41  :                                 Get(TK.IDENT, 'sma')
   42  :                                 List(TK.LIST, [Int()])
   43  :                                     Int(TK.INT, 10)
   44  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   45  :                             Ref(TK.IDENT, 'signal')
   46  :                     FnCall('delay')
   47  :                         Ref(TK.IDENT, 'delay')
   48  :                         List(TK.LIST, [Duration()])
   49  :                             Duration(TK.DUR, 1 day, 0:00:00)
   50  :                 ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   51  :                     Ref(TK.IDENT, 'atr')
   52  :             ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   53  :                 Ref(TK.IDENT, 'sell')

tree5:  rules4 = {
    1  : Define(TK.DEFINE: rules4 = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules4')
    3  :     Block{TK.BLOCK, len=2}
    4  :         UnaryOp(TK.ANY, 'any')
    5  :             Flow{TK.CHAIN, '|' len=2}
    6  :                 Flow{TK.APPLY, '>>' len=2}
    7  :                     Flow{TK.CHAIN, '|' len=2}
    8  :                         Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    9  :                             Block{TK.BLOCK, len=2}
   10  :                                 BinOp(TK.RISE_ABOVE, '|>')
   11  :                                     Ref(TK.IDENT, 'close')
   12  :                                     FnCall('sma')
   13  :                                         Ref(TK.IDENT, 'sma')
   14  :                                         List(TK.LIST, [Int()])
   15  :                                             Int(TK.INT, 10)
   16  :                                 BinOp(TK.RISE_ABOVE, '|>')
   17  :                                     Ref(TK.IDENT, 'close')
   18  :                                     FnCall('sma')
   19  :                                         Ref(TK.IDENT, 'sma')
   20  :                                         List(TK.LIST, [Int()])
   21  :                                             Int(TK.INT, 20)
   22  :                             Define(TK.DEFINE: threshold = 0.01)
   23  :                                 Ref(TK.IDENT, 'threshold')
   24  :                                 Float(TK.FLOT, 0.01)
   25  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   26  :                             Ref(TK.IDENT, 'signal')
   27  :                     FnCall('delay')
   28  :                         Ref(TK.IDENT, 'delay')
   29  :                         List(TK.LIST, [Duration()])
   30  :                             Duration(TK.DUR, 1 day, 0:00:00)
   31  :                 DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   32  :                     Ref(TK.IDENT, 'atr')
   33  :                     Ref(TK.IDENT, 'buy')
   34  :         Flow{TK.RAISE, '->' len=2}
   35  :             Flow{TK.CHAIN, '|' len=2}
   36  :                 Flow{TK.APPLY, '>>' len=2}
   37  :                     Flow{TK.CHAIN, '|' len=2}
   38  :                         BinOp(TK.FALL_BELOW, '<|')
   39  :                             Get(TK.IDENT, 'close')
   40  :                             FnCall('sma')
   41  :                                 Get(TK.IDENT, 'sma')
   42  :                                 List(TK.LIST, [Int()])
   43  :                                     Int(TK.INT, 10)
   44  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   45  :                             Ref(TK.IDENT, 'signal')
   46  :                     FnCall('delay')
   47  :                         Ref(TK.IDENT, 'delay')
   48  :                         List(TK.LIST, [Duration()])
   49  :                             Duration(TK.DUR, 1 day, 0:00:00)
   50  :                 ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   51  :                     Ref(TK.IDENT, 'atr')
   52  :             ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   53  :                 Ref(TK.IDENT, 'sell')

tree6:  def rules5 = {
    1  : Define(TK.DEFINE: rules5 = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules5')
    3  :     Block{TK.BLOCK, len=2}
    4  :         UnaryOp(TK.ANY, 'any')
    5  :             Flow{TK.CHAIN, '|' len=2}
    6  :                 Flow{TK.APPLY, '>>' len=2}
    7  :                     Flow{TK.CHAIN, '|' len=2}
    8  :                         Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    9  :                             Block{TK.BLOCK, len=2}
   10  :                                 BinOp(TK.RISE_ABOVE, '|>')
   11  :                                     Ref(TK.IDENT, 'close')
   12  :                                     FnCall('sma')
   13  :                                         Ref(TK.IDENT, 'sma')
   14  :                                         List(TK.LIST, [Int()])
   15  :                                             Int(TK.INT, 10)
   16  :                                 BinOp(TK.RISE_ABOVE, '|>')
   17  :                                     Ref(TK.IDENT, 'close')
   18  :                                     FnCall('sma')
   19  :                                         Ref(TK.IDENT, 'sma')
   20  :                                         List(TK.LIST, [Int()])
   21  :                                             Int(TK.INT, 20)
   22  :                             Define(TK.DEFINE: threshold = 0.01)
   23  :                                 Ref(TK.IDENT, 'threshold')
   24  :                                 Float(TK.FLOT, 0.01)
   25  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   26  :                             Ref(TK.IDENT, 'signal')
   27  :                     FnRef(TK.FUNCTION, 'delay')
   28  :                         Ref(TK.IDENT, 'delay')
   29  :                         List(TK.LIST, [Duration()])
   30  :                             Duration(TK.DUR, 1 day, 0:00:00)
   31  :                 DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   32  :                     Ref(TK.IDENT, 'atr')
   33  :                     Ref(TK.IDENT, 'buy')
   34  :         Flow{TK.RAISE, '->' len=2}
   35  :             Flow{TK.CHAIN, '|' len=2}
   36  :                 Flow{TK.APPLY, '>>' len=2}
   37  :                     Flow{TK.CHAIN, '|' len=2}
   38  :                         BinOp(TK.FALL_BELOW, '<|')
   39  :                             Ref(TK.IDENT, 'close')
   40  :                             FnRef(TK.FUNCTION, 'sma')
   41  :                                 Ref(TK.IDENT, 'sma')
   42  :                                 List(TK.LIST, [Int()])
   43  :                                     Int(TK.INT, 10)
   44  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   45  :                             Ref(TK.IDENT, 'signal')
   46  :                     FnRef(TK.FUNCTION, 'delay')
   47  :                         Ref(TK.IDENT, 'delay')
   48  :                         List(TK.LIST, [Duration()])
   49  :                             Duration(TK.DUR, 1 day, 0:00:00)
   50  :                 ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   51  :                     Ref(TK.IDENT, 'atr')
   52  :             ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   53  :                 Ref(TK.IDENT, 'sell')

tree1:(post)  rules0 := {
    1  : DefineVar(TK.DEFINE: rules0 := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules0')
    3  :     Block{TK.BLOCK, len=2}
    4  :         Flow{TK.CHAIN, '|' len=5}
    5  :             BinOp(TK.RISE_ABOVE, '|>')
    6  :                 Get(TK.IDENT, 'close')
    7  :                 FnCall('sma')
    8  :                     Get(TK.IDENT, 'sma')
    9  :                     List(TK.LIST, [Int()])
   10  :                         Int(TK.INT, 10)
   11  :             Ref(TK.IDENT, 'signal')
   12  :             FnCall('delay')
   13  :                 Ref(TK.IDENT, 'delay')
   14  :                 List(TK.LIST, [Duration()])
   15  :                     Duration(TK.DUR, 1 day, 0:00:00)
   16  :             Ref(TK.IDENT, 'atr')
   17  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'buy'))
   18  :                 Ref(TK.IDENT, 'buy')
   19  :         Flow{TK.CHAIN, '|' len=5}
   20  :             BinOp(TK.FALL_BELOW, '<|')
   21  :                 Get(TK.IDENT, 'close')
   22  :                 FnCall('sma')
   23  :                     Get(TK.IDENT, 'sma')
   24  :                     List(TK.LIST, [Int()])
   25  :                         Int(TK.INT, 10)
   26  :             Ref(TK.IDENT, 'signal')
   27  :             FnCall('delay')
   28  :                 Ref(TK.IDENT, 'delay')
   29  :                 List(TK.LIST, [Duration()])
   30  :                     Duration(TK.DUR, 1 day, 0:00:00)
   31  :             Ref(TK.IDENT, 'atr')
   32  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'sell'))
   33  :                 Ref(TK.IDENT, 'sell')

tree2:(post)  rules1 => {
    1  : DefineFn(TK.PRODUCE: rules1 => Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules1')
    3  :     Block{TK.BLOCK, len=2}
    4  :         UnaryOp(TK.ANY, 'any')
    5  :             Flow{TK.CHAIN, '|' len=2}
    6  :                 Flow{TK.APPLY, '>>' len=2}
    7  :                     Flow{TK.CHAIN, '|' len=2}
    8  :                         Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    9  :                             Block{TK.BLOCK, len=2}
   10  :                                 BinOp(TK.RISE_ABOVE, '|>')
   11  :                                     Ref(TK.IDENT, 'close')
   12  :                                     FnCall('sma')
   13  :                                         Ref(TK.IDENT, 'sma')
   14  :                                         List(TK.LIST, [Int()])
   15  :                                             Int(TK.INT, 10)
   16  :                                 BinOp(TK.RISE_ABOVE, '|>')
   17  :                                     Ref(TK.IDENT, 'close')
   18  :                                     FnCall('sma')
   19  :                                         Ref(TK.IDENT, 'sma')
   20  :                                         List(TK.LIST, [Int()])
   21  :                                             Int(TK.INT, 20)
   22  :                             Define(TK.DEFINE: threshold = 0.01)
   23  :                                 Ref(TK.IDENT, 'threshold')
   24  :                                 Float(TK.FLOT, 0.01)
   25  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   26  :                             Ref(TK.IDENT, 'signal')
   27  :                     FnCall('delay')
   28  :                         Ref(TK.IDENT, 'delay')
   29  :                         List(TK.LIST, [Duration()])
   30  :                             Duration(TK.DUR, 1 day, 0:00:00)
   31  :                 DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   32  :                     Ref(TK.IDENT, 'atr')
   33  :                     Ref(TK.IDENT, 'buy')
   34  :         Flow{TK.RAISE, '->' len=2}
   35  :             Flow{TK.CHAIN, '|' len=2}
   36  :                 Flow{TK.APPLY, '>>' len=2}
   37  :                     Flow{TK.CHAIN, '|' len=2}
   38  :                         BinOp(TK.FALL_BELOW, '<|')
   39  :                             Get(TK.IDENT, 'close')
   40  :                             FnCall('sma')
   41  :                                 Get(TK.IDENT, 'sma')
   42  :                                 List(TK.LIST, [Int()])
   43  :                                     Int(TK.INT, 10)
   44  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   45  :                             Ref(TK.IDENT, 'signal')
   46  :                     FnCall('delay')
   47  :                         Ref(TK.IDENT, 'delay')
   48  :                         List(TK.LIST, [Duration()])
   49  :                             Duration(TK.DUR, 1 day, 0:00:00)
   50  :                 ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   51  :                     Ref(TK.IDENT, 'atr')
   52  :             ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   53  :                 Ref(TK.IDENT, 'sell')

tree3:(post)  rules2 := {
    1  : DefineVar(TK.DEFINE: rules2 := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules2')
    3  :     Block{TK.BLOCK, len=2}
    4  :         Flow{TK.CHAIN, '|' len=2}
    5  :             Flow{TK.APPLY, '>>' len=2}
    6  :                 Flow{TK.CHAIN, '|' len=2}
    7  :                     Combine(TK.COMBINE: buy None UnaryOp(TK.ANY, 'any:'))
    8  :                         Ref(TK.IDENT, 'buy')
    9  :                         UnaryOp(TK.ANY, 'any:')
   10  :                             Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
   11  :                                 Block{TK.BLOCK, len=2}
   12  :                                     BinOp(TK.RISE_ABOVE, '|>')
   13  :                                         Ref(TK.IDENT, 'close')
   14  :                                         FnCall('sma')
   15  :                                             Ref(TK.IDENT, 'sma')
   16  :                                             List(TK.LIST, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     BinOp(TK.RISE_ABOVE, '|>')
   19  :                                         Ref(TK.IDENT, 'close')
   20  :                                         FnCall('sma')
   21  :                                             Ref(TK.IDENT, 'sma')
   22  :                                             List(TK.LIST, [Int()])
   23  :                                                 Int(TK.INT, 20)
   24  :                                 Define(TK.DEFINE: threshold = 0.01)
   25  :                                     Ref(TK.IDENT, 'threshold')
   26  :                                     Float(TK.FLOT, 0.01)
   27  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   28  :                         Ref(TK.IDENT, 'signal')
   29  :                 FnCall('delay')
   30  :                     Ref(TK.IDENT, 'delay')
   31  :                     List(TK.LIST, [Duration()])
   32  :                         Duration(TK.DUR, 1 day, 0:00:00)
   33  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   34  :                 Ref(TK.IDENT, 'atr')
   35  :         Flow{TK.CHAIN, '|' len=2}
   36  :             Flow{TK.APPLY, '>>' len=2}
   37  :                 Flow{TK.CHAIN, '|' len=2}
   38  :                     Combine(TK.COMBINE: sell None BinOp(TK.FALL_BELOW, '<|'))
   39  :                         Ref(TK.IDENT, 'sell')
   40  :                         BinOp(TK.FALL_BELOW, '<|')
   41  :                             Get(TK.IDENT, 'close')
   42  :                             FnCall('sma')
   43  :                                 Get(TK.IDENT, 'sma')
   44  :                                 List(TK.LIST, [Int()])
   45  :                                     Int(TK.INT, 10)
   46  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   47  :                         Ref(TK.IDENT, 'signal')
   48  :                 FnCall('delay')
   49  :                     Ref(TK.IDENT, 'delay')
   50  :                     List(TK.LIST, [Duration()])
   51  :                         Duration(TK.DUR, 1 day, 0:00:00)
   52  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   53  :                 Ref(TK.IDENT, 'atr')

tree4:(post)  rules3 := {
    1  : DefineVar(TK.DEFINE: rules3 := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules3')
    3  :     Block{TK.BLOCK, len=2}
    4  :         UnaryOp(TK.ANY, 'any')
    5  :             Flow{TK.CHAIN, '|' len=2}
    6  :                 Flow{TK.APPLY, '>>' len=2}
    7  :                     Flow{TK.CHAIN, '|' len=2}
    8  :                         Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    9  :                             Block{TK.BLOCK, len=2}
   10  :                                 BinOp(TK.RISE_ABOVE, '|>')
   11  :                                     Ref(TK.IDENT, 'close')
   12  :                                     FnCall('sma')
   13  :                                         Ref(TK.IDENT, 'sma')
   14  :                                         List(TK.LIST, [Int()])
   15  :                                             Int(TK.INT, 10)
   16  :                                 BinOp(TK.RISE_ABOVE, '|>')
   17  :                                     Ref(TK.IDENT, 'close')
   18  :                                     FnCall('sma')
   19  :                                         Ref(TK.IDENT, 'sma')
   20  :                                         List(TK.LIST, [Int()])
   21  :                                             Int(TK.INT, 20)
   22  :                             Define(TK.DEFINE: threshold = 0.01)
   23  :                                 Ref(TK.IDENT, 'threshold')
   24  :                                 Float(TK.FLOT, 0.01)
   25  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   26  :                             Ref(TK.IDENT, 'signal')
   27  :                     FnCall('delay')
   28  :                         Ref(TK.IDENT, 'delay')
   29  :                         List(TK.LIST, [Duration()])
   30  :                             Duration(TK.DUR, 1 day, 0:00:00)
   31  :                 DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   32  :                     Ref(TK.IDENT, 'atr')
   33  :                     Ref(TK.IDENT, 'buy')
   34  :         Flow{TK.RAISE, '->' len=2}
   35  :             Flow{TK.CHAIN, '|' len=2}
   36  :                 Flow{TK.APPLY, '>>' len=2}
   37  :                     Flow{TK.CHAIN, '|' len=2}
   38  :                         BinOp(TK.FALL_BELOW, '<|')
   39  :                             Get(TK.IDENT, 'close')
   40  :                             FnCall('sma')
   41  :                                 Get(TK.IDENT, 'sma')
   42  :                                 List(TK.LIST, [Int()])
   43  :                                     Int(TK.INT, 10)
   44  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   45  :                             Ref(TK.IDENT, 'signal')
   46  :                     FnCall('delay')
   47  :                         Ref(TK.IDENT, 'delay')
   48  :                         List(TK.LIST, [Duration()])
   49  :                             Duration(TK.DUR, 1 day, 0:00:00)
   50  :                 ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   51  :                     Ref(TK.IDENT, 'atr')
   52  :             ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   53  :                 Ref(TK.IDENT, 'sell')

tree5:(post)  rules4 = {
    1  : Define(TK.DEFINE: rules4 = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules4')
    3  :     Block{TK.BLOCK, len=2}
    4  :         UnaryOp(TK.ANY, 'any')
    5  :             Flow{TK.CHAIN, '|' len=2}
    6  :                 Flow{TK.APPLY, '>>' len=2}
    7  :                     Flow{TK.CHAIN, '|' len=2}
    8  :                         Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    9  :                             Block{TK.BLOCK, len=2}
   10  :                                 BinOp(TK.RISE_ABOVE, '|>')
   11  :                                     Ref(TK.IDENT, 'close')
   12  :                                     FnCall('sma')
   13  :                                         Ref(TK.IDENT, 'sma')
   14  :                                         List(TK.LIST, [Int()])
   15  :                                             Int(TK.INT, 10)
   16  :                                 BinOp(TK.RISE_ABOVE, '|>')
   17  :                                     Ref(TK.IDENT, 'close')
   18  :                                     FnCall('sma')
   19  :                                         Ref(TK.IDENT, 'sma')
   20  :                                         List(TK.LIST, [Int()])
   21  :                                             Int(TK.INT, 20)
   22  :                             Define(TK.DEFINE: threshold = 0.01)
   23  :                                 Ref(TK.IDENT, 'threshold')
   24  :                                 Float(TK.FLOT, 0.01)
   25  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   26  :                             Ref(TK.IDENT, 'signal')
   27  :                     FnCall('delay')
   28  :                         Ref(TK.IDENT, 'delay')
   29  :                         List(TK.LIST, [Duration()])
   30  :                             Duration(TK.DUR, 1 day, 0:00:00)
   31  :                 DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   32  :                     Ref(TK.IDENT, 'atr')
   33  :                     Ref(TK.IDENT, 'buy')
   34  :         Flow{TK.RAISE, '->' len=2}
   35  :             Flow{TK.CHAIN, '|' len=2}
   36  :                 Flow{TK.APPLY, '>>' len=2}
   37  :                     Flow{TK.CHAIN, '|' len=2}
   38  :                         BinOp(TK.FALL_BELOW, '<|')
   39  :                             Get(TK.IDENT, 'close')
   40  :                             FnCall('sma')
   41  :                                 Get(TK.IDENT, 'sma')
   42  :                                 List(TK.LIST, [Int()])
   43  :                                     Int(TK.INT, 10)
   44  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   45  :                             Ref(TK.IDENT, 'signal')
   46  :                     FnCall('delay')
   47  :                         Ref(TK.IDENT, 'delay')
   48  :                         List(TK.LIST, [Duration()])
   49  :                             Duration(TK.DUR, 1 day, 0:00:00)
   50  :                 ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   51  :                     Ref(TK.IDENT, 'atr')
   52  :             ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   53  :                 Ref(TK.IDENT, 'sell')

tree6:(post)  def rules5 = {
    1  : Define(TK.DEFINE: rules5 = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules5')
    3  :     Block{TK.BLOCK, len=2}
    4  :         UnaryOp(TK.ANY, 'any')
    5  :             Flow{TK.CHAIN, '|' len=2}
    6  :                 Flow{TK.APPLY, '>>' len=2}
    7  :                     Flow{TK.CHAIN, '|' len=2}
    8  :                         Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    9  :                             Block{TK.BLOCK, len=2}
   10  :                                 BinOp(TK.RISE_ABOVE, '|>')
   11  :                                     Ref(TK.IDENT, 'close')
   12  :                                     FnCall('sma')
   13  :                                         Ref(TK.IDENT, 'sma')
   14  :                                         List(TK.LIST, [Int()])
   15  :                                             Int(TK.INT, 10)
   16  :                                 BinOp(TK.RISE_ABOVE, '|>')
   17  :                                     Ref(TK.IDENT, 'close')
   18  :                                     FnCall('sma')
   19  :                                         Ref(TK.IDENT, 'sma')
   20  :                                         List(TK.LIST, [Int()])
   21  :                                             Int(TK.INT, 20)
   22  :                             Define(TK.DEFINE: threshold = 0.01)
   23  :                                 Ref(TK.IDENT, 'threshold')
   24  :                                 Float(TK.FLOT, 0.01)
   25  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   26  :                             Ref(TK.IDENT, 'signal')
   27  :                     FnRef(TK.FUNCTION, 'delay')
   28  :                         Ref(TK.IDENT, 'delay')
   29  :                         List(TK.LIST, [Duration()])
   30  :                             Duration(TK.DUR, 1 day, 0:00:00)
   31  :                 DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   32  :                     Ref(TK.IDENT, 'atr')
   33  :                     Ref(TK.IDENT, 'buy')
   34  :         Flow{TK.RAISE, '->' len=2}
   35  :             Flow{TK.CHAIN, '|' len=2}
   36  :                 Flow{TK.APPLY, '>>' len=2}
   37  :                     Flow{TK.CHAIN, '|' len=2}
   38  :                         BinOp(TK.FALL_BELOW, '<|')
   39  :                             Ref(TK.IDENT, 'close')
   40  :                             FnRef(TK.FUNCTION, 'sma')
   41  :                                 Ref(TK.IDENT, 'sma')
   42  :                                 List(TK.LIST, [Int()])
   43  :                                     Int(TK.INT, 10)
   44  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   45  :                             Ref(TK.IDENT, 'signal')
   46  :                     FnRef(TK.FUNCTION, 'delay')
   47  :                         Ref(TK.IDENT, 'delay')
   48  :                         List(TK.LIST, [Duration()])
   49  :                             Duration(TK.DUR, 1 day, 0:00:00)
   50  :                 ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   51  :                     Ref(TK.IDENT, 'atr')
   52  :             ApplyChainProd(TK.RAISE: None -> Ref(TK.IDENT, 'sell'))
   53  :                 Ref(TK.IDENT, 'sell')
