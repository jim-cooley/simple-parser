

test:
rules0a := {
    buy:: any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal | delay(1d) | atr,
    sell:: close <| sma(10) | signal | delay(1d) | atr
}
rules0 := {
    close >| sma(10) | signal | delay(1d) | atr | buy,
    close <| sma(10) | signal | delay(1d) | atr | sell
}
rules1 => {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules2 := {
    buy: any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
    sell: close <| sma(10) | signal >> delay(1d) | atr
}
rules3 := {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules4 = {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
def rules5 = {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}


tree1:  rules0a := {
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules0a')
    3  :     Block(TK.BLOCK, v=[Flow(), Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Define(), Ref(), FnCall(), ApplyChainProd()], '|')
    5  :             Define(TK.DEFINE, TK.COLN, ':')
    6  :                 BinOp(TK.DEF, '::')
    7  :                     Ref(TK.BUY, 'buy')
    8  :                     UnaryOp(TK.ANY, TK.ANY, 'any')
    9  :                 Define(TK.DEFINE, TK.COLN, ':')
   10  :                     Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                         Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   12  :                             BinOp(TK.GTR, '>')
   13  :                                 Ref(TK.IDNT, 'close')
   14  :                             FnCall('sma')
   15  :                                 Ref(TK.IDNT, 'sma')
   16  :                                 List(TK.TUPLE, [Int()])
   17  :                                     Int(TK.INT, 10)
   18  :                         Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   19  :                             BinOp(TK.GTR, '>')
   20  :                                 Ref(TK.IDNT, 'close')
   21  :                             FnCall('sma')
   22  :                                 Ref(TK.IDNT, 'sma')
   23  :                                 List(TK.TUPLE, [Int()])
   24  :                                     Int(TK.INT, 20)
   25  :                     Define(TK.DEFINE, TK.EQLS, '=')
   26  :                         Ref(TK.IDNT, 'threshold')
   27  :                         Float(TK.FLOT, 0.01)
   28  :             Ref(TK.SIGNAL, 'signal')
   29  :             FnCall('delay')
   30  :                 Ref(TK.IDNT, 'delay')
   31  :                 List(TK.TUPLE, [Duration()])
   32  :                     Duration(TK.DUR, 1 day, 0:00:00)
   33  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   34  :                 Ref(TK.IDNT, 'atr')
   35  :         Flow(TK.CHAIN, v=[BinOp(), Ref(), FnCall(), ApplyChainProd()], '|')
   36  :             BinOp(TK.DEF, '::')
   37  :                 Get(TK.SELL, 'sell')
   38  :                 BinOp(TK.FALL_BELOW, '<|')
   39  :                     Get(TK.IDNT, 'close')
   40  :                     FnCall('sma')
   41  :                         Get(TK.IDNT, 'sma')
   42  :                         List(TK.TUPLE, [Int()])
   43  :                             Int(TK.INT, 10)
   44  :             Ref(TK.SIGNAL, 'signal')
   45  :             FnCall('delay')
   46  :                 Ref(TK.IDNT, 'delay')
   47  :                 List(TK.TUPLE, [Duration()])
   48  :                     Duration(TK.DUR, 1 day, 0:00:00)
   49  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   50  :                 Ref(TK.IDNT, 'atr')

tree2:  rules0 := {
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules0')
    3  :     Block(TK.BLOCK, v=[Flow(), Flow()], '')
    4  :         Flow(TK.CHAIN, v=[BinOp(), FnCall(), Ref(), FnCall(), Ref(), ApplyChainProd()], '|')
    5  :             BinOp(TK.GTR, '>')
    6  :                 Get(TK.IDNT, 'close')
    7  :             FnCall('sma')
    8  :                 Ref(TK.IDNT, 'sma')
    9  :                 List(TK.TUPLE, [Int()])
   10  :                     Int(TK.INT, 10)
   11  :             Ref(TK.SIGNAL, 'signal')
   12  :             FnCall('delay')
   13  :                 Ref(TK.IDNT, 'delay')
   14  :                 List(TK.TUPLE, [Duration()])
   15  :                     Duration(TK.DUR, 1 day, 0:00:00)
   16  :             Ref(TK.IDNT, 'atr')
   17  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   18  :                 Ref(TK.BUY, 'buy')
   19  :         Flow(TK.CHAIN, v=[BinOp(), Ref(), FnCall(), Ref(), ApplyChainProd()], '|')
   20  :             BinOp(TK.FALL_BELOW, '<|')
   21  :                 Get(TK.IDNT, 'close')
   22  :                 FnCall('sma')
   23  :                     Get(TK.IDNT, 'sma')
   24  :                     List(TK.TUPLE, [Int()])
   25  :                         Int(TK.INT, 10)
   26  :             Ref(TK.SIGNAL, 'signal')
   27  :             FnCall('delay')
   28  :                 Ref(TK.IDNT, 'delay')
   29  :                 List(TK.TUPLE, [Duration()])
   30  :                     Duration(TK.DUR, 1 day, 0:00:00)
   31  :             Ref(TK.IDNT, 'atr')
   32  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   33  :                 Ref(TK.SELL, 'sell')

tree3:  rules1 => {
    1  : Flow(TK.PRODUCE, v=[Get(), Block()], '=>')
    2  :     Get(TK.IDNT, 'rules1')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    6  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    7  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    8  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    9  :                             Define(TK.DEFINE, TK.COLN, ':')
   10  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   12  :                                         BinOp(TK.GTR, '>')
   13  :                                             Ref(TK.IDNT, 'close')
   14  :                                         FnCall('sma')
   15  :                                             Ref(TK.IDNT, 'sma')
   16  :                                             List(TK.TUPLE, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   19  :                                         BinOp(TK.GTR, '>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                         FnCall('sma')
   22  :                                             Ref(TK.IDNT, 'sma')
   23  :                                             List(TK.TUPLE, [Int()])
   24  :                                                 Int(TK.INT, 20)
   25  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   26  :                                     Ref(TK.IDNT, 'threshold')
   27  :                                     Float(TK.FLOT, 0.01)
   28  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   29  :                                 Ref(TK.SIGNAL, 'signal')
   30  :                         FnCall('delay')
   31  :                             Ref(TK.IDNT, 'delay')
   32  :                             List(TK.TUPLE, [Duration()])
   33  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   34  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   35  :                         Ref(TK.IDNT, 'atr')
   36  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   37  :                     Ref(TK.BUY, 'buy')
   38  :         Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   39  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   40  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   41  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Ref(TK.IDNT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Ref(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                             Ref(TK.SIGNAL, 'signal')
   50  :                     FnCall('delay')
   51  :                         Ref(TK.IDNT, 'delay')
   52  :                         List(TK.TUPLE, [Duration()])
   53  :                             Duration(TK.DUR, 1 day, 0:00:00)
   54  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                     Ref(TK.IDNT, 'atr')
   56  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   57  :                 Ref(TK.SELL, 'sell')

tree4:  rules2 := {
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules2')
    3  :     Block(TK.BLOCK, v=[Flow(), Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    5  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    6  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    7  :                     Define(TK.DEFINE, TK.COLN, ':')
    8  :                         Ref(TK.BUY, 'buy')
    9  :                         UnaryOp(TK.ANY, TK.ANY, 'any:')
   10  :                             Define(TK.DEFINE, TK.COLN, ':')
   11  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   12  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   13  :                                         BinOp(TK.GTR, '>')
   14  :                                             Ref(TK.IDNT, 'close')
   15  :                                         FnCall('sma')
   16  :                                             Ref(TK.IDNT, 'sma')
   17  :                                             List(TK.TUPLE, [Int()])
   18  :                                                 Int(TK.INT, 10)
   19  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   20  :                                         BinOp(TK.GTR, '>')
   21  :                                             Ref(TK.IDNT, 'close')
   22  :                                         FnCall('sma')
   23  :                                             Ref(TK.IDNT, 'sma')
   24  :                                             List(TK.TUPLE, [Int()])
   25  :                                                 Int(TK.INT, 20)
   26  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   27  :                                     Ref(TK.IDNT, 'threshold')
   28  :                                     Float(TK.FLOT, 0.01)
   29  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   30  :                         Ref(TK.SIGNAL, 'signal')
   31  :                 FnCall('delay')
   32  :                     Ref(TK.IDNT, 'delay')
   33  :                     List(TK.TUPLE, [Duration()])
   34  :                         Duration(TK.DUR, 1 day, 0:00:00)
   35  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   36  :                 Ref(TK.IDNT, 'atr')
   37  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   40  :                     Define(TK.DEFINE, TK.COLN, ':')
   41  :                         Ref(TK.SELL, 'sell')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Get(TK.IDNT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Get(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                         Ref(TK.SIGNAL, 'signal')
   50  :                 FnCall('delay')
   51  :                     Ref(TK.IDNT, 'delay')
   52  :                     List(TK.TUPLE, [Duration()])
   53  :                         Duration(TK.DUR, 1 day, 0:00:00)
   54  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                 Ref(TK.IDNT, 'atr')

tree5:  rules3 := {
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules3')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    6  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    7  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    8  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    9  :                             Define(TK.DEFINE, TK.COLN, ':')
   10  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   12  :                                         BinOp(TK.GTR, '>')
   13  :                                             Ref(TK.IDNT, 'close')
   14  :                                         FnCall('sma')
   15  :                                             Ref(TK.IDNT, 'sma')
   16  :                                             List(TK.TUPLE, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   19  :                                         BinOp(TK.GTR, '>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                         FnCall('sma')
   22  :                                             Ref(TK.IDNT, 'sma')
   23  :                                             List(TK.TUPLE, [Int()])
   24  :                                                 Int(TK.INT, 20)
   25  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   26  :                                     Ref(TK.IDNT, 'threshold')
   27  :                                     Float(TK.FLOT, 0.01)
   28  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   29  :                                 Ref(TK.SIGNAL, 'signal')
   30  :                         FnCall('delay')
   31  :                             Ref(TK.IDNT, 'delay')
   32  :                             List(TK.TUPLE, [Duration()])
   33  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   34  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   35  :                         Ref(TK.IDNT, 'atr')
   36  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   37  :                     Ref(TK.BUY, 'buy')
   38  :         Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   39  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   40  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   41  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Get(TK.IDNT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Get(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                             Ref(TK.SIGNAL, 'signal')
   50  :                     FnCall('delay')
   51  :                         Ref(TK.IDNT, 'delay')
   52  :                         List(TK.TUPLE, [Duration()])
   53  :                             Duration(TK.DUR, 1 day, 0:00:00)
   54  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                     Ref(TK.IDNT, 'atr')
   56  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   57  :                 Ref(TK.SELL, 'sell')

tree6:  rules4 = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'rules4')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    6  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    7  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    8  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    9  :                             Define(TK.DEFINE, TK.COLN, ':')
   10  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   12  :                                         BinOp(TK.GTR, '>')
   13  :                                             Ref(TK.IDNT, 'close')
   14  :                                         FnCall('sma')
   15  :                                             Ref(TK.IDNT, 'sma')
   16  :                                             List(TK.TUPLE, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   19  :                                         BinOp(TK.GTR, '>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                         FnCall('sma')
   22  :                                             Ref(TK.IDNT, 'sma')
   23  :                                             List(TK.TUPLE, [Int()])
   24  :                                                 Int(TK.INT, 20)
   25  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   26  :                                     Ref(TK.IDNT, 'threshold')
   27  :                                     Float(TK.FLOT, 0.01)
   28  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   29  :                                 Ref(TK.SIGNAL, 'signal')
   30  :                         FnCall('delay')
   31  :                             Ref(TK.IDNT, 'delay')
   32  :                             List(TK.TUPLE, [Duration()])
   33  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   34  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   35  :                         Ref(TK.IDNT, 'atr')
   36  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   37  :                     Ref(TK.BUY, 'buy')
   38  :         Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   39  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   40  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   41  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Get(TK.IDNT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Get(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                             Ref(TK.SIGNAL, 'signal')
   50  :                     FnCall('delay')
   51  :                         Ref(TK.IDNT, 'delay')
   52  :                         List(TK.TUPLE, [Duration()])
   53  :                             Duration(TK.DUR, 1 day, 0:00:00)
   54  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                     Ref(TK.IDNT, 'atr')
   56  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   57  :                 Ref(TK.SELL, 'sell')

tree7:  def rules5 = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'rules5')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    6  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    7  :                     Flow(TK.APPLY, v=[Flow(), DefineFn()], '>>')
    8  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    9  :                             Define(TK.DEFINE, TK.COLN, ':')
   10  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                                     Flow(TK.CHAIN, v=[BinOp(), DefineFn()], '|')
   12  :                                         BinOp(TK.GTR, '>')
   13  :                                             Ref(TK.IDNT, 'close')
   14  :                                         DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   15  :                                             Ref(TK.IDNT, 'sma')
   16  :                                             List(TK.TUPLE, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     Flow(TK.CHAIN, v=[BinOp(), DefineFn()], '|')
   19  :                                         BinOp(TK.GTR, '>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                         DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   22  :                                             Ref(TK.IDNT, 'sma')
   23  :                                             List(TK.TUPLE, [Int()])
   24  :                                                 Int(TK.INT, 20)
   25  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   26  :                                     Ref(TK.IDNT, 'threshold')
   27  :                                     Float(TK.FLOT, 0.01)
   28  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   29  :                                 Ref(TK.SIGNAL, 'signal')
   30  :                         DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   31  :                             Ref(TK.IDNT, 'delay')
   32  :                             List(TK.TUPLE, [Duration()])
   33  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   34  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   35  :                         Ref(TK.IDNT, 'atr')
   36  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   37  :                     Ref(TK.BUY, 'buy')
   38  :         Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   39  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   40  :                 Flow(TK.APPLY, v=[Flow(), DefineFn()], '>>')
   41  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Ref(TK.IDNT, 'close')
   44  :                             DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   45  :                                 Ref(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                             Ref(TK.SIGNAL, 'signal')
   50  :                     DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   51  :                         Ref(TK.IDNT, 'delay')
   52  :                         List(TK.TUPLE, [Duration()])
   53  :                             Duration(TK.DUR, 1 day, 0:00:00)
   54  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                     Ref(TK.IDNT, 'atr')
   56  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   57  :                 Ref(TK.SELL, 'sell')

tree1:(post)  rules0a := {
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules0a')
    3  :     Block(TK.BLOCK, v=[Flow(), Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Define(), Ref(), FnCall(), ApplyChainProd()], '|')
    5  :             Define(TK.DEFINE, TK.COLN, ':')
    6  :                 BinOp(TK.DEF, '::')
    7  :                     Ref(TK.BUY, 'buy')
    8  :                     UnaryOp(TK.ANY, TK.ANY, 'any')
    9  :                 Define(TK.DEFINE, TK.COLN, ':')
   10  :                     Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                         Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   12  :                             BinOp(TK.GTR, '>')
   13  :                                 Ref(TK.IDNT, 'close')
   14  :                             FnCall('sma')
   15  :                                 Ref(TK.IDNT, 'sma')
   16  :                                 List(TK.TUPLE, [Int()])
   17  :                                     Int(TK.INT, 10)
   18  :                         Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   19  :                             BinOp(TK.GTR, '>')
   20  :                                 Ref(TK.IDNT, 'close')
   21  :                             FnCall('sma')
   22  :                                 Ref(TK.IDNT, 'sma')
   23  :                                 List(TK.TUPLE, [Int()])
   24  :                                     Int(TK.INT, 20)
   25  :                     Define(TK.DEFINE, TK.EQLS, '=')
   26  :                         Ref(TK.IDNT, 'threshold')
   27  :                         Float(TK.FLOT, 0.01)
   28  :             Ref(TK.SIGNAL, 'signal')
   29  :             FnCall('delay')
   30  :                 Ref(TK.IDNT, 'delay')
   31  :                 List(TK.TUPLE, [Duration()])
   32  :                     Duration(TK.DUR, 1 day, 0:00:00)
   33  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   34  :                 Ref(TK.IDNT, 'atr')
   35  :         Flow(TK.CHAIN, v=[BinOp(), Ref(), FnCall(), ApplyChainProd()], '|')
   36  :             BinOp(TK.DEF, '::')
   37  :                 Get(TK.SELL, 'sell')
   38  :                 BinOp(TK.FALL_BELOW, '<|')
   39  :                     Get(TK.IDNT, 'close')
   40  :                     FnCall('sma')
   41  :                         Get(TK.IDNT, 'sma')
   42  :                         List(TK.TUPLE, [Int()])
   43  :                             Int(TK.INT, 10)
   44  :             Ref(TK.SIGNAL, 'signal')
   45  :             FnCall('delay')
   46  :                 Ref(TK.IDNT, 'delay')
   47  :                 List(TK.TUPLE, [Duration()])
   48  :                     Duration(TK.DUR, 1 day, 0:00:00)
   49  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   50  :                 Ref(TK.IDNT, 'atr')

tree2:(post)  rules0 := {
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules0')
    3  :     Block(TK.BLOCK, v=[Flow(), Flow()], '')
    4  :         Flow(TK.CHAIN, v=[BinOp(), FnCall(), Ref(), FnCall(), Ref(), ApplyChainProd()], '|')
    5  :             BinOp(TK.GTR, '>')
    6  :                 Get(TK.IDNT, 'close')
    7  :             FnCall('sma')
    8  :                 Ref(TK.IDNT, 'sma')
    9  :                 List(TK.TUPLE, [Int()])
   10  :                     Int(TK.INT, 10)
   11  :             Ref(TK.SIGNAL, 'signal')
   12  :             FnCall('delay')
   13  :                 Ref(TK.IDNT, 'delay')
   14  :                 List(TK.TUPLE, [Duration()])
   15  :                     Duration(TK.DUR, 1 day, 0:00:00)
   16  :             Ref(TK.IDNT, 'atr')
   17  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   18  :                 Ref(TK.BUY, 'buy')
   19  :         Flow(TK.CHAIN, v=[BinOp(), Ref(), FnCall(), Ref(), ApplyChainProd()], '|')
   20  :             BinOp(TK.FALL_BELOW, '<|')
   21  :                 Get(TK.IDNT, 'close')
   22  :                 FnCall('sma')
   23  :                     Get(TK.IDNT, 'sma')
   24  :                     List(TK.TUPLE, [Int()])
   25  :                         Int(TK.INT, 10)
   26  :             Ref(TK.SIGNAL, 'signal')
   27  :             FnCall('delay')
   28  :                 Ref(TK.IDNT, 'delay')
   29  :                 List(TK.TUPLE, [Duration()])
   30  :                     Duration(TK.DUR, 1 day, 0:00:00)
   31  :             Ref(TK.IDNT, 'atr')
   32  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   33  :                 Ref(TK.SELL, 'sell')

tree3:(post)  rules1 => {
result: list([Get(), Block()])
    1  : Flow(TK.PRODUCE, v=[Get(), Block()], '=>')
    2  :     Get(TK.IDNT, 'rules1')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    6  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    7  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    8  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    9  :                             Define(TK.DEFINE, TK.COLN, ':')
   10  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   12  :                                         BinOp(TK.GTR, '>')
   13  :                                             Ref(TK.IDNT, 'close')
   14  :                                         FnCall('sma')
   15  :                                             Ref(TK.IDNT, 'sma')
   16  :                                             List(TK.TUPLE, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   19  :                                         BinOp(TK.GTR, '>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                         FnCall('sma')
   22  :                                             Ref(TK.IDNT, 'sma')
   23  :                                             List(TK.TUPLE, [Int()])
   24  :                                                 Int(TK.INT, 20)
   25  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   26  :                                     Ref(TK.IDNT, 'threshold')
   27  :                                     Float(TK.FLOT, 0.01)
   28  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   29  :                                 Ref(TK.SIGNAL, 'signal')
   30  :                         FnCall('delay')
   31  :                             Ref(TK.IDNT, 'delay')
   32  :                             List(TK.TUPLE, [Duration()])
   33  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   34  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   35  :                         Ref(TK.IDNT, 'atr')
   36  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   37  :                     Ref(TK.BUY, 'buy')
   38  :         Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   39  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   40  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   41  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Ref(TK.IDNT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Ref(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                             Ref(TK.SIGNAL, 'signal')
   50  :                     FnCall('delay')
   51  :                         Ref(TK.IDNT, 'delay')
   52  :                         List(TK.TUPLE, [Duration()])
   53  :                             Duration(TK.DUR, 1 day, 0:00:00)
   54  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                     Ref(TK.IDNT, 'atr')
   56  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   57  :                 Ref(TK.SELL, 'sell')

tree4:(post)  rules2 := {
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules2')
    3  :     Block(TK.BLOCK, v=[Flow(), Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    5  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    6  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    7  :                     Define(TK.DEFINE, TK.COLN, ':')
    8  :                         Ref(TK.BUY, 'buy')
    9  :                         UnaryOp(TK.ANY, TK.ANY, 'any:')
   10  :                             Define(TK.DEFINE, TK.COLN, ':')
   11  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   12  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   13  :                                         BinOp(TK.GTR, '>')
   14  :                                             Ref(TK.IDNT, 'close')
   15  :                                         FnCall('sma')
   16  :                                             Ref(TK.IDNT, 'sma')
   17  :                                             List(TK.TUPLE, [Int()])
   18  :                                                 Int(TK.INT, 10)
   19  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   20  :                                         BinOp(TK.GTR, '>')
   21  :                                             Ref(TK.IDNT, 'close')
   22  :                                         FnCall('sma')
   23  :                                             Ref(TK.IDNT, 'sma')
   24  :                                             List(TK.TUPLE, [Int()])
   25  :                                                 Int(TK.INT, 20)
   26  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   27  :                                     Ref(TK.IDNT, 'threshold')
   28  :                                     Float(TK.FLOT, 0.01)
   29  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   30  :                         Ref(TK.SIGNAL, 'signal')
   31  :                 FnCall('delay')
   32  :                     Ref(TK.IDNT, 'delay')
   33  :                     List(TK.TUPLE, [Duration()])
   34  :                         Duration(TK.DUR, 1 day, 0:00:00)
   35  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   36  :                 Ref(TK.IDNT, 'atr')
   37  :         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   38  :             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   39  :                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   40  :                     Define(TK.DEFINE, TK.COLN, ':')
   41  :                         Ref(TK.SELL, 'sell')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Get(TK.IDNT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Get(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                         Ref(TK.SIGNAL, 'signal')
   50  :                 FnCall('delay')
   51  :                     Ref(TK.IDNT, 'delay')
   52  :                     List(TK.TUPLE, [Duration()])
   53  :                         Duration(TK.DUR, 1 day, 0:00:00)
   54  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                 Ref(TK.IDNT, 'atr')

tree5:(post)  rules3 := {
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules3')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    6  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    7  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    8  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    9  :                             Define(TK.DEFINE, TK.COLN, ':')
   10  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   12  :                                         BinOp(TK.GTR, '>')
   13  :                                             Ref(TK.IDNT, 'close')
   14  :                                         FnCall('sma')
   15  :                                             Ref(TK.IDNT, 'sma')
   16  :                                             List(TK.TUPLE, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   19  :                                         BinOp(TK.GTR, '>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                         FnCall('sma')
   22  :                                             Ref(TK.IDNT, 'sma')
   23  :                                             List(TK.TUPLE, [Int()])
   24  :                                                 Int(TK.INT, 20)
   25  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   26  :                                     Ref(TK.IDNT, 'threshold')
   27  :                                     Float(TK.FLOT, 0.01)
   28  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   29  :                                 Ref(TK.SIGNAL, 'signal')
   30  :                         FnCall('delay')
   31  :                             Ref(TK.IDNT, 'delay')
   32  :                             List(TK.TUPLE, [Duration()])
   33  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   34  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   35  :                         Ref(TK.IDNT, 'atr')
   36  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   37  :                     Ref(TK.BUY, 'buy')
   38  :         Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   39  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   40  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   41  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Get(TK.IDNT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Get(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                             Ref(TK.SIGNAL, 'signal')
   50  :                     FnCall('delay')
   51  :                         Ref(TK.IDNT, 'delay')
   52  :                         List(TK.TUPLE, [Duration()])
   53  :                             Duration(TK.DUR, 1 day, 0:00:00)
   54  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                     Ref(TK.IDNT, 'atr')
   56  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   57  :                 Ref(TK.SELL, 'sell')

tree6:(post)  rules4 = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'rules4')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    6  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    7  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
    8  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    9  :                             Define(TK.DEFINE, TK.COLN, ':')
   10  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   12  :                                         BinOp(TK.GTR, '>')
   13  :                                             Ref(TK.IDNT, 'close')
   14  :                                         FnCall('sma')
   15  :                                             Ref(TK.IDNT, 'sma')
   16  :                                             List(TK.TUPLE, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   19  :                                         BinOp(TK.GTR, '>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                         FnCall('sma')
   22  :                                             Ref(TK.IDNT, 'sma')
   23  :                                             List(TK.TUPLE, [Int()])
   24  :                                                 Int(TK.INT, 20)
   25  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   26  :                                     Ref(TK.IDNT, 'threshold')
   27  :                                     Float(TK.FLOT, 0.01)
   28  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   29  :                                 Ref(TK.SIGNAL, 'signal')
   30  :                         FnCall('delay')
   31  :                             Ref(TK.IDNT, 'delay')
   32  :                             List(TK.TUPLE, [Duration()])
   33  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   34  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   35  :                         Ref(TK.IDNT, 'atr')
   36  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   37  :                     Ref(TK.BUY, 'buy')
   38  :         Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   39  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   40  :                 Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   41  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Get(TK.IDNT, 'close')
   44  :                             FnCall('sma')
   45  :                                 Get(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                             Ref(TK.SIGNAL, 'signal')
   50  :                     FnCall('delay')
   51  :                         Ref(TK.IDNT, 'delay')
   52  :                         List(TK.TUPLE, [Duration()])
   53  :                             Duration(TK.DUR, 1 day, 0:00:00)
   54  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                     Ref(TK.IDNT, 'atr')
   56  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   57  :                 Ref(TK.SELL, 'sell')

tree7:(post)  def rules5 = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'rules5')
    3  :     Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    4  :         UnaryOp(TK.ANY, TK.ANY, 'any')
    5  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    6  :                 Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    7  :                     Flow(TK.APPLY, v=[Flow(), DefineFn()], '>>')
    8  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    9  :                             Define(TK.DEFINE, TK.COLN, ':')
   10  :                                 Block(TK.BLOCK, v=[Flow(), Flow()], '')
   11  :                                     Flow(TK.CHAIN, v=[BinOp(), DefineFn()], '|')
   12  :                                         BinOp(TK.GTR, '>')
   13  :                                             Ref(TK.IDNT, 'close')
   14  :                                         DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   15  :                                             Ref(TK.IDNT, 'sma')
   16  :                                             List(TK.TUPLE, [Int()])
   17  :                                                 Int(TK.INT, 10)
   18  :                                     Flow(TK.CHAIN, v=[BinOp(), DefineFn()], '|')
   19  :                                         BinOp(TK.GTR, '>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                         DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   22  :                                             Ref(TK.IDNT, 'sma')
   23  :                                             List(TK.TUPLE, [Int()])
   24  :                                                 Int(TK.INT, 20)
   25  :                                 Define(TK.DEFINE, TK.EQLS, '=')
   26  :                                     Ref(TK.IDNT, 'threshold')
   27  :                                     Float(TK.FLOT, 0.01)
   28  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   29  :                                 Ref(TK.SIGNAL, 'signal')
   30  :                         DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   31  :                             Ref(TK.IDNT, 'delay')
   32  :                             List(TK.TUPLE, [Duration()])
   33  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   34  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   35  :                         Ref(TK.IDNT, 'atr')
   36  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   37  :                     Ref(TK.BUY, 'buy')
   38  :         Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   39  :             Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   40  :                 Flow(TK.APPLY, v=[Flow(), DefineFn()], '>>')
   41  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   42  :                         BinOp(TK.FALL_BELOW, '<|')
   43  :                             Ref(TK.IDNT, 'close')
   44  :                             DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   45  :                                 Ref(TK.IDNT, 'sma')
   46  :                                 List(TK.TUPLE, [Int()])
   47  :                                     Int(TK.INT, 10)
   48  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   49  :                             Ref(TK.SIGNAL, 'signal')
   50  :                     DefineFn(TK.DEFINE, TK.FUNCTION, '(')
   51  :                         Ref(TK.IDNT, 'delay')
   52  :                         List(TK.TUPLE, [Duration()])
   53  :                             Duration(TK.DUR, 1 day, 0:00:00)
   54  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   55  :                     Ref(TK.IDNT, 'atr')
   56  :             ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   57  :                 Ref(TK.SELL, 'sell')
