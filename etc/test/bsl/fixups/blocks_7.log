

test: 7:
{ _ : _.left = _.right}:(node)

tree1:  { _ : _.left = _.right}:(node)
    1  : Combine(TK.COMBINE:  None Get(TK.IDENT, 'node'))
    2  :     Block{TK.BLOCK, len=1}
    3  :         Combine(TK.COMBINE: _ None Define(TK.DEFINE, '='))
    4  :             Ref(TK.ANON, '_')
    5  :             Define(TK.DEFINE: PropRef(TK.REF, '.') = PropRef(TK.REF, '.'))
    6  :                 PropRef(TK.REF: _ . Ref(TK.IDENT, 'left'))
    7  :                     Ref(TK.ANON, '_')
    8  :                     Ref(TK.IDENT, 'left')
    9  :                 PropRef(TK.REF: _ . Get(TK.IDENT, 'right'))
   10  :                     Get(TK.ANON, '_')
   11  :                     Get(TK.IDENT, 'right')
   12  :     Get(TK.IDENT, 'node')

tree1:(post)  { _ : _.left = _.right}:(node)
    1  : Combine(TK.COMBINE:  None Get(TK.IDENT, 'node'))
    2  :     Block{TK.BLOCK, len=1}
    3  :         Combine(TK.COMBINE: _ None Define(TK.DEFINE, '='))
    4  :             Ref(TK.ANON, '_')
    5  :             Define(TK.DEFINE: PropRef(TK.REF, '.') = PropRef(TK.REF, '.'))
    6  :                 PropRef(TK.REF: _ . Ref(TK.IDENT, 'left'))
    7  :                     Ref(TK.ANON, '_')
    8  :                     Ref(TK.IDENT, 'left')
    9  :                 PropRef(TK.REF: _ . Get(TK.IDENT, 'right'))
   10  :                     Get(TK.ANON, '_')
   11  :                     Get(TK.IDENT, 'right')
   12  :     Get(TK.IDENT, 'node')
