

test:
# datasets:
pd = dataset()

df = {
    "one": Series( rand(3) ) : { index=["a", "b", "c"] },

    "two": Series( rand(4) ) : index=["a", "b", "c", "d"],

    "three": Series( rand(3), index=["b", "c", "d"] ),
}

# would be nice if df was already a dataframe from the decl above.
pd = dataset(df)

# future definition with generators?
df = {
    "one": { rand(3) => _ } : index=['a', 'b', 'c']
}


tree1:  pd = dataset()
    1  : Define(TK.DEFINE: pd = FnCall(TK.FUNCTION, 'dataset'))
    2  :     Ref(TK.IDENT, 'pd')
    3  :     FnCall('dataset')
    4  :         Get(TK.IDENT, 'dataset')
    5  :         List(TK.LIST, [])

tree2:  df = {
    1  : Define(TK.DEFINE: df = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'df')
    3  :     Block{TK.BLOCK, len=3}
    4  :         Combine(TK.COMBINE: one None DefineFn(TK.COMBINE, ':'))
    5  :             Str(TK.STR, 'one')
    6  :             DefineFn(TK.COMBINE: Series : Block(TK.BLOCK, ''))
    7  :                 Ref(TK.IDENT, 'Series')
    8  :                 Block{TK.BLOCK, len=1}
    9  :                     Define(TK.DEFINE: index = Generate(TK.GEN, ''))
   10  :                         Ref(TK.IDENT, 'index')
   11  :                         Generate(TK.LIST, len=3)
   12  :                             Str(TK.STR, 'a')
   13  :                             Str(TK.STR, 'b')
   14  :                             Str(TK.STR, 'c')
   15  :                 List(TK.LIST, [FnCall()])
   16  :                     FnCall('rand')
   17  :                         Ref(TK.IDENT, 'rand')
   18  :                         List(TK.LIST, [Int()])
   19  :                             Int(TK.INT, 3)
   20  :         Combine(TK.COMBINE: two None DefineFn(TK.COMBINE, ':'))
   21  :             Str(TK.STR, 'two')
   22  :             DefineFn(TK.COMBINE: Series : Define(TK.DEFINE, '='))
   23  :                 Ref(TK.IDENT, 'Series')
   24  :                 Define(TK.DEFINE: index = Generate(TK.GEN, ''))
   25  :                     Ref(TK.IDENT, 'index')
   26  :                     Generate(TK.LIST, len=4)
   27  :                         Str(TK.STR, 'a')
   28  :                         Str(TK.STR, 'b')
   29  :                         Str(TK.STR, 'c')
   30  :                         Str(TK.STR, 'd')
   31  :                 List(TK.LIST, [FnCall()])
   32  :                     FnCall('rand')
   33  :                         Ref(TK.IDENT, 'rand')
   34  :                         List(TK.LIST, [Int()])
   35  :                             Int(TK.INT, 4)
   36  :         Combine(TK.COMBINE: three None FnCall(TK.FUNCTION, 'Series'))
   37  :             Str(TK.STR, 'three')
   38  :             FnCall('Series')
   39  :                 Get(TK.IDENT, 'Series')
   40  :                 Generate(TK.NAMEDTUPLE, len=2)
   41  :                     FnCall('rand')
   42  :                         Get(TK.IDENT, 'rand')
   43  :                         List(TK.LIST, [Int()])
   44  :                             Int(TK.INT, 3)
   45  :                     Define(TK.DEFINE: index = Generate(TK.GEN, ''))
   46  :                         Ref(TK.IDENT, 'index')
   47  :                         Generate(TK.LIST, len=3)
   48  :                             Str(TK.STR, 'b')
   49  :                             Str(TK.STR, 'c')
   50  :                             Str(TK.STR, 'd')

tree3:  pd = dataset(df)
    1  : Define(TK.DEFINE: pd = FnCall(TK.FUNCTION, 'dataset'))
    2  :     Ref(TK.IDENT, 'pd')
    3  :     FnCall('dataset')
    4  :         Get(TK.IDENT, 'dataset')
    5  :         List(TK.LIST, [Get()])
    6  :             Get(TK.IDENT, 'df')

tree4:  df = {
    1  : Define(TK.DEFINE: df = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'df')
    3  :     Block{TK.BLOCK, len=1}
    4  :         Combine(TK.COMBINE: one None Combine(TK.DEFINE, 'None'))
    5  :             Str(TK.STR, 'one')
    6  :             Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    7  :                 Block{TK.BLOCK, len=1}
    8  :                     DefineFn(TK.PRODUCE: rand => Ref(TK.ANON, '_'))
    9  :                         Ref(TK.IDENT, 'rand')
   10  :                         Ref(TK.ANON, '_')
   11  :                         List(TK.LIST, [Int()])
   12  :                             Int(TK.INT, 3)
   13  :                 Define(TK.DEFINE: index = Generate(TK.GEN, ''))
   14  :                     Ref(TK.IDENT, 'index')
   15  :                     Generate(TK.LIST, len=3)
   16  :                         Str(TK.STR, 'a')
   17  :                         Str(TK.STR, 'b')
   18  :                         Str(TK.STR, 'c')

tree1:(post)  pd = dataset()
    1  : Define(TK.DEFINE: pd = FnCall(TK.FUNCTION, 'dataset'))
    2  :     Ref(TK.IDENT, 'pd')
    3  :     FnCall('dataset')
    4  :         Get(TK.IDENT, 'dataset')
    5  :         List(TK.LIST, [])

tree2:(post)  df = {
    1  : Define(TK.DEFINE: df = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'df')
    3  :     Block{TK.BLOCK, len=3}
    4  :         Combine(TK.COMBINE: one None DefineFn(TK.COMBINE, ':'))
    5  :             Str(TK.STR, 'one')
    6  :             DefineFn(TK.COMBINE: Series : Block(TK.BLOCK, ''))
    7  :                 Ref(TK.IDENT, 'Series')
    8  :                 Block{TK.BLOCK, len=1}
    9  :                     Define(TK.DEFINE: index = Generate(TK.GEN, ''))
   10  :                         Ref(TK.IDENT, 'index')
   11  :                         Generate(TK.LIST, len=3)
   12  :                             Str(TK.STR, 'a')
   13  :                             Str(TK.STR, 'b')
   14  :                             Str(TK.STR, 'c')
   15  :                 List(TK.LIST, [FnCall()])
   16  :                     FnCall('rand')
   17  :                         Ref(TK.IDENT, 'rand')
   18  :                         List(TK.LIST, [Int()])
   19  :                             Int(TK.INT, 3)
   20  :         Combine(TK.COMBINE: two None DefineFn(TK.COMBINE, ':'))
   21  :             Str(TK.STR, 'two')
   22  :             DefineFn(TK.COMBINE: Series : Define(TK.DEFINE, '='))
   23  :                 Ref(TK.IDENT, 'Series')
   24  :                 Define(TK.DEFINE: index = Generate(TK.GEN, ''))
   25  :                     Ref(TK.IDENT, 'index')
   26  :                     Generate(TK.LIST, len=4)
   27  :                         Str(TK.STR, 'a')
   28  :                         Str(TK.STR, 'b')
   29  :                         Str(TK.STR, 'c')
   30  :                         Str(TK.STR, 'd')
   31  :                 List(TK.LIST, [FnCall()])
   32  :                     FnCall('rand')
   33  :                         Ref(TK.IDENT, 'rand')
   34  :                         List(TK.LIST, [Int()])
   35  :                             Int(TK.INT, 4)
   36  :         Combine(TK.COMBINE: three None FnCall(TK.FUNCTION, 'Series'))
   37  :             Str(TK.STR, 'three')
   38  :             FnCall('Series')
   39  :                 Get(TK.IDENT, 'Series')
   40  :                 Generate(TK.NAMEDTUPLE, len=2)
   41  :                     FnCall('rand')
   42  :                         Get(TK.IDENT, 'rand')
   43  :                         List(TK.LIST, [Int()])
   44  :                             Int(TK.INT, 3)
   45  :                     Define(TK.DEFINE: index = Generate(TK.GEN, ''))
   46  :                         Ref(TK.IDENT, 'index')
   47  :                         Generate(TK.LIST, len=3)
   48  :                             Str(TK.STR, 'b')
   49  :                             Str(TK.STR, 'c')
   50  :                             Str(TK.STR, 'd')

tree3:(post)  pd = dataset(df)
    1  : Define(TK.DEFINE: pd = FnCall(TK.FUNCTION, 'dataset'))
    2  :     Ref(TK.IDENT, 'pd')
    3  :     FnCall('dataset')
    4  :         Get(TK.IDENT, 'dataset')
    5  :         List(TK.LIST, [Get()])
    6  :             Get(TK.IDENT, 'df')

tree4:(post)  df = {
    1  : Define(TK.DEFINE: df = Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'df')
    3  :     Block{TK.BLOCK, len=1}
    4  :         Combine(TK.COMBINE: one None Combine(TK.DEFINE, 'None'))
    5  :             Str(TK.STR, 'one')
    6  :             Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    7  :                 Block{TK.BLOCK, len=1}
    8  :                     DefineFn(TK.PRODUCE: rand => Ref(TK.ANON, '_'))
    9  :                         Ref(TK.IDENT, 'rand')
   10  :                         Ref(TK.ANON, '_')
   11  :                         List(TK.LIST, [Int()])
   12  :                             Int(TK.INT, 3)
   13  :                 Define(TK.DEFINE: index = Generate(TK.GEN, ''))
   14  :                     Ref(TK.IDENT, 'index')
   15  :                     Generate(TK.LIST, len=3)
   16  :                         Str(TK.STR, 'a')
   17  :                         Str(TK.STR, 'b')
   18  :                         Str(TK.STR, 'c')
