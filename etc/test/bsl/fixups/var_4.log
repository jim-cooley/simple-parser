

test: 4:
f.a(x) = { var a(x):x*x }

tree1:  f.a(x) = { var a(x):x*x }
    1  : Define(TK.DEFINE: PropRef(TK.REF, '.') = Block(TK.BLOCK, ''))
    2  :     PropRef(TK.REF: f . FnRef(TK.FUNCTION, 'a'))
    3  :         Ref(TK.IDENT, 'f')
    4  :         FnRef(TK.FUNCTION, 'a')
    5  :             Ref(TK.IDENT, 'a')
    6  :             List(TK.LIST, [Ref()])
    7  :                 Ref(TK.IDENT, 'x')
    8  :     Block{TK.BLOCK, len=1}
    9  :         DefineVarFn(TK.COMBINE: a : BinOp(TK.MUL, '*'))
   10  :             Ref(TK.IDENT, 'a')
   11  :             BinOp(TK.MUL, '*')
   12  :                 Ref(TK.IDENT, 'x')
   13  :                 Ref(TK.IDENT, 'x')
   14  :             List(TK.LIST, [Ref()])
   15  :                 Ref(TK.IDENT, 'x')

tree1:(post)  f.a(x) = { var a(x):x*x }
    1  : Define(TK.DEFINE: PropRef(TK.REF, '.') = Block(TK.BLOCK, ''))
    2  :     PropRef(TK.REF: f . FnRef(TK.FUNCTION, 'a'))
    3  :         Ref(TK.IDENT, 'f')
    4  :         FnRef(TK.FUNCTION, 'a')
    5  :             Ref(TK.IDENT, 'a')
    6  :             List(TK.LIST, [Ref()])
    7  :                 Ref(TK.IDENT, 'x')
    8  :     Block{TK.BLOCK, len=1}
    9  :         DefineVarFn(TK.COMBINE: a : BinOp(TK.MUL, '*'))
   10  :             Ref(TK.IDENT, 'a')
   11  :             BinOp(TK.MUL, '*')
   12  :                 Ref(TK.IDENT, 'x')
   13  :                 Ref(TK.IDENT, 'x')
   14  :             List(TK.LIST, [Ref()])
   15  :                 Ref(TK.IDENT, 'x')
