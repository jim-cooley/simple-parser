

test: 13:
{ b }:{node} => {b.left = b.right}

tree1:  { b }:{node} => {b.left = b.right}
    1  : Flow(TK.PRODUCE, v=[Define(), Block()], '=>')
    2  :     Define(TK.DEFINE, TK.COLN, ':')
    3  :         Set(TK.SET, [Ref()])
    4  :             Ref(TK.IDNT, 'b')
    5  :         Set(TK.SET, [Get()])
    6  :             Get(TK.IDNT, 'node')
    7  :     Block(TK.BLOCK, v=[Define()], '')
    8  :         Define(TK.DEFINE, TK.EQLS, '=')
    9  :             PropRef(TK.REF, '.')
   10  :                 Ref(TK.IDNT, 'b')
   11  :                 Ref(TK.IDNT, 'left')
   12  :             PropRef(TK.REF, '.')
   13  :                 Ref(TK.IDNT, 'b')
   14  :                 Ref(TK.IDNT, 'right')

tree1:(post)  { b }:{node} => {b.left = b.right}
result: list([Define(), Block()])
    1  : Flow(TK.PRODUCE, v=[Define(), Block()], '=>')
    2  :     Define(TK.DEFINE, TK.COLN, ':')
    3  :         Set(TK.SET, [Ref()])
    4  :             Ref(TK.IDNT, 'b')
    5  :         Set(TK.SET, [Get()])
    6  :             Get(TK.IDNT, 'node')
    7  :     Block(TK.BLOCK, v=[Define()], '')
    8  :         Define(TK.DEFINE, TK.EQLS, '=')
    9  :             PropRef(TK.REF, '.')
   10  :                 Ref(TK.IDNT, 'b')
   11  :                 Ref(TK.IDNT, 'left')
   12  :             PropRef(TK.REF, '.')
   13  :                 Ref(TK.IDNT, 'b')
   14  :                 Ref(TK.IDNT, 'right')
