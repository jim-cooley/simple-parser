

test: 12:
close >| sma(10) and close <| sma(20) | signal

tree1:  close >| sma(10) and close <| sma(20) | signal
    1  : Flow(TK.CHAIN, v=[BinOp(), BinOp(), ApplyChainProd()], '|')
    2  :     BinOp(TK.GTR, '>')
    3  :         Get(TK.IDENT, 'close')
    4  :     BinOp(TK.AND, 'and')
    5  :         FnCall('sma')
    6  :             Ref(TK.IDENT, 'sma')
    7  :             List(TK.LIST, [Int()])
    8  :                 Int(TK.INT, 10)
    9  :         BinOp(TK.FALL_BELOW, '<|')
   10  :             Ref(TK.IDENT, 'close')
   11  :             FnCall('sma')
   12  :                 Ref(TK.IDENT, 'sma')
   13  :                 List(TK.LIST, [Int()])
   14  :                     Int(TK.INT, 20)
   15  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   16  :         Ref(TK.IDENT, 'signal')

tree1:(post)  close >| sma(10) and close <| sma(20) | signal
result: list([BinOp(), BinOp(), ApplyChainProd()])
    1  : Flow(TK.CHAIN, v=[BinOp(), BinOp(), ApplyChainProd()], '|')
    2  :     BinOp(TK.GTR, '>')
    3  :         Get(TK.IDENT, 'close')
    4  :     BinOp(TK.AND, 'and')
    5  :         FnCall('sma')
    6  :             Ref(TK.IDENT, 'sma')
    7  :             List(TK.LIST, [Int()])
    8  :                 Int(TK.INT, 10)
    9  :         BinOp(TK.FALL_BELOW, '<|')
   10  :             Ref(TK.IDENT, 'close')
   11  :             FnCall('sma')
   12  :                 Ref(TK.IDENT, 'sma')
   13  :                 List(TK.LIST, [Int()])
   14  :                     Int(TK.INT, 20)
   15  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   16  :         Ref(TK.IDENT, 'signal')
