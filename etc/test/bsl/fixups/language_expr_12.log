

test: 12:
"close >| sma(10) and close <| sma(20) | signal"

tree1:  close >| sma(10) and close <| sma(20) | signal
result: list([BinOp(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
    2 :     BinOp TK.AND(BINOP, 'and', V=None)
    3 :         BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    4 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
    5 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    7 :                 List TK.TUPLE(LITERAL, '(', V=[Int()])
    8 :                     Int TK.INT(LITERAL, '10', V=10)
    9 :         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   10 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
   11 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   12 :                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   13 :                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   14 :                     Int TK.INT(LITERAL, '20', V=20)
   15 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   16 :         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)

tree1:(post)  close >| sma(10) and close <| sma(20) | signal
result: list([BinOp(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
    2 :     BinOp TK.AND(BINOP, 'and', V=None)
    3 :         BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    4 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
    5 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    7 :                 List TK.TUPLE(LITERAL, '(', V=[Int()])
    8 :                     Int TK.INT(LITERAL, '10', V=10)
    9 :         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   10 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
   11 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   12 :                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   13 :                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   14 :                     Int TK.INT(LITERAL, '20', V=20)
   15 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   16 :         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
