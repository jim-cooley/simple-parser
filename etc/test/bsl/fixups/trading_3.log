

test: 3:
any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy

tree1:  any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Flow{TK.APPLY, '>>' len=2}
    3  :         Flow{TK.CHAIN, '|' len=2}
    4  :             UnaryOp(TK.ANY, 'any')
    5  :                 Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    6  :                     Block{TK.BLOCK, len=2}
    7  :                         Flow{TK.CHAIN, '|' len=2}
    8  :                             BinOp(TK.GTR, '>')
    9  :                                 Get(TK.IDENT, 'close')
   10  :                             FnCall('sma')
   11  :                                 Ref(TK.IDENT, 'sma')
   12  :                                 List(TK.LIST, [Int()])
   13  :                                     Int(TK.INT, 10)
   14  :                         Flow{TK.CHAIN, '|' len=2}
   15  :                             BinOp(TK.GTR, '>')
   16  :                                 Get(TK.IDENT, 'close')
   17  :                             FnCall('sma')
   18  :                                 Ref(TK.IDENT, 'sma')
   19  :                                 List(TK.LIST, [Int()])
   20  :                                     Int(TK.INT, 20)
   21  :                     Define(TK.DEFINE: threshold = 0.01)
   22  :                         Ref(TK.IDENT, 'threshold')
   23  :                         Float(TK.FLOT, 0.01)
   24  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   25  :                 Ref(TK.IDENT, 'signal')
   26  :         FnCall('delay')
   27  :             Ref(TK.IDENT, 'delay')
   28  :             List(TK.LIST, [Duration()])
   29  :                 Duration(TK.DUR, 1 day, 0:00:00)
   30  :     DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   31  :         Ref(TK.IDENT, 'atr')
   32  :         Ref(TK.IDENT, 'buy')

tree1:(post)  any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy
result: list([Flow(), DefineFn()])
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Flow{TK.APPLY, '>>' len=2}
    3  :         Flow{TK.CHAIN, '|' len=2}
    4  :             UnaryOp(TK.ANY, 'any')
    5  :                 Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
    6  :                     Block{TK.BLOCK, len=2}
    7  :                         Flow{TK.CHAIN, '|' len=2}
    8  :                             BinOp(TK.GTR, '>')
    9  :                                 Get(TK.IDENT, 'close')
   10  :                             FnCall('sma')
   11  :                                 Ref(TK.IDENT, 'sma')
   12  :                                 List(TK.LIST, [Int()])
   13  :                                     Int(TK.INT, 10)
   14  :                         Flow{TK.CHAIN, '|' len=2}
   15  :                             BinOp(TK.GTR, '>')
   16  :                                 Get(TK.IDENT, 'close')
   17  :                             FnCall('sma')
   18  :                                 Ref(TK.IDENT, 'sma')
   19  :                                 List(TK.LIST, [Int()])
   20  :                                     Int(TK.INT, 20)
   21  :                     Define(TK.DEFINE: threshold = 0.01)
   22  :                         Ref(TK.IDENT, 'threshold')
   23  :                         Float(TK.FLOT, 0.01)
   24  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   25  :                 Ref(TK.IDENT, 'signal')
   26  :         FnCall('delay')
   27  :             Ref(TK.IDENT, 'delay')
   28  :             List(TK.LIST, [Duration()])
   29  :                 Duration(TK.DUR, 1 day, 0:00:00)
   30  :     DefineFn(TK.PRODUCE: atr => Ref(TK.IDENT, 'buy'))
   31  :         Ref(TK.IDENT, 'atr')
   32  :         Ref(TK.IDENT, 'buy')
