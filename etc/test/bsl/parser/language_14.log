

test: 14: "close >| sma(10) and close <| sma(20) | signal >> open.delay(1d) | buy"

tree1:  close >| sma(10) and close <| sma(20) | signal >> open.delay(1d) | buy
result: list([List(), PropRef()])
    1 : List TK.CHAIN(LIST, '|', V=[List(), Ident()])
    2 :     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
    3 :         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
    4 :             BinOp TK.AND(BINOP, 'and', V=None)
    5 :                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    6 :                     Ident TK.IDNT(DATASET, 'close', V=close)
    7 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
    8 :                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
    9 :                         List TK.TUPLE(LIST, '(', V=[Int()])
   10 :                             Int TK.INT(LITERAL, '10', V=10)
   11 :                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   12 :                     Ident TK.IDNT(DATASET, 'close', V=close)
   13 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   15 :                         List TK.TUPLE(LIST, '(', V=[Int()])
   16 :                             Int TK.INT(LITERAL, '20', V=20)
   17 :             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   18 :         PropRef TK.REF(BINOP, '.', V=None)
   19 :             Ident TK.IDNT(DATASET, 'open', V=open)
   20 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   21 :                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   22 :                 List TK.TUPLE(LIST, '(', V=[Duration()])
   23 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   24 :     Ident TK.BUY(KEYWORD, 'buy', V=buy)
