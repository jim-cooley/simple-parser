

test: 7:
(close.sma(20) and close.sma(50)) | diff | sign | signal(how='cross')

tree1:  (close.sma(20) and close.sma(50)) | diff | sign | signal(how='cross')
    1  : Flow(TK.CHAIN, v=[BinOp(), Ref(), Ref(), FnCall()], '|')
    2  :     BinOp(TK.AND, 'and')
    3  :         PropRef(TK.REF, '.')
    4  :             Get(TK.IDNT, 'close')
    5  :             FnCall('sma')
    6  :                 Get(TK.IDNT, 'sma')
    7  :                 List(TK.LIST, [Int()])
    8  :                     Int(TK.INT, 20)
    9  :         PropRef(TK.REF, '.')
   10  :             Get(TK.IDNT, 'close')
   11  :             FnCall('sma')
   12  :                 Get(TK.IDNT, 'sma')
   13  :                 List(TK.LIST, [Int()])
   14  :                     Int(TK.INT, 50)
   15  :     Ref(TK.IDNT, 'diff')
   16  :     Ref(TK.IDNT, 'sign')
   17  :     FnCall('signal')
   18  :         Ref(TK.IDNT, 'signal')
   19  :         List(TK.LIST, [Define()])
   20  :             Define(TK.DEFINE, TK.DEFINE, '=')
   21  :                 Ref(TK.IDNT, 'how')
   22  :                 Str(TK.STR, cross)
