

test: 7:
(close.sma(20) and close.sma(50)) | diff | sign | signal(how='cross')

tree1:  (close.sma(20) and close.sma(50)) | diff | sign | signal(how='cross')
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     BinOp(TK.AND, 'and')
    3  :         PropCall(TK.PROPCALL, 'close')
    4  :             Get(TK.IDENT, 'close')
    5  :             List(TK.LIST, [Int()])
    6  :                 Int(TK.INT, 20)
    7  :         PropCall(TK.PROPCALL, 'close')
    8  :             Get(TK.IDENT, 'close')
    9  :             List(TK.LIST, [Int()])
   10  :                 Int(TK.INT, 50)
   11  :     Ref(TK.IDENT, 'diff')
   12  :     Ref(TK.IDENT, 'sign')
   13  :     FnCall('signal')
   14  :         Ref(TK.IDENT, 'signal')
   15  :         List(TK.LIST, [Define()])
   16  :             Define(TK.DEFINE: how = cross)
   17  :                 Ref(TK.IDENT, 'how')
   18  :                 Str(TK.STR, 'cross')
