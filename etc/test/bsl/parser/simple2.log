

test: "# sample rules file for pyser / qtradr
%%backtest [period='train5', rules=rules]

atr := (high + low) / 2
median_price := (open + close) / 2
trade_size := position * 10%

def buy = { position += trade_size }
def sell = { position -= trade_size }

rules => {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

%%report {report}

"

tree1:
    1 : Command TK.COMMAND(UNARY, '%%', V=None)
    2 :     Index TK.INDEX(BINOP, '[', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'backtest', V=None)
    4 :         List TK.INDEX(LIST, '[', V=[BinOp(), BinOp()])
    5 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'period', V=None)
    7 :                 Str TK.STR(LITERAL, 'train5', V=train5)
    8 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
    9 :                 Ident TK.IDNT(IDENTIFIER, 'rules', V=None)
   10 :                 Ident TK.IDNT(IDENTIFIER, 'rules', V=None)

tree2:

tree3:
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'atr', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'high', V=None)
    6 :             Ident TK.IDNT(DATASET, 'low', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree4:
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'median_price', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'open', V=None)
    6 :             Ident TK.IDNT(DATASET, 'close', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree5:
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'trade_size', V=None)
    3 :     BinOp TK.MUL(BINOP, '*', V=None)
    4 :         Ident TK.IDNT(IDENTIFIER, 'position', V=None)
    5 :         Percent TK.PCT(LITERAL, '10%', V=0.1)

tree6:

tree7:

tree8:
    1 : UnaryOp TK.DEFINE(UNARY, 'def', V=None)
    2 :     BinOp TK.ASSIGN(BINOP, '=', V=None)
    3 :         Ident TK.BUY(KEYWORD, 'buy', V=None)
    4 :         Set TK.SET(SET, '{', V=[BinOp()])
    5 :             BinOp TK.PLEQ(BINOP, '+=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'position', V=None)
    7 :                 Ident TK.IDNT(IDENTIFIER, 'trade_size', V=None)

tree9:
    1 : UnaryOp TK.DEFINE(UNARY, 'def', V=None)
    2 :     BinOp TK.ASSIGN(BINOP, '=', V=None)
    3 :         Ident TK.SELL(KEYWORD, 'sell', V=None)
    4 :         Set TK.SET(SET, '{', V=[BinOp()])
    5 :             BinOp TK.MNEQ(BINOP, '-=', V=None)
    6 :                 Ident TK.IDNT(IDENTIFIER, 'position', V=None)
    7 :                 Ident TK.IDNT(IDENTIFIER, 'trade_size', V=None)

tree10:
    1 : List TK.RAISE(LIST, '=>', V=[Ident(), Set()])
    2 :     Ident TK.IDNT(IDENTIFIER, 'rules', V=None)
    3 :     Set TK.SET(SET, '{', V=[List(), List()])
    4 :         List TK.RAISE(LIST, '=>', V=[List(), Ident()])
    5 :             List TK.PIPE(LIST, '|', V=[List(), Ident()])
    6 :                 List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
    7 :                     List TK.PIPE(LIST, '|', V=[BinOp(), Ident()])
    8 :                         BinOp TK.TUPLE(BINOP, ':', V=None)
    9 :                             BinOp TK.TUPLE(BINOP, ':', V=None)
   10 :                                 UnaryOp TK.ANY(UNARY, 'any', V=None)
   11 :                                 Set TK.SET(SET, '{', V=[BinOp(), BinOp()])
   12 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   13 :                                         Ident TK.IDNT(DATASET, 'close', V=None)
   14 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   15 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=None)
   16 :                                             List TK.PARAMETER_LIST(LIST, '(', V=[Int()])
   17 :                                                 Int TK.INT(LITERAL, '10', V=10)
   18 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   19 :                                         Ident TK.IDNT(DATASET, 'close', V=None)
   20 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   21 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=None)
   22 :                                             List TK.PARAMETER_LIST(LIST, '(', V=[Int()])
   23 :                                                 Int TK.INT(LITERAL, '20', V=20)
   24 :                             BinOp TK.ASSIGN(BINOP, '=', V=None)
   25 :                                 Ident TK.IDNT(IDENTIFIER, 'threshold', V=None)
   26 :                                 Float TK.FLOT(LITERAL, '0.01', V=0.01)
   27 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=None)
   28 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                         Ident TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                         List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
   31 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                 Ident TK.IDNT(IDENTIFIER, 'atr', V=None)
   33 :             Ident TK.BUY(KEYWORD, 'buy', V=None)
   34 :         List TK.RAISE(LIST, '->', V=[List(), Ident()])
   35 :             List TK.PIPE(LIST, '|', V=[List(), Ident()])
   36 :                 List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   37 :                     List TK.PIPE(LIST, '|', V=[BinOp(), Ident()])
   38 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   39 :                             Ident TK.IDNT(DATASET, 'close', V=None)
   40 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   41 :                                 Ident TK.IDNT(FUNCTION, 'sma', V=None)
   42 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Int()])
   43 :                                     Int TK.INT(LITERAL, '10', V=10)
   44 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=None)
   45 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   46 :                         Ident TK.IDNT(IDENTIFIER, 'delay', V=None)
   47 :                         List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
   48 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   49 :                 Ident TK.IDNT(IDENTIFIER, 'atr', V=None)
   50 :             Ident TK.SELL(KEYWORD, 'sell', V=None)

tree11:

tree12:
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=None)
    3 :     Set TK.SET(SET, '{', V=[List()])
    4 :         List TK.PIPE(LIST, '|', V=[Ident(), FnCall()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'trades', V=None)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ident TK.FUNCTION(KEYWORD, 'select', V=None)
    8 :                 List TK.PARAMETER_LIST(LIST, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree13:

tree14:
    1 : List TK.COMMAND(LIST, '%%', V=[None, Ident()])
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=None)

tree15:
    1 : Set TK.SET(SET, '{', V=[Ident()])
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=None)

tree16:

tree17:
