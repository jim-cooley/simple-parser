

test:
# sample rules file for pyser / qtradr
%%backtest (period='train5', rules=rules)

atr := (high + low) / 2
median_price := (open + close) / 2
trade_size := position * 10%

def buy = { position += trade_size }
def sell = { position -= trade_size }

rules => {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules2 := {
    buy: any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
    sell: close <| sma(10) | signal >> delay(1d) | atr
}
rules3 := {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules4 = {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
def rules5 = {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

%%report (report)



tree1:  atr := (high + low) / 2
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'high', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'low', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree2:  median_price := (open + close) / 2
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'median_price', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'open', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree3:  trade_size := position * 10%
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'trade_size', V=None)
    3 :     BinOp TK.MUL(BINOP, '*', V=None)
    4 :         Get TK.IDNT(IDENTIFIER, 'position', V=None)
    5 :         Percent TK.PCT(LITERAL, '10%', V=0.1)

tree4:  def buy = { position += trade_size }
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Assign()])
    4 :         Assign TK.PLEQ(NONE, '+=', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'position', V=None)
    6 :             Ref TK.IDNT(IDENTIFIER, 'trade_size', V=None)

tree5:  def sell = { position -= trade_size }
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.SELL(IDENTIFIER, 'sell', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Assign()])
    4 :         Assign TK.MNEQ(NONE, '-=', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'position', V=None)
    6 :             Ref TK.IDNT(IDENTIFIER, 'trade_size', V=None)

tree6:  rules => {
    1 : Flow TK.PRODUCE(NONE, '=>', V=[Get(), Block()])
    2 :     Get TK.IDNT(IDENTIFIER, 'rules', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    4 :         UnaryOp TK.ANY(UNARY, 'any', V=None)
    5 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    7 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    8 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    9 :                             Define TK.COLN(NONE, ':', V=None)
   10 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 Define TK.EQLS(BINOP, '=', V=None)
   24 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   27 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   28 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   31 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   34 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   35 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   36 :         Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   37 :             Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   38 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   39 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   49 :                         Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                         List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   54 :             ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   55 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree7:  rules2 := {
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules2', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
    4 :         Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    5 :             Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    7 :                     Define TK.COLN(NONE, ':', V=None)
    8 :                         Ref TK.BUY(IDENTIFIER, 'buy', V=None)
    9 :                         UnaryOp TK.ANY(UNARY, 'any:', V=None)
   10 :                             Define TK.COLN(NONE, ':', V=None)
   11 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   12 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   13 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   14 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   15 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   16 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   17 :                                                 Int TK.INT(LITERAL, '10', V=10)
   18 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   19 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   20 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   21 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   22 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   23 :                                                 Int TK.INT(LITERAL, '20', V=20)
   24 :                                 Define TK.EQLS(BINOP, '=', V=None)
   25 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   26 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   27 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   28 :                         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   29 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   30 :                     Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   31 :                     List TK.TUPLE(LITERAL, '(', V=[Duration()])
   32 :                         Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   33 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   34 :                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   35 :         Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   36 :             Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   37 :                 Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
   38 :                     Define TK.COLN(NONE, ':', V=None)
   39 :                         Ref TK.SELL(IDENTIFIER, 'sell', V=None)
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Get TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   49 :                     Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                     List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                         Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)

tree8:  rules3 := {
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules3', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    4 :         UnaryOp TK.ANY(UNARY, 'any', V=None)
    5 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    7 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    8 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    9 :                             Define TK.COLN(NONE, ':', V=None)
   10 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 Define TK.EQLS(BINOP, '=', V=None)
   24 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   27 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   28 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   31 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   34 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   35 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   36 :         Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   37 :             Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   38 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   39 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Get TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   49 :                         Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                         List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   54 :             ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   55 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree9:  rules4 = {
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules4', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    4 :         UnaryOp TK.ANY(UNARY, 'any', V=None)
    5 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    7 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    8 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    9 :                             Define TK.COLN(NONE, ':', V=None)
   10 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 Define TK.EQLS(BINOP, '=', V=None)
   24 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   27 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   28 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   31 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   34 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   35 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   36 :         Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   37 :             Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   38 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   39 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Get TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   49 :                         Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                         List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   54 :             ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   55 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree10:  def rules5 = {
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules5', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    4 :         UnaryOp TK.ANY(UNARY, 'any', V=None)
    5 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    7 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), DefineFn()])
    8 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    9 :                             Define TK.COLN(NONE, ':', V=None)
   10 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                                         DefineFn TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                                         DefineFn TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 Define TK.EQLS(BINOP, '=', V=None)
   24 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   27 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   28 :                         DefineFn TK.FUNCTION(BINOP, '(', V=None)
   29 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   31 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   34 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   35 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   36 :         Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   37 :             Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   38 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), DefineFn()])
   39 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             DefineFn TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                     DefineFn TK.FUNCTION(BINOP, '(', V=None)
   49 :                         Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                         List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   54 :             ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   55 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree11:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow()])
    4 :         Flow TK.CHAIN(NONE, '|', V=[Get(), FnCall()])
    5 :             Get TK.IDNT(IDENTIFIER, 'trades', V=None)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ref TK.IDNT(IDENTIFIER, 'select', V=None)
    8 :                 List TK.TUPLE(LITERAL, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree1:  %%backtest (period='train5', rules=rules)

tree2:  %%report (report)
