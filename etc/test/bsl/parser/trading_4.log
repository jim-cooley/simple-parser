

test: 4:
"close <| sma(10) | signal >> delay(1d) | atr => sell"

tree1:  close <| sma(10) | signal >> delay(1d) | atr => sell
result: list([Flow(), ApplyChainProd()])
    1 : Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    3 :         Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    4 :             Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
    5 :                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
    6 :                     Get TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
    8 :                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    9 :                         List TK.TUPLE(LITERAL, '(', V=[Int()])
   10 :                             Int TK.INT(LITERAL, '10', V=10)
   11 :                 ApplyChainProd TK.APPLY(UNARY, '', V=None)
   12 :                     Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   13 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                 Get TK.IDNT(IDENTIFIER, 'delay', V=None)
   15 :                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
   16 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   17 :         ApplyChainProd TK.APPLY(UNARY, '', V=None)
   18 :             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   19 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   20 :         Ref TK.SELL(IDENTIFIER, 'sell', V=None)
