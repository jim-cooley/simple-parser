

test:
# sample rules file for pyser / qtradr
#
periods = {
    train: (today-2y)..today
}
sma_period = [3,5,10..20,28]

read('quotes.csv', format='csv') | close


# productions: new datasets
report := { trades | columns('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') | print }


rules: {
    baseline = {
        buy: any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
        sell: close <| sma(10) | signal >> delay(1d) | atr
    },
    scenario = {
        buy: { close >| sma(sma_period) } | signal >> atr.delay(1d),
        sell: close <| sma(sma_period) | signal >> atr.delay(1d)
    }
}


tree1:  periods = {
    1  : Define(TK.DEFINE: periods = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'periods')
    3  :     Generate(TK.DATAFRAME, len=1)
    4  :         Combine(TK.COMBINE: train None GenerateRange(TK.GEN, ''))
    5  :             Ref(TK.IDENT, 'train')
    6  :             GenerateRange(TK.RANGE, len=3)
    7  :                 BinOp(TK.SUB, '-')
    8  :                     Get(TK.IDENT, 'today')
    9  :                     Duration(TK.DUR, 730 days, 0:00:00)
   10  :                 Get(TK.IDENT, 'today')

tree2:  sma_period = [3,5,10..20,28]
    1  : Define(TK.DEFINE: sma_period = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'sma_period')
    3  :     Generate(TK.LIST, len=4)
    4  :         Int(TK.INT, 3)
    5  :         Int(TK.INT, 5)
    6  :         GenerateRange(TK.RANGE, len=3)
    7  :             Int(TK.INT, 10)
    8  :             Int(TK.INT, 20)
    9  :         Int(TK.INT, 28)

tree3:  read('quotes.csv', format='csv') | close
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     FnCall('read')
    3  :         Get(TK.IDENT, 'read')
    4  :         Generate(TK.NAMEDTUPLE, len=2)
    5  :             Str(TK.STR, 'quotes.csv')
    6  :             Define(TK.DEFINE: format = csv)
    7  :                 Ref(TK.IDENT, 'format')
    8  :                 Str(TK.STR, 'csv')
    9  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'close'))
   10  :         Ref(TK.IDENT, 'close')

tree4:  report := { trades | columns('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') | print }
    1  : DefineVar(TK.DEFINE: report := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'report')
    3  :     Block{TK.BLOCK, len=1}
    4  :         Flow{TK.CHAIN, '|' len=3}
    5  :             Get(TK.IDENT, 'trades')
    6  :             FnCall('columns')
    7  :                 Ref(TK.IDENT, 'columns')
    8  :                 List(TK.LIST, [Str(), Str(), Str(), Str(), Str()])
    9  :                     Str(TK.STR, 'symbol')
   10  :                     Str(TK.STR, 'buy_date')
   11  :                     Str(TK.STR, 'buy_price')
   12  :                     Str(TK.STR, 'sell_date')
   13  :                     Str(TK.STR, 'sell_price')
   14  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
   15  :                 Ref(TK.IDENT, 'print')

tree5:  rules: {
    1  : Combine(TK.COMBINE: rules None Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'rules')
    3  :     Block{TK.BLOCK, len=2}
    4  :         Define(TK.DEFINE: baseline = Block(TK.BLOCK, ''))
    5  :             Ref(TK.IDENT, 'baseline')
    6  :             Block{TK.BLOCK, len=2}
    7  :                 Flow{TK.CHAIN, '|' len=2}
    8  :                     Flow{TK.APPLY, '>>' len=2}
    9  :                         Flow{TK.CHAIN, '|' len=2}
   10  :                             Combine(TK.COMBINE: buy None UnaryOp(TK.ANY, 'any'))
   11  :                                 Ref(TK.IDENT, 'buy')
   12  :                                 UnaryOp(TK.ANY, 'any')
   13  :                                     Combine(TK.COMBINE:  None Define(TK.DEFINE, '='))
   14  :                                         Block{TK.BLOCK, len=3}
   15  :                                             Flow{TK.CHAIN, '|' len=2}
   16  :                                                 BinOp(TK.GTR, '>')
   17  :                                                     Get(TK.IDENT, 'close')
   18  :                                                 FnCall('sma')
   19  :                                                     Ref(TK.IDENT, 'sma')
   20  :                                                     List(TK.LIST, [Int()])
   21  :                                                         Int(TK.INT, 10)
   22  :                                             Flow{TK.CHAIN, '|' len=2}
   23  :                                                 BinOp(TK.GTR, '>')
   24  :                                                     Get(TK.IDENT, 'close')
   25  :                                                 FnCall('sma')
   26  :                                                     Ref(TK.IDENT, 'sma')
   27  :                                                     List(TK.LIST, [Int()])
   28  :                                                         Int(TK.INT, 20)
   29  :                                             Flow{TK.CHAIN, '|' len=2}
   30  :                                                 BinOp(TK.GTR, '>')
   31  :                                                     FnCall('sma')
   32  :                                                         Get(TK.IDENT, 'sma')
   33  :                                                         List(TK.LIST, [Int()])
   34  :                                                             Int(TK.INT, 10)
   35  :                                                 FnCall('sma')
   36  :                                                     Ref(TK.IDENT, 'sma')
   37  :                                                     List(TK.LIST, [Int()])
   38  :                                                         Int(TK.INT, 20)
   39  :                                         Define(TK.DEFINE: threshold = 0.01)
   40  :                                             Ref(TK.IDENT, 'threshold')
   41  :                                             Float(TK.FLOT, 0.01)
   42  :                             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   43  :                                 Ref(TK.IDENT, 'signal')
   44  :                         FnCall('delay')
   45  :                             Ref(TK.IDENT, 'delay')
   46  :                             List(TK.LIST, [Duration()])
   47  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   48  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   49  :                         Ref(TK.IDENT, 'atr')
   50  :                 Flow{TK.CHAIN, '|' len=2}
   51  :                     Flow{TK.APPLY, '>>' len=2}
   52  :                         Flow{TK.CHAIN, '|' len=2}
   53  :                             Combine(TK.COMBINE: sell None BinOp(TK.FALL_BELOW, '<|'))
   54  :                                 Ref(TK.IDENT, 'sell')
   55  :                                 BinOp(TK.FALL_BELOW, '<|')
   56  :                                     Get(TK.IDENT, 'close')
   57  :                                     FnCall('sma')
   58  :                                         Get(TK.IDENT, 'sma')
   59  :                                         List(TK.LIST, [Int()])
   60  :                                             Int(TK.INT, 10)
   61  :                             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   62  :                                 Ref(TK.IDENT, 'signal')
   63  :                         FnCall('delay')
   64  :                             Ref(TK.IDENT, 'delay')
   65  :                             List(TK.LIST, [Duration()])
   66  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   67  :                     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'atr'))
   68  :                         Ref(TK.IDENT, 'atr')
   69  :         Define(TK.DEFINE: scenario = Block(TK.BLOCK, ''))
   70  :             Ref(TK.IDENT, 'scenario')
   71  :             Block{TK.BLOCK, len=2}
   72  :                 Flow{TK.APPLY, '>>' len=2}
   73  :                     Flow{TK.CHAIN, '|' len=2}
   74  :                         Combine(TK.COMBINE: buy None Block(TK.BLOCK, ''))
   75  :                             Ref(TK.IDENT, 'buy')
   76  :                             Block{TK.BLOCK, len=1}
   77  :                                 Flow{TK.CHAIN, '|' len=2}
   78  :                                     BinOp(TK.GTR, '>')
   79  :                                         Get(TK.IDENT, 'close')
   80  :                                     FnCall('sma')
   81  :                                         Ref(TK.IDENT, 'sma')
   82  :                                         List(TK.LIST, [Ref()])
   83  :                                             Ref(TK.IDENT, 'sma_period')
   84  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
   85  :                             Ref(TK.IDENT, 'signal')
   86  :                     PropCall(TK.PROPCALL, 'atr')
   87  :                         Ref(TK.IDENT, 'atr')
   88  :                         List(TK.LIST, [Duration()])
   89  :                             Duration(TK.DUR, 1 day, 0:00:00)
   90  :                 Flow{TK.APPLY, '>>' len=2}
   91  :                     Flow{TK.CHAIN, '|' len=2}
   92  :                         Combine(TK.COMBINE: sell None BinOp(TK.FALL_BELOW, '<|'))
   93  :                             Ref(TK.IDENT, 'sell')
   94  :                             BinOp(TK.FALL_BELOW, '<|')
   95  :                                 Get(TK.IDENT, 'close')
   96  :                                 FnCall('sma')
   97  :                                     Get(TK.IDENT, 'sma')
   98  :                                     List(TK.LIST, [Get()])
   99  :                                         Get(TK.IDENT, 'sma_period')
  100  :                         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'signal'))
  101  :                             Ref(TK.IDENT, 'signal')
  102  :                     PropCall(TK.PROPCALL, 'atr')
  103  :                         Ref(TK.IDENT, 'atr')
  104  :                         List(TK.LIST, [Duration()])
  105  :                             Duration(TK.DUR, 1 day, 0:00:00)
