

test:
"# sample rules file for pyser / qtradr

%%yahoo (file='spq500.csv', 2y)
%%backtest (rules, period='train')
%%report { report >> rules }

#
periods = {
    train: (today-2y)..today
}
sma_period = [3,5,10..20,28]

# productions: new datasets
atr := (high + low) / 2
median_price := (open + close) / 2
price10a := price.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }


rules: {
    baseline = {
        buy: any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
        sell: close <| sma(10) | signal >> delay(1d) | atr
    },
    scenario = {
        buy: { close >| sma(sma_period) } | signal >> atr.delay(1d),
        sell: close <| sma(sma_period) | signal >> atr.delay(1d)
    }
}
"

tree1:  periods = {
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'periods', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree2:  sma_period = [3,5,10..20,28]
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'sma_period', V=None)
    3 :     List TK.LIST(LITERAL, '[', V=[Int(), Int(), BinOp(), Int()])
    4 :         Int TK.INT(LITERAL, '3', V=3)
    5 :         Int TK.INT(LITERAL, '5', V=5)
    6 :         BinOp TK.RANGE(BINOP, '.', V=None)
    7 :             Float TK.FLOT(LITERAL, '10.', V=10.0)
    8 :             Int TK.INT(LITERAL, '20', V=20)
    9 :         Int TK.INT(LITERAL, '28', V=28)

tree3:  atr := (high + low) / 2
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'high', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'low', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree4:  median_price := (open + close) / 2
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'median_price', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'open', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree5:  price10a := price.delay(1d)[10:00]
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'price10a', V=None)
    3 :     PropRef TK.REF(BINOP, '.', V=None)
    4 :         Get TK.IDNT(IDENTIFIER, 'price', V=None)
    5 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'delay', V=None)
    7 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
    8 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)

tree6:  price10a := price.delay(1d)[10:00]
result: list([Time()])
    1 : List TK.LIST(LITERAL, '[', V=[Time()])
    2 :     Time TK.TIME(LITERAL, '10:00', V=10:00:00)

tree7:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree8:  rules: {
result: Lit(None)
    1 : Define TK.COLN(NONE, ':', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree1:  %%yahoo (file='spq500.csv', 2y)

tree2:  %%backtest (rules, period='train')

tree3:  %%report { report >> rules }
