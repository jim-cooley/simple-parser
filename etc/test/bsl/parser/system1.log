

test:
# sample rules file for pyser / qtradr

%%yahoo (file='spq500.csv', 2y)
%%backtest (rules, period='train')
%%report { report >> rules }

#
periods = {
    train: (today-2y)..today
}
sma_period = [3,5,10..20,28]

# productions: new datasets
atr := (high + low) / 2
median_price := (open + close) / 2
price10a := price.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }


rules: {
    baseline = {
        buy: any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
        sell: close <| sma(10) | signal >> delay(1d) | atr
    },
    scenario = {
        buy: { close >| sma(sma_period) } | signal >> atr.delay(1d),
        sell: close <| sma(sma_period) | signal >> atr.delay(1d)
    }
}


tree1:  periods = {
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'periods', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Define()])
    4 :         Define TK.COLN(NONE, ':', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'train', V=None)
    6 :             BinOp TK.RANGE(BINOP, '..', V=None)
    7 :                 BinOp TK.SUB(BINOP, '-', V=None)
    8 :                     Get TK.TODAY(IDENTIFIER, 'today', V=None)
    9 :                     Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)
   10 :                 Get TK.TODAY(IDENTIFIER, 'today', V=None)

tree2:  sma_period = [3,5,10..20,28]
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'sma_period', V=None)
    3 :     List TK.LIST(LITERAL, '[', V=[Int(), Int(), BinOp(), Int()])
    4 :         Int TK.INT(LITERAL, '3', V=3)
    5 :         Int TK.INT(LITERAL, '5', V=5)
    6 :         BinOp TK.RANGE(BINOP, '.', V=None)
    7 :             Float TK.FLOT(LITERAL, '10.', V=10.0)
    8 :             Int TK.INT(LITERAL, '20', V=20)
    9 :         Int TK.INT(LITERAL, '28', V=28)

tree3:  atr := (high + low) / 2
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'high', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'low', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree4:  median_price := (open + close) / 2
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'median_price', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'open', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree5:  price10a := price.delay(1d)[10:00]
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'price10a', V=None)
    3 :     PropRef TK.REF(BINOP, '.', V=None)
    4 :         Get TK.IDNT(IDENTIFIER, 'price', V=None)
    5 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'delay', V=None)
    7 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
    8 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)

tree6:  price10a := price.delay(1d)[10:00]
    1 : List TK.LIST(LITERAL, '[', V=[Time()])
    2 :     Time TK.TIME(LITERAL, '10:00', V=10:00:00)

tree7:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow()])
    4 :         Flow TK.CHAIN(NONE, '|', V=[Get(), FnCall()])
    5 :             Get TK.IDNT(IDENTIFIER, 'trades', V=None)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ref TK.IDNT(IDENTIFIER, 'select', V=None)
    8 :                 List TK.TUPLE(LITERAL, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree8:  rules: {
    1 : Define TK.COLN(NONE, ':', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Define(), Define()])
    4 :         Define TK.EQLS(BINOP, '=', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'baseline', V=None)
    6 :             Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
    7 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    8 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    9 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
   10 :                             Define TK.COLN(NONE, ':', V=None)
   11 :                                 Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   12 :                                 UnaryOp TK.ANY(UNARY, 'any:', V=None)
   13 :                                     Define TK.COLN(NONE, ':', V=None)
   14 :                                         Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp(), BinOp()])
   15 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   16 :                                                 Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   17 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   18 :                                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   19 :                                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   20 :                                                         Int TK.INT(LITERAL, '10', V=10)
   21 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   22 :                                                 Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   23 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   24 :                                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   25 :                                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   26 :                                                         Int TK.INT(LITERAL, '20', V=20)
   27 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   28 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   30 :                                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   31 :                                                         Int TK.INT(LITERAL, '10', V=10)
   32 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   33 :                                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   34 :                                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   35 :                                                         Int TK.INT(LITERAL, '20', V=20)
   36 :                                         Define TK.EQLS(BINOP, '=', V=None)
   37 :                                             Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   38 :                                             Float TK.FLOT(LITERAL, '0.01', V=0.01)
   39 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   40 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   41 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   42 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   43 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   44 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   45 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   46 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   47 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   48 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   49 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
   50 :                             Define TK.COLN(NONE, ':', V=None)
   51 :                                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)
   52 :                                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   53 :                                     Get TK.IDNT(IDENTIFIER, 'close', V=None)
   54 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   55 :                                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   56 :                                         List TK.TUPLE(LITERAL, '(', V=[Int()])
   57 :                                             Int TK.INT(LITERAL, '10', V=10)
   58 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   59 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   60 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   61 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   62 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   63 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   64 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   65 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   66 :         Define TK.EQLS(BINOP, '=', V=None)
   67 :             Ref TK.IDNT(IDENTIFIER, 'scenario', V=None)
   68 :             Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
   69 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
   70 :                     Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
   71 :                         Define TK.COLN(NONE, ':', V=None)
   72 :                             Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   73 :                             Block TK.BLOCK(SCOPE, '', V=[BinOp()])
   74 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   75 :                                     Get TK.IDNT(IDENTIFIER, 'close', V=None)
   76 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   77 :                                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   78 :                                         List TK.TUPLE(LITERAL, '(', V=[Get()])
   79 :                                             Get TK.IDNT(IDENTIFIER, 'sma_period', V=None)
   80 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   81 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   82 :                     PropRef TK.REF(BINOP, '.', V=None)
   83 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   84 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   85 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   86 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   87 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   88 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
   89 :                     Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
   90 :                         Define TK.COLN(NONE, ':', V=None)
   91 :                             Ref TK.SELL(IDENTIFIER, 'sell', V=None)
   92 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   93 :                                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
   94 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   95 :                                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   96 :                                     List TK.TUPLE(LITERAL, '(', V=[Get()])
   97 :                                         Get TK.IDNT(IDENTIFIER, 'sma_period', V=None)
   98 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   99 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
  100 :                     PropRef TK.REF(BINOP, '.', V=None)
  101 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
  102 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  103 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
  104 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
  105 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)

tree1:  %%yahoo (file='spq500.csv', 2y)

tree2:  %%backtest (rules, period='train')

tree3:  %%report { report >> rules }
