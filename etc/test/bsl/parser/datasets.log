

test:
# datasets:
pd = dataset()

df = {
    "one": Series( rand(3) ) : { index=["a", "b", "c"] },

    "two": Series( rand(4) ) : index=["a", "b", "c", "d"],

    "three": Series( rand(3), index=["b", "c", "d"] ),
}

# would be nice if df was already a dataframe from the decl above.
pd = dataset(df)

# future definition with generators?
df = {
    "one": { rand(3) => _ } : index=['a', 'b', 'c']
}


tree1:  pd = dataset()
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'pd')
    3  :     FnCall('dataset')
    4  :         Get(TK.IDNT, 'dataset')
    5  :         List(TK.TUPLE, [])

tree2:  df = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'df')
    3  :     Block(TK.BLOCK, v=[Define(), Define(), Define()], '')
    4  :         Define(TK.DEFINE, TK.COLN, ':')
    5  :             Str(TK.STR, one)
    6  :             DefineFn(TK.DEFINE, TK.COLN, ':')
    7  :                 Ref(TK.IDNT, 'Series')
    8  :                 Set(TK.SET, [Define()])
    9  :                     Define(TK.DEFINE, TK.EQLS, '=')
   10  :                         Ref(TK.IDNT, 'index')
   11  :                         List(TK.LIST, [Str(), Str(), Str()])
   12  :                             Str(TK.STR, a)
   13  :                             Str(TK.STR, b)
   14  :                             Str(TK.STR, c)
   15  :                 List(TK.TUPLE, [FnCall()])
   16  :                     FnCall('rand')
   17  :                         Ref(TK.IDNT, 'rand')
   18  :                         List(TK.TUPLE, [Int()])
   19  :                             Int(TK.INT, 3)
   20  :         Define(TK.DEFINE, TK.COLN, ':')
   21  :             Str(TK.STR, two)
   22  :             DefineFn(TK.DEFINE, TK.COLN, ':')
   23  :                 Ref(TK.IDNT, 'Series')
   24  :                 Define(TK.DEFINE, TK.EQLS, '=')
   25  :                     Ref(TK.IDNT, 'index')
   26  :                     List(TK.LIST, [Str(), Str(), Str(), Str()])
   27  :                         Str(TK.STR, a)
   28  :                         Str(TK.STR, b)
   29  :                         Str(TK.STR, c)
   30  :                         Str(TK.STR, d)
   31  :                 List(TK.TUPLE, [FnCall()])
   32  :                     FnCall('rand')
   33  :                         Ref(TK.IDNT, 'rand')
   34  :                         List(TK.TUPLE, [Int()])
   35  :                             Int(TK.INT, 4)
   36  :         Define(TK.DEFINE, TK.COLN, ':')
   37  :             Str(TK.STR, three)
   38  :             FnCall('Series')
   39  :                 Get(TK.IDNT, 'Series')
   40  :                 List(TK.TUPLE, [FnCall(), Define()])
   41  :                     FnCall('rand')
   42  :                         Get(TK.IDNT, 'rand')
   43  :                         List(TK.TUPLE, [Int()])
   44  :                             Int(TK.INT, 3)
   45  :                     Define(TK.DEFINE, TK.EQLS, '=')
   46  :                         Ref(TK.IDNT, 'index')
   47  :                         List(TK.LIST, [Str(), Str(), Str()])
   48  :                             Str(TK.STR, b)
   49  :                             Str(TK.STR, c)
   50  :                             Str(TK.STR, d)

tree3:  pd = dataset(df)
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'pd')
    3  :     FnCall('dataset')
    4  :         Get(TK.IDNT, 'dataset')
    5  :         List(TK.TUPLE, [Get()])
    6  :             Get(TK.IDNT, 'df')

tree4:  df = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'df')
    3  :     Set(TK.SET, [Define()])
    4  :         Define(TK.DEFINE, TK.COLN, ':')
    5  :             Str(TK.STR, one)
    6  :             Define(TK.DEFINE, TK.COLN, ':')
    7  :                 Block(TK.BLOCK, v=[DefineFn()], '')
    8  :                     DefineFn(TK.DEFINE, TK.EQGT, '=>')
    9  :                         Ref(TK.IDNT, 'rand')
   10  :                         Ref(TK.ANON, '_')
   11  :                         List(TK.TUPLE, [Int()])
   12  :                             Int(TK.INT, 3)
   13  :                 Define(TK.DEFINE, TK.EQLS, '=')
   14  :                     Ref(TK.IDNT, 'index')
   15  :                     List(TK.LIST, [Str(), Str(), Str()])
   16  :                         Str(TK.STR, a)
   17  :                         Str(TK.STR, b)
   18  :                         Str(TK.STR, c)
