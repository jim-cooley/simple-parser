

test:
"# var declarations
var f = 5
var f.a = 5
var f = { a=5 }
var f = { a(x):x*x }
var f = { a(_):_*_ }
var f = { 5 }
var f := 5
var f := { 5 }

# def declarations
def f(x) := x * 4;
def f(x) = x * 4
def f(x) := { x * 4 }
def f(x) := {
    x = 4
    y = 7
    x * y
}

# tuples
(x, y, z)
(1, 2, 3)
(x:1, y:2, z:3)
(x=1, y=2, z=3)
(x, y, z) = (1, 2, 3)
(x, y, z) = {q, r, s}:(1, 2, 3)
(x, y, z) = {q, r, s}:{q=1, r=2, s=3}
a = (1, 2, 3)
a = {q, r, s}:(1, 2, 3)
a = {q, r, s}:{q=1, r=2, s=3}

# blocks
{x, y, z}
{1, 2, 3}
{x:1, y:2, z:3}
{x=1, y=2, z=3}
{x=1, y=2, z=3*(x+y)}

{x, y, z}
{1, 2, 3}
{x:1, y:2, z:3}
{x=1, y=2, z=3}
{x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)

# declarations 2
a = (x, y, z)
a = (1, 2, 3)
a = (x:1, y:2, z:3)
a = (x=1, y=2, z=3)

b := {x, y, z}
b := {1, 2, 3}
b := {x:1, y:2, z:3}
b := {x=1, y=2, z=3}
b := {x=1, y=2, z=3*(x+y)}

def c = {x, y, z}
def c = {1, 2, 3}
def c = {x:1, y:2, z:3}
def c = {x=1, y=2, z=3}
def c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)

var c = {x, y, z}
var c = {1, 2, 3}
var c = {x:1, y:2, z:3}
var c = {x=1, y=2, z=3}
var c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)


"

tree1:  var f = 5
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     Int TK.INT(LITERAL, '5', V=5)

tree2:  var f.a = 5
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     PropRef TK.REF(BINOP, '.', V=None)
    3 :         Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    5 :     Int TK.INT(LITERAL, '5', V=5)

tree3:  var f = { a=5 }
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree4:  var f = { a(x):x*x }
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree5:  var f = { a(_):_*_ }
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree6:  var f = { 5 }
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree7:  var f := 5
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     Int TK.INT(LITERAL, '5', V=5)

tree8:  var f := { 5 }
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree9:  def f(x) := x * 4;
result: Lit(None)
    1 : DefineFn TK.COEQ(NONE, ':=', V=None)
    2 :     DefineFn TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    4 :         List TK.TUPLE(LITERAL, '(', V=[Ref()])
    5 :             Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    6 :     BinOp TK.MUL(BINOP, '*', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    8 :         Int TK.INT(LITERAL, '4', V=4)

tree10:  def f(x) = x * 4
result: Lit(None)
    1 : DefineFn TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     BinOp TK.MUL(BINOP, '*', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    5 :         Int TK.INT(LITERAL, '4', V=4)

tree11:  def f(x) := { x * 4 }
result: Lit(None)
    1 : DefineFn TK.COEQ(NONE, ':=', V=None)
    2 :     DefineFn TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    4 :         List TK.TUPLE(LITERAL, '(', V=[Ref()])
    5 :             Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    6 :     Set TK.SET(LITERAL, '{', V=None)

tree12:  def f(x) := {
result: Lit(None)
    1 : DefineFn TK.COEQ(NONE, ':=', V=None)
    2 :     DefineFn TK.FUNCTION(BINOP, '(', V=None)
    3 :         Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    4 :         List TK.TUPLE(LITERAL, '(', V=[Ref()])
    5 :             Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    6 :     Block TK.BLOCK(SCOPE, '', V=None)

tree13:  (x, y, z)
result: list([Get(), Get(), Get()])
    1 : List TK.TUPLE(LITERAL, '(', V=[Get(), Get(), Get()])
    2 :     Get TK.IDNT(IDENTIFIER, 'x', V=None)
    3 :     Get TK.IDNT(IDENTIFIER, 'y', V=None)
    4 :     Get TK.IDNT(IDENTIFIER, 'z', V=None)

tree14:  (1, 2, 3)
result: list([Int(), Int(), Int()])
    1 : List TK.TUPLE(LITERAL, '(', V=[Int(), Int(), Int()])
    2 :     Int TK.INT(LITERAL, '1', V=1)
    3 :     Int TK.INT(LITERAL, '2', V=2)
    4 :     Int TK.INT(LITERAL, '3', V=3)

tree15:  (x:1, y:2, z:3)
result: list([Define(), Define(), Define()])
    1 : List TK.TUPLE(LITERAL, '(', V=[Define(), Define(), Define()])
    2 :     Define TK.COLN(NONE, ':', V=None)
    3 :         Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    4 :         Int TK.INT(LITERAL, '1', V=1)
    5 :     Define TK.COLN(NONE, ':', V=None)
    6 :         Ref TK.IDNT(IDENTIFIER, 'y', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)
    8 :     Define TK.COLN(NONE, ':', V=None)
    9 :         Ref TK.IDNT(IDENTIFIER, 'z', V=None)
   10 :         Int TK.INT(LITERAL, '3', V=3)

tree16:  (x=1, y=2, z=3)
result: list([Define(), Define(), Define()])
    1 : List TK.TUPLE(LITERAL, '(', V=[Define(), Define(), Define()])
    2 :     Define TK.EQLS(BINOP, '=', V=None)
    3 :         Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    4 :         Int TK.INT(LITERAL, '1', V=1)
    5 :     Define TK.EQLS(BINOP, '=', V=None)
    6 :         Ref TK.IDNT(IDENTIFIER, 'y', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)
    8 :     Define TK.EQLS(BINOP, '=', V=None)
    9 :         Ref TK.IDNT(IDENTIFIER, 'z', V=None)
   10 :         Int TK.INT(LITERAL, '3', V=3)

tree17:  (x, y, z) = (1, 2, 3)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     List TK.TUPLE(LITERAL, '(', V=[Ref(), Ref(), Ref()])
    3 :         Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'y', V=None)
    5 :         Ref TK.IDNT(IDENTIFIER, 'z', V=None)
    6 :     List TK.TUPLE(LITERAL, '(', V=[Int(), Int(), Int()])
    7 :         Int TK.INT(LITERAL, '1', V=1)
    8 :         Int TK.INT(LITERAL, '2', V=2)
    9 :         Int TK.INT(LITERAL, '3', V=3)

tree18:  (x, y, z) = {q, r, s}:(1, 2, 3)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     List TK.TUPLE(LITERAL, '(', V=[Ref(), Ref(), Ref()])
    3 :         Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'y', V=None)
    5 :         Ref TK.IDNT(IDENTIFIER, 'z', V=None)
    6 :     Define TK.COLN(NONE, ':', V=None)
    7 :         Set TK.SET(LITERAL, '{', V=None)
    8 :         List TK.TUPLE(LITERAL, '(', V=[Int(), Int(), Int()])
    9 :             Int TK.INT(LITERAL, '1', V=1)
   10 :             Int TK.INT(LITERAL, '2', V=2)
   11 :             Int TK.INT(LITERAL, '3', V=3)

tree19:  (x, y, z) = {q, r, s}:{q=1, r=2, s=3}
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     List TK.TUPLE(LITERAL, '(', V=[Ref(), Ref(), Ref()])
    3 :         Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'y', V=None)
    5 :         Ref TK.IDNT(IDENTIFIER, 'z', V=None)
    6 :     Define TK.COLN(NONE, ':', V=None)
    7 :         Set TK.SET(LITERAL, '{', V=None)
    8 :         Block TK.BLOCK(SCOPE, '', V=None)

tree20:  a = (1, 2, 3)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     List TK.TUPLE(LITERAL, '(', V=[Int(), Int(), Int()])
    4 :         Int TK.INT(LITERAL, '1', V=1)
    5 :         Int TK.INT(LITERAL, '2', V=2)
    6 :         Int TK.INT(LITERAL, '3', V=3)

tree21:  a = {q, r, s}:(1, 2, 3)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Define TK.COLN(NONE, ':', V=None)
    4 :         Set TK.SET(LITERAL, '{', V=None)
    5 :         List TK.TUPLE(LITERAL, '(', V=[Int(), Int(), Int()])
    6 :             Int TK.INT(LITERAL, '1', V=1)
    7 :             Int TK.INT(LITERAL, '2', V=2)
    8 :             Int TK.INT(LITERAL, '3', V=3)

tree22:  a = {q, r, s}:{q=1, r=2, s=3}
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Define TK.COLN(NONE, ':', V=None)
    4 :         Set TK.SET(LITERAL, '{', V=None)
    5 :         Block TK.BLOCK(SCOPE, '', V=None)

tree23:  {x, y, z}
result: Lit(None)
    1 : Set TK.SET(LITERAL, '{', V=None)

tree24:  {1, 2, 3}
result: Lit(None)
    1 : Set TK.SET(LITERAL, '{', V=None)

tree25:  {x:1, y:2, z:3}
result: Lit(None)
    1 : Set TK.SET(LITERAL, '{', V=None)

tree26:  {x=1, y=2, z=3}
result: Lit(None)
    1 : Block TK.BLOCK(SCOPE, '', V=None)

tree27:  {x=1, y=2, z=3*(x+y)}
result: Lit(None)
    1 : Block TK.BLOCK(SCOPE, '', V=None)

tree28:  {x, y, z}
result: Lit(None)
    1 : Set TK.SET(LITERAL, '{', V=None)

tree29:  {1, 2, 3}
result: Lit(None)
    1 : Set TK.SET(LITERAL, '{', V=None)

tree30:  {x:1, y:2, z:3}
result: Lit(None)
    1 : Set TK.SET(LITERAL, '{', V=None)

tree31:  {x=1, y=2, z=3}
result: Lit(None)
    1 : Block TK.BLOCK(SCOPE, '', V=None)

tree32:  {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
result: Lit(None)
    1 : Define TK.COLN(NONE, ':', V=None)
    2 :     Block TK.BLOCK(SCOPE, '', V=None)
    3 :     List TK.TUPLE(LITERAL, '(', V=[Define(), Define(), Define()])
    4 :         Define TK.EQLS(BINOP, '=', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    6 :             Int TK.INT(LITERAL, '1', V=1)
    7 :         Define TK.EQLS(BINOP, '=', V=None)
    8 :             Ref TK.IDNT(IDENTIFIER, 'y', V=None)
    9 :             Int TK.INT(LITERAL, '2', V=2)
   10 :         Define TK.EQLS(BINOP, '=', V=None)
   11 :             Ref TK.IDNT(IDENTIFIER, 'z', V=None)
   12 :             Int TK.INT(LITERAL, '3', V=3)

tree33:  a = (x, y, z)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     List TK.TUPLE(LITERAL, '(', V=[Get(), Get(), Get()])
    4 :         Get TK.IDNT(IDENTIFIER, 'x', V=None)
    5 :         Get TK.IDNT(IDENTIFIER, 'y', V=None)
    6 :         Get TK.IDNT(IDENTIFIER, 'z', V=None)

tree34:  a = (1, 2, 3)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     List TK.TUPLE(LITERAL, '(', V=[Int(), Int(), Int()])
    4 :         Int TK.INT(LITERAL, '1', V=1)
    5 :         Int TK.INT(LITERAL, '2', V=2)
    6 :         Int TK.INT(LITERAL, '3', V=3)

tree35:  a = (x:1, y:2, z:3)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     List TK.TUPLE(LITERAL, '(', V=[Define(), Define(), Define()])
    4 :         Define TK.COLN(NONE, ':', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    6 :             Int TK.INT(LITERAL, '1', V=1)
    7 :         Define TK.COLN(NONE, ':', V=None)
    8 :             Ref TK.IDNT(IDENTIFIER, 'y', V=None)
    9 :             Int TK.INT(LITERAL, '2', V=2)
   10 :         Define TK.COLN(NONE, ':', V=None)
   11 :             Ref TK.IDNT(IDENTIFIER, 'z', V=None)
   12 :             Int TK.INT(LITERAL, '3', V=3)

tree36:  a = (x=1, y=2, z=3)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     List TK.TUPLE(LITERAL, '(', V=[Define(), Define(), Define()])
    4 :         Define TK.EQLS(BINOP, '=', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    6 :             Int TK.INT(LITERAL, '1', V=1)
    7 :         Define TK.EQLS(BINOP, '=', V=None)
    8 :             Ref TK.IDNT(IDENTIFIER, 'y', V=None)
    9 :             Int TK.INT(LITERAL, '2', V=2)
   10 :         Define TK.EQLS(BINOP, '=', V=None)
   11 :             Ref TK.IDNT(IDENTIFIER, 'z', V=None)
   12 :             Int TK.INT(LITERAL, '3', V=3)

tree37:  b := {x, y, z}
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree38:  b := {1, 2, 3}
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree39:  b := {x:1, y:2, z:3}
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree40:  b := {x=1, y=2, z=3}
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree41:  b := {x=1, y=2, z=3*(x+y)}
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree42:  def c = {x, y, z}
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree43:  def c = {1, 2, 3}
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree44:  def c = {x:1, y:2, z:3}
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree45:  def c = {x=1, y=2, z=3}
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree46:  def c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Define TK.COLN(NONE, ':', V=None)
    4 :         Block TK.BLOCK(SCOPE, '', V=None)
    5 :         List TK.TUPLE(LITERAL, '(', V=[Define(), Define(), Define()])
    6 :             Define TK.EQLS(BINOP, '=', V=None)
    7 :                 Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    8 :                 Int TK.INT(LITERAL, '1', V=1)
    9 :             Define TK.EQLS(BINOP, '=', V=None)
   10 :                 Ref TK.IDNT(IDENTIFIER, 'y', V=None)
   11 :                 Int TK.INT(LITERAL, '2', V=2)
   12 :             Define TK.EQLS(BINOP, '=', V=None)
   13 :                 Ref TK.IDNT(IDENTIFIER, 'z', V=None)
   14 :                 Int TK.INT(LITERAL, '3', V=3)

tree47:  var c = {x, y, z}
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree48:  var c = {1, 2, 3}
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree49:  var c = {x:1, y:2, z:3}
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree50:  var c = {x=1, y=2, z=3}
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree51:  var c = {x=1, y=2, z=3*(x+y)}:(x=1, y=2, z=3)
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    3 :     Define TK.COLN(NONE, ':', V=None)
    4 :         Block TK.BLOCK(SCOPE, '', V=None)
    5 :         List TK.TUPLE(LITERAL, '(', V=[Define(), Define(), Define()])
    6 :             Define TK.EQLS(BINOP, '=', V=None)
    7 :                 Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    8 :                 Int TK.INT(LITERAL, '1', V=1)
    9 :             Define TK.EQLS(BINOP, '=', V=None)
   10 :                 Ref TK.IDNT(IDENTIFIER, 'y', V=None)
   11 :                 Int TK.INT(LITERAL, '2', V=2)
   12 :             Define TK.EQLS(BINOP, '=', V=None)
   13 :                 Ref TK.IDNT(IDENTIFIER, 'z', V=None)
   14 :                 Int TK.INT(LITERAL, '3', V=3)
