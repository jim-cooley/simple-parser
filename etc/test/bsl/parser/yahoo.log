

test:
close[-1]
close[:-1]
close[3:]
close[1:10]
close[::2]
close[:10::2]
close[1:10::2]


quotes = yahoo( symbols='portfolio.csv', span=-5y )
close = quotes.close

close | sma(_, 10) | sma10 | print
close | sma(_, 20) | sma20 | print

close | columns(_, 'AAPL') | delta(_, 1) | signal | print

close | delta | signal | print

sma10 > sma20 | signal | x
x > 0 | buys | print
x < 0 | sells | print


print('buys =', buys)
print('sells =', sells)




tree1:  close[-1]
    1  : Index('close')
    2  :     Get(TK.IDENT, 'close')
    3  :     List(TK.TUPLE, [UnaryOp()])
    4  :         UnaryOp(TK.NEG, '-')
    5  :             Int(TK.INT, 1)

tree2:  close[:-1]
    1  : Index('close')
    2  :     Get(TK.IDENT, 'close')
    3  :     Slice( : NoneType(TK.NEG, '-') :: )
    4  :         UnaryOp(TK.NEG, '-')
    5  :             Int(TK.INT, 1)

tree3:  close[3:]
    1  : Index('close')
    2  :     Get(TK.IDENT, 'close')
    3  :     Slice(3 : (None) :: 1)
    4  :         Int(TK.INT, 3)
    5  :         Literal(TK.NONE, None)
    6  :         Int(TK.INT, 1)

tree4:  close[1:10]
    1  : Index('close')
    2  :     Get(TK.IDENT, 'close')
    3  :     Slice(1 : 10 :: 1)
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 10)
    6  :         Int(TK.INT, 1)

tree5:  close[::2]
    1  : Index('close')
    2  :     Get(TK.IDENT, 'close')
    3  :     Slice( :  :: 2)
    4  :         Int(TK.INT, 2)

tree6:  close[:10::2]
    1  : Index('close')
    2  :     Get(TK.IDENT, 'close')
    3  :     Slice( : 10 :: 2)
    4  :         Int(TK.INT, 10)
    5  :         Int(TK.INT, 2)

tree7:  close[1:10::2]
    1  : Index('close')
    2  :     Get(TK.IDENT, 'close')
    3  :     Slice(1 : 10 :: 2)
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 10)
    6  :         Int(TK.INT, 2)

tree8:  quotes = yahoo( symbols='portfolio.csv', span=-5y )
    1  : Define(TK.DEFINE: quotes = FnCall(TK.FUNCTION, 'yahoo'))
    2  :     Ref(TK.IDENT, 'quotes')
    3  :     FnCall('yahoo')
    4  :         Get(TK.IDENT, 'yahoo')
    5  :         Generate(TK.NAMEDTUPLE, len=2)
    6  :             Define(TK.DEFINE: symbols = portfolio.csv)
    7  :                 Ref(TK.IDENT, 'symbols')
    8  :                 Str(TK.STR, 'portfolio.csv')
    9  :             Define(TK.DEFINE: span = UnaryOp(TK.NEG, '-'))
   10  :                 Ref(TK.IDENT, 'span')
   11  :                 UnaryOp(TK.NEG, '-')
   12  :                     Duration(TK.DUR, 1825 days, 0:00:00)

tree9:  close = quotes.close
    1  : Define(TK.DEFINE: close = PropRef(TK.REF, '.'))
    2  :     Ref(TK.IDENT, 'close')
    3  :     PropRef(TK.REF: quotes . Get(TK.IDENT, 'close'))
    4  :         Get(TK.IDENT, 'quotes')
    5  :         Get(TK.IDENT, 'close')

tree10:  close | sma(_, 10) | sma10 | print
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     Get(TK.IDENT, 'close')
    3  :     FnCall('sma')
    4  :         Ref(TK.IDENT, 'sma')
    5  :         Generate(TK.LIST, len=2)
    6  :             Get(TK.ANON, '_')
    7  :             Int(TK.INT, 10)
    8  :     Ref(TK.IDENT, 'sma10')
    9  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
   10  :         Ref(TK.IDENT, 'print')

tree11:  close | sma(_, 20) | sma20 | print
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     Get(TK.IDENT, 'close')
    3  :     FnCall('sma')
    4  :         Ref(TK.IDENT, 'sma')
    5  :         Generate(TK.LIST, len=2)
    6  :             Get(TK.ANON, '_')
    7  :             Int(TK.INT, 20)
    8  :     Ref(TK.IDENT, 'sma20')
    9  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
   10  :         Ref(TK.IDENT, 'print')

tree12:  close | columns(_, 'AAPL') | delta(_, 1) | signal | print
    1  : Flow{TK.CHAIN, '|' len=5}
    2  :     Get(TK.IDENT, 'close')
    3  :     FnCall('columns')
    4  :         Ref(TK.IDENT, 'columns')
    5  :         Generate(TK.LIST, len=2)
    6  :             Get(TK.ANON, '_')
    7  :             Str(TK.STR, 'AAPL')
    8  :     FnCall('delta')
    9  :         Ref(TK.IDENT, 'delta')
   10  :         Generate(TK.LIST, len=2)
   11  :             Get(TK.ANON, '_')
   12  :             Int(TK.INT, 1)
   13  :     Ref(TK.IDENT, 'signal')
   14  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
   15  :         Ref(TK.IDENT, 'print')

tree13:  close | delta | signal | print
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     Get(TK.IDENT, 'close')
    3  :     Ref(TK.IDENT, 'delta')
    4  :     Ref(TK.IDENT, 'signal')
    5  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
    6  :         Ref(TK.IDENT, 'print')

tree14:  sma10 > sma20 | signal | x
    1  : Flow{TK.CHAIN, '|' len=3}
    2  :     BinOp(TK.GTR, '>')
    3  :         Get(TK.IDENT, 'sma10')
    4  :         Get(TK.IDENT, 'sma20')
    5  :     Ref(TK.IDENT, 'signal')
    6  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'x'))
    7  :         Ref(TK.IDENT, 'x')

tree15:  x > 0 | buys | print
    1  : Flow{TK.CHAIN, '|' len=3}
    2  :     BinOp(TK.GTR, '>')
    3  :         Get(TK.IDENT, 'x')
    4  :         Int(TK.INT, 0)
    5  :     Ref(TK.IDENT, 'buys')
    6  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
    7  :         Ref(TK.IDENT, 'print')

tree16:  x < 0 | sells | print
    1  : Flow{TK.CHAIN, '|' len=3}
    2  :     BinOp(TK.LESS, '<')
    3  :         Get(TK.IDENT, 'x')
    4  :         Int(TK.INT, 0)
    5  :     Ref(TK.IDENT, 'sells')
    6  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'print'))
    7  :         Ref(TK.IDENT, 'print')

tree17:  close[-1]
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     Generate(TK.LIST, len=2)
    4  :         Str(TK.STR, 'buys =')
    5  :         Get(TK.IDENT, 'buys')

tree18:  close[-1]
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     Generate(TK.LIST, len=2)
    4  :         Str(TK.STR, 'sells =')
    5  :         Get(TK.IDENT, 'sells')
