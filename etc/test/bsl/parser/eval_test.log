

test:
4
4 * 3
a = 4
s = { a=5 }
s.a
s.b = s.a * a
s.b
#
b = a * 3
c = b
s.b
++s.b



tree1:  4
    1  : Int(TK.INT, 4)

tree2:  4 * 3
    1  : BinOp(TK.MUL, '*')
    2  :     Int(TK.INT, 4)
    3  :     Int(TK.INT, 3)

tree3:  a = 4
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'a')
    3  :     Int(TK.INT, 4)

tree4:  s = { a=5 }
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 's')
    3  :     Set(TK.SET, [Define()])
    4  :         Define(TK.DEFINE, TK.DEFINE, '=')
    5  :             Ref(TK.IDENT, 'a')
    6  :             Int(TK.INT, 5)

tree5:  s.a
    1  : PropRef(TK.REF, '.')
    2  :     Get(TK.IDENT, 's')
    3  :     Get(TK.IDENT, 'a')

tree6:  s.b = s.a * a
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     PropRef(TK.REF, '.')
    3  :         Ref(TK.IDENT, 's')
    4  :         Ref(TK.IDENT, 'b')
    5  :     BinOp(TK.MUL, '*')
    6  :         PropRef(TK.REF, '.')
    7  :             Get(TK.IDENT, 's')
    8  :             Get(TK.IDENT, 'a')
    9  :         Get(TK.IDENT, 'a')

tree7:  s.b
    1  : PropRef(TK.REF, '.')
    2  :     Get(TK.IDENT, 's')
    3  :     Get(TK.IDENT, 'b')

tree8:  b = a * 3
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'b')
    3  :     BinOp(TK.MUL, '*')
    4  :         Get(TK.IDENT, 'a')
    5  :         Int(TK.INT, 3)

tree9:  c = b
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'c')
    3  :     Get(TK.IDENT, 'b')

tree10:  s.b
    1  : PropRef(TK.REF, '.')
    2  :     Get(TK.IDENT, 's')
    3  :     Get(TK.IDENT, 'b')

tree11:  ++s.b
    1  : UnaryOp(TK.INCREMENT, TK.INCREMENT, '++')
    2  :     PropRef(TK.REF, '.')
    3  :         Get(TK.IDENT, 's')
    4  :         Get(TK.IDENT, 'b')
