

test:
# list
a[1, 2, 3] = 4

a = 1..10
print("slicing list")
print(a[-1])
print(a[:-1])
print(a[3:])
print(a[1:10])
print(a[::2])
print(a[:10:2])
print(a[1:10:2])

# nd.array
1..10 | reshape(_, 2, 5) | flatten | a
print("slicing nd.array")
print(a[-1])
print(a[:-1])
print(a[3:])
print(a[1:10])
print(a[::2])
print(a[:10:2])
print(a[1:10:2])

d = { 'col1': [1, 2], 'col2': [3, 4] }
print(d)


tree1:  a[1, 2, 3] = 4
    1  : IndexSet(TK.PUT, 'put')
    2  :     Get(TK.IDENT, 'a')
    3  :     Int(TK.INT, 4)

tree2:  a = 1..10
    1  : Define(TK.DEFINE: a = GenerateRange(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'a')
    3  :     GenerateRange(TK.RANGE, len=3)
    4  :         Int(TK.INT, 1)
    5  :         Int(TK.INT, 10)

tree3:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Str()])
    4  :         Str(TK.STR, 'slicing list')

tree4:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             List(TK.TUPLE, [UnaryOp()])
    7  :                 UnaryOp(TK.NEG, '-')
    8  :                     Int(TK.INT, 1)

tree5:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice( : NoneType(TK.NEG, '-') :: )
    7  :                 UnaryOp(TK.NEG, '-')

tree6:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice(3 :  :: )
    7  :                 Int(TK.INT, 3)

tree7:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice(1 : 10 :: )
    7  :                 Int(TK.INT, 1)
    8  :                 Int(TK.INT, 10)

tree8:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice( :  :: 2)
    7  :                 Int(TK.INT, 2)

tree9:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice( : 10 :: 2)
    7  :                 Int(TK.INT, 10)
    8  :                 Int(TK.INT, 2)

tree10:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice(1 : 10 :: 2)
    7  :                 Int(TK.INT, 1)
    8  :                 Int(TK.INT, 10)
    9  :                 Int(TK.INT, 2)

tree11:  1..10 | reshape(_, 2, 5) | flatten | a
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     GenerateRange(TK.RANGE, len=3)
    3  :         Int(TK.INT, 1)
    4  :         Int(TK.INT, 10)
    5  :     FnCall('reshape')
    6  :         Ref(TK.IDENT, 'reshape')
    7  :         Generate(TK.LIST, len=3)
    8  :             Ref(TK.ANON, '_')
    9  :             Int(TK.INT, 2)
   10  :             Int(TK.INT, 5)
   11  :     Ref(TK.IDENT, 'flatten')
   12  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'a'))
   13  :         Ref(TK.IDENT, 'a')

tree12:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Str()])
    4  :         Str(TK.STR, 'slicing nd.array')

tree13:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             List(TK.TUPLE, [UnaryOp()])
    7  :                 UnaryOp(TK.NEG, '-')
    8  :                     Int(TK.INT, 1)

tree14:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice( : NoneType(TK.NEG, '-') :: )
    7  :                 UnaryOp(TK.NEG, '-')

tree15:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice(3 :  :: )
    7  :                 Int(TK.INT, 3)

tree16:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice(1 : 10 :: )
    7  :                 Int(TK.INT, 1)
    8  :                 Int(TK.INT, 10)

tree17:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice( :  :: 2)
    7  :                 Int(TK.INT, 2)

tree18:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice( : 10 :: 2)
    7  :                 Int(TK.INT, 10)
    8  :                 Int(TK.INT, 2)

tree19:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Index()])
    4  :         Index('a')
    5  :             Get(TK.IDENT, 'a')
    6  :             Slice(1 : 10 :: 2)
    7  :                 Int(TK.INT, 1)
    8  :                 Int(TK.INT, 10)
    9  :                 Int(TK.INT, 2)

tree20:  d = { 'col1': [1, 2], 'col2': [3, 4] }
    1  : Define(TK.DEFINE: d = Generate(TK.GEN, ''))
    2  :     Ref(TK.IDENT, 'd')
    3  :     Generate(TK.DATAFRAME, len=2)
    4  :         Combine(TK.COMBINE: col1 None Generate(TK.GEN, ''))
    5  :             Str(TK.STR, 'col1')
    6  :             Generate(TK.LIST, len=2)
    7  :                 Int(TK.INT, 1)
    8  :                 Int(TK.INT, 2)
    9  :         Combine(TK.COMBINE: col2 None Generate(TK.GEN, ''))
   10  :             Str(TK.STR, 'col2')
   11  :             Generate(TK.LIST, len=2)
   12  :                 Int(TK.INT, 3)
   13  :                 Int(TK.INT, 4)

tree21:  # list
    1  : FnCall('print')
    2  :     Get(TK.IDENT, 'print')
    3  :     List(TK.LIST, [Get()])
    4  :         Get(TK.IDENT, 'd')
