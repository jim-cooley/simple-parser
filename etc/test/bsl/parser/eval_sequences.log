

test:
%%option{strict=false}
a | { b:1 } | c
a | { b=1, 'k':v } | c
a | { b + 1 } | c
a | { b => b + 1 } | c
a = 4
a | ( b : b + 1 ) | c
a | { b => b + 1 } | c

a = 5
4 | b
4 >> b
4 => b
# a | b: b + 1 | c
a | b + 1 | c
a | _ + 1 | c
3 | _ + 1 | c

a | b | c
a >> b
a | b >> c
a | b | c => d
a | b => c | d
a | { b + 1 } | c


tree1:  a | { b:1 } | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), Set(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=[Define()])
    4 :         Define TK.COLN(NONE, ':', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    6 :             Int TK.INT(LITERAL, '1', V=1)
    7 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    8 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree2:  a | { b=1, 'k':v } | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), Block(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Define(), Define()])
    4 :         Define TK.EQLS(BINOP, '=', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    6 :             Int TK.INT(LITERAL, '1', V=1)
    7 :         Define TK.COLN(NONE, ':', V=None)
    8 :             Str TK.STR(LITERAL, 'k', V=k)
    9 :             Ref TK.IDNT(IDENTIFIER, 'v', V=None)
   10 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   11 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree3:  a | { b + 1 } | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), Block(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[BinOp()])
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    6 :             Int TK.INT(LITERAL, '1', V=1)
    7 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    8 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree4:  a | { b => b + 1 } | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), Block(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow()])
    4 :         Flow TK.PRODUCE(NONE, '=>', V=[Ref(), BinOp()])
    5 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    6 :             BinOp TK.ADD(BINOP, '+', V=None)
    7 :                 Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    8 :                 Int TK.INT(LITERAL, '1', V=1)
    9 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   10 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree5:  a = 4
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Int TK.INT(LITERAL, '4', V=4)

tree6:  a | ( b : b + 1 ) | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), Define(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Define TK.COLN(NONE, ':', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    5 :         BinOp TK.ADD(BINOP, '+', V=None)
    6 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    7 :             Int TK.INT(LITERAL, '1', V=1)
    8 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    9 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree7:  a | { b => b + 1 } | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), Block(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow()])
    4 :         Flow TK.PRODUCE(NONE, '=>', V=[Ref(), BinOp()])
    5 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    6 :             BinOp TK.ADD(BINOP, '+', V=None)
    7 :                 Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    8 :                 Int TK.INT(LITERAL, '1', V=1)
    9 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   10 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree8:  a = 5
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Int TK.INT(LITERAL, '5', V=5)

tree9:  4 | b
    1 : Flow TK.CHAIN(NONE, '|', V=[Int(), ApplyChainProd()])
    2 :     Int TK.INT(LITERAL, '4', V=4)
    3 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'b', V=None)

tree10:  4 >> b
    1 : Flow TK.APPLY(NONE, '>>', V=[Int(), ApplyChainProd()])
    2 :     Int TK.INT(LITERAL, '4', V=4)
    3 :     ApplyChainProd TK.APPLY(UNARY, '>>', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'b', V=None)

tree11:  4 => b
    1 : Flow TK.PRODUCE(NONE, '=>', V=[Int(), ApplyChainProd()])
    2 :     Int TK.INT(LITERAL, '4', V=4)
    3 :     ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'b', V=None)

tree12:  a | b + 1 | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), BinOp(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     BinOp TK.ADD(BINOP, '+', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    5 :         Int TK.INT(LITERAL, '1', V=1)
    6 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree13:  a | _ + 1 | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), BinOp(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     BinOp TK.ADD(BINOP, '+', V=None)
    4 :         Ref TK.ANON(IDENTIFIER, '_', V=None)
    5 :         Int TK.INT(LITERAL, '1', V=1)
    6 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree14:  3 | _ + 1 | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Int(), BinOp(), ApplyChainProd()])
    2 :     Int TK.INT(LITERAL, '3', V=3)
    3 :     BinOp TK.ADD(BINOP, '+', V=None)
    4 :         Ref TK.ANON(IDENTIFIER, '_', V=None)
    5 :         Int TK.INT(LITERAL, '1', V=1)
    6 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree15:  a | b | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), Ref(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    4 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    5 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree16:  a >> b
    1 : Flow TK.APPLY(NONE, '>>', V=[Get(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     ApplyChainProd TK.APPLY(UNARY, '>>', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'b', V=None)

tree17:  a | b >> c
    1 : Flow TK.APPLY(NONE, '>>', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.CHAIN(NONE, '|', V=[Get(), ApplyChainProd()])
    3 :         Get TK.IDNT(IDENTIFIER, 'a', V=None)
    4 :         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    6 :     ApplyChainProd TK.APPLY(UNARY, '>>', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree18:  a | b | c => d
    1 : Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.CHAIN(NONE, '|', V=[Get(), Ref(), ApplyChainProd()])
    3 :         Get TK.IDNT(IDENTIFIER, 'a', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    5 :         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    6 :             Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    7 :     ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
    8 :         Ref TK.IDNT(IDENTIFIER, 'd', V=None)

tree19:  a | b => c | d
    1 : Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    3 :         Flow TK.CHAIN(NONE, '|', V=[Get(), ApplyChainProd()])
    4 :             Get TK.IDNT(IDENTIFIER, 'a', V=None)
    5 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    6 :                 Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    7 :         ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
    8 :             Ref TK.IDNT(IDENTIFIER, 'c', V=None)
    9 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   10 :         Ref TK.IDNT(IDENTIFIER, 'd', V=None)

tree20:  a | { b + 1 } | c
    1 : Flow TK.CHAIN(NONE, '|', V=[Get(), Block(), ApplyChainProd()])
    2 :     Get TK.IDNT(IDENTIFIER, 'a', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[BinOp()])
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    6 :             Int TK.INT(LITERAL, '1', V=1)
    7 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    8 :         Ref TK.IDNT(IDENTIFIER, 'c', V=None)

tree1:  %%option{strict=false}
