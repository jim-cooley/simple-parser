

test:
%%option{strict=false}
a | { b:1 } | c
a | { b=1, 'k':v } | c
a | { b + 1 } | c
a | { b => b + 1 } | c
a = 4
a | ( b : b + 1 ) | c
a | { b => b + 1 } | c

a = 5
4 | b
4 >> b
b => 4
# a | b: b + 1 | c
a | b + 1 | c
a | _ + 1 | c
3 | _ + 1 | c

a | b | c
a >> b
a | b >> c
a | b | c => d
a | b => c | d
a | { b + 1 } | c


tree1:  a | { b:1 } | c
    1  : Flow(TK.CHAIN, v=[Get(), Set(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Set(TK.SET, [Define()])
    4  :         Define(TK.DEFINE, TK.DEFINE, ':')
    5  :             Ref(TK.IDENT, 'b')
    6  :             Int(TK.INT, 1)
    7  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    8  :         Ref(TK.IDENT, 'c')

tree2:  a | { b=1, 'k':v } | c
    1  : Flow(TK.CHAIN, v=[Get(), Set(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Set(TK.SET, [Define(), Define()])
    4  :         Define(TK.DEFINE, TK.DEFINE, '=')
    5  :             Ref(TK.IDENT, 'b')
    6  :             Int(TK.INT, 1)
    7  :         Define(TK.DEFINE, TK.DEFINE, ':')
    8  :             Str(TK.STR, 'k')
    9  :             Ref(TK.IDENT, 'v')
   10  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   11  :         Ref(TK.IDENT, 'c')

tree3:  a | { b + 1 } | c
    1  : Flow(TK.CHAIN, v=[Get(), Block(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Block(TK.BLOCK, v=[BinOp()], '')
    4  :         BinOp(TK.ADD, '+')
    5  :             Ref(TK.IDENT, 'b')
    6  :             Int(TK.INT, 1)
    7  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    8  :         Ref(TK.IDENT, 'c')

tree4:  a | { b => b + 1 } | c
    1  : Flow(TK.CHAIN, v=[Get(), Block(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Block(TK.BLOCK, v=[DefineFn()], '')
    4  :         DefineFn(TK.DEFINE, TK.DEFINE, '=>')
    5  :             Ref(TK.IDENT, 'b')
    6  :             BinOp(TK.ADD, '+')
    7  :                 Ref(TK.IDENT, 'b')
    8  :                 Int(TK.INT, 1)
    9  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   10  :         Ref(TK.IDENT, 'c')

tree5:  a = 4
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'a')
    3  :     Int(TK.INT, 4)

tree6:  a | ( b : b + 1 ) | c
    1  : Flow(TK.CHAIN, v=[Get(), Define(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Define(TK.DEFINE, TK.DEFINE, ':')
    4  :         Ref(TK.IDENT, 'b')
    5  :         BinOp(TK.ADD, '+')
    6  :             Ref(TK.IDENT, 'b')
    7  :             Int(TK.INT, 1)
    8  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    9  :         Ref(TK.IDENT, 'c')

tree7:  a | { b => b + 1 } | c
    1  : Flow(TK.CHAIN, v=[Get(), Block(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Block(TK.BLOCK, v=[DefineFn()], '')
    4  :         DefineFn(TK.DEFINE, TK.DEFINE, '=>')
    5  :             Ref(TK.IDENT, 'b')
    6  :             BinOp(TK.ADD, '+')
    7  :                 Ref(TK.IDENT, 'b')
    8  :                 Int(TK.INT, 1)
    9  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
   10  :         Ref(TK.IDENT, 'c')

tree8:  a = 5
    1  : Define(TK.DEFINE, TK.DEFINE, '=')
    2  :     Ref(TK.IDENT, 'a')
    3  :     Int(TK.INT, 5)

tree9:  4 | b
    1  : Flow(TK.CHAIN, v=[Int(), ApplyChainProd()], '|')
    2  :     Int(TK.INT, 4)
    3  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    4  :         Ref(TK.IDENT, 'b')

tree10:  4 >> b
    1  : Flow(TK.APPLY, v=[Int(), ApplyChainProd()], '>>')
    2  :     Int(TK.INT, 4)
    3  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '>>')
    4  :         Ref(TK.IDENT, 'b')

tree11:  b => 4
    1  : DefineFn(TK.DEFINE, TK.DEFINE, '=>')
    2  :     Ref(TK.IDENT, 'b')
    3  :     Int(TK.INT, 4)

tree12:  a | b + 1 | c
    1  : Flow(TK.CHAIN, v=[Get(), BinOp(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     BinOp(TK.ADD, '+')
    4  :         Ref(TK.IDENT, 'b')
    5  :         Int(TK.INT, 1)
    6  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    7  :         Ref(TK.IDENT, 'c')

tree13:  a | _ + 1 | c
    1  : Flow(TK.CHAIN, v=[Get(), BinOp(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     BinOp(TK.ADD, '+')
    4  :         Ref(TK.ANON, '_')
    5  :         Int(TK.INT, 1)
    6  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    7  :         Ref(TK.IDENT, 'c')

tree14:  3 | _ + 1 | c
    1  : Flow(TK.CHAIN, v=[Int(), BinOp(), ApplyChainProd()], '|')
    2  :     Int(TK.INT, 3)
    3  :     BinOp(TK.ADD, '+')
    4  :         Ref(TK.ANON, '_')
    5  :         Int(TK.INT, 1)
    6  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    7  :         Ref(TK.IDENT, 'c')

tree15:  a | b | c
    1  : Flow(TK.CHAIN, v=[Get(), Ref(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Ref(TK.IDENT, 'b')
    4  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    5  :         Ref(TK.IDENT, 'c')

tree16:  a >> b
    1  : Flow(TK.APPLY, v=[Get(), ApplyChainProd()], '>>')
    2  :     Get(TK.IDENT, 'a')
    3  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '>>')
    4  :         Ref(TK.IDENT, 'b')

tree17:  a | b >> c
    1  : Flow(TK.APPLY, v=[Flow(), ApplyChainProd()], '>>')
    2  :     Flow(TK.CHAIN, v=[Get(), ApplyChainProd()], '|')
    3  :         Get(TK.IDENT, 'a')
    4  :         ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    5  :             Ref(TK.IDENT, 'b')
    6  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '>>')
    7  :         Ref(TK.IDENT, 'c')

tree18:  a | b | c => d
    1  : Flow(TK.CHAIN, v=[Get(), Ref(), DefineFn()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Ref(TK.IDENT, 'b')
    4  :     DefineFn(TK.DEFINE, TK.DEFINE, '=>')
    5  :         Ref(TK.IDENT, 'c')
    6  :         Ref(TK.IDENT, 'd')

tree19:  a | b => c | d
    1  : Flow(TK.CHAIN, v=[Get(), DefineFn()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     DefineFn(TK.DEFINE, TK.DEFINE, '=>')
    4  :         Ref(TK.IDENT, 'b')
    5  :         Flow(TK.CHAIN, v=[Ref(), ApplyChainProd()], '|')
    6  :             Ref(TK.IDENT, 'c')
    7  :             ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    8  :                 Ref(TK.IDENT, 'd')

tree20:  a | { b + 1 } | c
    1  : Flow(TK.CHAIN, v=[Get(), Block(), ApplyChainProd()], '|')
    2  :     Get(TK.IDENT, 'a')
    3  :     Block(TK.BLOCK, v=[BinOp()], '')
    4  :         BinOp(TK.ADD, '+')
    5  :             Ref(TK.IDENT, 'b')
    6  :             Int(TK.INT, 1)
    7  :     ApplyChainProd(TK.DEFINE, TK.DEFINE, '|')
    8  :         Ref(TK.IDENT, 'c')

tree1:  %%option{strict=false}
    1  : Command(TK.IDENT, TK.IDENT, '%%option')
    2  :     Set(TK.SET, [Define()])
    3  :         Define(TK.DEFINE, TK.DEFINE, '=')
    4  :             Ref(TK.IDENT, 'strict')
    5  :             Bool(TK.BOOL, False)
