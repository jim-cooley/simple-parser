

test: 14:
close >| sma(10) and close <| sma(20) | signal >> open.delay(1d) | buy

tree1:  close >| sma(10) and close <| sma(20) | signal >> open.delay(1d) | buy
    1 : Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
    3 :         Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
    4 :             BinOp TK.AND(BINOP, 'and', V=None)
    5 :                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    6 :                     Get TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
    8 :                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    9 :                         List TK.TUPLE(LITERAL, '(', V=[Int()])
   10 :                             Int TK.INT(LITERAL, '10', V=10)
   11 :                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   12 :                     Get TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                         List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                             Int TK.INT(LITERAL, '20', V=20)
   17 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   18 :                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   19 :         PropRef TK.REF(BINOP, '.', V=None)
   20 :             Ref TK.IDNT(IDENTIFIER, 'open', V=None)
   21 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   22 :                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   23 :                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
   24 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   25 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   26 :         Ref TK.BUY(IDENTIFIER, 'buy', V=None)
