

test: 8:
"{close.sma(20) and close.sma(50)} | diff | sign | signal(how='cross')"

tree1:  {close.sma(20) and close.sma(50)} | diff | sign | signal(how='cross')
result: list([Block(), Get(), Get(), FnCall()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Block(), Get(), Get(), FnCall()])
    2 :     Block TK.BLOCK(SCOPE, '', V=None)
    3 :     Get TK.IDNT(IDENTIFIER, 'diff', V=None)
    4 :     Get TK.IDNT(IDENTIFIER, 'sign', V=None)
    5 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :         Get TK.SIGNAL(IDENTIFIER, 'signal', V=None)
    7 :         List TK.TUPLE(LITERAL, '(', V=[Define()])
    8 :             Define TK.EQLS(BINOP, '=', V=None)
    9 :                 Ref TK.IDNT(IDENTIFIER, 'how', V=None)
   10 :                 Str TK.STR(LITERAL, 'cross', V=cross)
