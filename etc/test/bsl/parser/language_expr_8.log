

test: 8:
{close.sma(20) and close.sma(50)} | diff | sign | signal(how='cross')

tree1:  {close.sma(20) and close.sma(50)} | diff | sign | signal(how='cross')
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     Generate(TK.SET, len=1)
    3  :         BinOp(TK.AND, 'and')
    4  :             PropCall(TK.PROPCALL, 'close')
    5  :                 Get(TK.IDENT, 'close')
    6  :                 List(TK.LIST, [Int()])
    7  :                     Int(TK.INT, 20)
    8  :             PropCall(TK.PROPCALL, 'close')
    9  :                 Get(TK.IDENT, 'close')
   10  :                 List(TK.LIST, [Int()])
   11  :                     Int(TK.INT, 50)
   12  :     Ref(TK.IDENT, 'diff')
   13  :     Ref(TK.IDENT, 'sign')
   14  :     FnCall('signal')
   15  :         Ref(TK.IDENT, 'signal')
   16  :         List(TK.LIST, [Define()])
   17  :             Define(TK.DEFINE: how = cross)
   18  :                 Ref(TK.IDENT, 'how')
   19  :                 Str(TK.STR, 'cross')
