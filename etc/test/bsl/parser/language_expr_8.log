

test: 8:
{close.sma(20) and close.sma(50)} | diff | sign | signal(how='cross')

tree1:  {close.sma(20) and close.sma(50)} | diff | sign | signal(how='cross')
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     Block{TK.BLOCK, len=1}
    3  :         BinOp(TK.AND, 'and')
    4  :             PropRef(TK.REF: close . FnCall(TK.FUNCTION, 'sma'))
    5  :                 Get(TK.IDENT, 'close')
    6  :                 FnCall('sma')
    7  :                     Get(TK.IDENT, 'sma')
    8  :                     List(TK.LIST, [Int()])
    9  :                         Int(TK.INT, 20)
   10  :             PropRef(TK.REF: close . FnCall(TK.FUNCTION, 'sma'))
   11  :                 Get(TK.IDENT, 'close')
   12  :                 FnCall('sma')
   13  :                     Get(TK.IDENT, 'sma')
   14  :                     List(TK.LIST, [Int()])
   15  :                         Int(TK.INT, 50)
   16  :     Ref(TK.IDENT, 'diff')
   17  :     Ref(TK.IDENT, 'sign')
   18  :     FnCall('signal')
   19  :         Ref(TK.IDENT, 'signal')
   20  :         List(TK.LIST, [Define()])
   21  :             Define(TK.DEFINE: how = cross)
   22  :                 Ref(TK.IDENT, 'how')
   23  :                 Str(TK.STR, 'cross')
