

test: 8:
"{close.sma(20) and close.sma(50)} | diff | sign | signal(how='cross')"

tree1:  {close.sma(20) and close.sma(50)} | diff | sign | signal(how='cross')
result: list([Block(), Ref(), Ref(), FnCall()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Block(), Ref(), Ref(), FnCall()])
    2 :     Block TK.BLOCK(SCOPE, '', V=[BinOp()])
    3 :         BinOp TK.AND(BINOP, 'and', V=None)
    4 :             PropRef TK.REF(BINOP, '.', V=None)
    5 :                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
    6 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    8 :                     List TK.TUPLE(LITERAL, '(', V=[Int()])
    9 :                         Int TK.INT(LITERAL, '20', V=20)
   10 :             PropRef TK.REF(BINOP, '.', V=None)
   11 :                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
   12 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   13 :                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   14 :                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   15 :                         Int TK.INT(LITERAL, '50', V=50)
   16 :     Ref TK.IDNT(IDENTIFIER, 'diff', V=None)
   17 :     Ref TK.IDNT(IDENTIFIER, 'sign', V=None)
   18 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
   19 :         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   20 :         List TK.TUPLE(LITERAL, '(', V=[Define()])
   21 :             Define TK.EQLS(BINOP, '=', V=None)
   22 :                 Ref TK.IDNT(IDENTIFIER, 'how', V=None)
   23 :                 Str TK.STR(LITERAL, 'cross', V=cross)
