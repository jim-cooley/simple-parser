

test:
4 | a
a | b
a | b | c
a | b | c | d
a >> b
a | b >> c
a | b >> c | d
a | b | c >> d
a >> b | c | d
a | b | c => d
a | b => c | d
a() | b
a(x) | b
a(x,y) | b
a.b(x) | c
a.b(x,y) | c
a.b(1) | c
a.b(1d) | c
open.b(1d) | c


tree1:  4 | a
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Int(TK.INT, 4)
    3  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'a'))
    4  :         Ref(TK.IDENT, 'a')

tree2:  a | b
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Get(TK.IDENT, 'a')
    3  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'b'))
    4  :         Ref(TK.IDENT, 'b')

tree3:  a | b | c
    1  : Flow{TK.CHAIN, '|' len=3}
    2  :     Get(TK.IDENT, 'a')
    3  :     Ref(TK.IDENT, 'b')
    4  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'c'))
    5  :         Ref(TK.IDENT, 'c')

tree4:  a | b | c | d
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     Get(TK.IDENT, 'a')
    3  :     Ref(TK.IDENT, 'b')
    4  :     Ref(TK.IDENT, 'c')
    5  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'd'))
    6  :         Ref(TK.IDENT, 'd')

tree5:  a >> b
    1  : Flow{TK.APPLY, '>>' len=2}
    2  :     Get(TK.IDENT, 'a')
    3  :     ApplyChainProd(TK.APPLY: None >> Ref(TK.IDENT, 'b'))
    4  :         Ref(TK.IDENT, 'b')

tree6:  a | b >> c
    1  : Flow{TK.APPLY, '>>' len=2}
    2  :     Flow{TK.CHAIN, '|' len=2}
    3  :         Get(TK.IDENT, 'a')
    4  :         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'b'))
    5  :             Ref(TK.IDENT, 'b')
    6  :     ApplyChainProd(TK.APPLY: None >> Ref(TK.IDENT, 'c'))
    7  :         Ref(TK.IDENT, 'c')

tree7:  a | b >> c | d
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Flow{TK.APPLY, '>>' len=2}
    3  :         Flow{TK.CHAIN, '|' len=2}
    4  :             Get(TK.IDENT, 'a')
    5  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'b'))
    6  :                 Ref(TK.IDENT, 'b')
    7  :         ApplyChainProd(TK.APPLY: None >> Ref(TK.IDENT, 'c'))
    8  :             Ref(TK.IDENT, 'c')
    9  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'd'))
   10  :         Ref(TK.IDENT, 'd')

tree8:  a | b | c >> d
    1  : Flow{TK.APPLY, '>>' len=2}
    2  :     Flow{TK.CHAIN, '|' len=3}
    3  :         Get(TK.IDENT, 'a')
    4  :         Ref(TK.IDENT, 'b')
    5  :         ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'c'))
    6  :             Ref(TK.IDENT, 'c')
    7  :     ApplyChainProd(TK.APPLY: None >> Ref(TK.IDENT, 'd'))
    8  :         Ref(TK.IDENT, 'd')

tree9:  a >> b | c | d
    1  : Flow{TK.CHAIN, '|' len=3}
    2  :     Flow{TK.APPLY, '>>' len=2}
    3  :         Get(TK.IDENT, 'a')
    4  :         ApplyChainProd(TK.APPLY: None >> Ref(TK.IDENT, 'b'))
    5  :             Ref(TK.IDENT, 'b')
    6  :     Ref(TK.IDENT, 'c')
    7  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'd'))
    8  :         Ref(TK.IDENT, 'd')

tree10:  a | b | c => d
    1  : Flow{TK.CHAIN, '|' len=3}
    2  :     Get(TK.IDENT, 'a')
    3  :     Ref(TK.IDENT, 'b')
    4  :     DefineFn(TK.PRODUCE: c => Ref(TK.IDENT, 'd'))
    5  :         Ref(TK.IDENT, 'c')
    6  :         Ref(TK.IDENT, 'd')

tree11:  a | b => c | d
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     Get(TK.IDENT, 'a')
    3  :     DefineFn(TK.PRODUCE: b => Flow(TK.CHAIN, '|'))
    4  :         Ref(TK.IDENT, 'b')
    5  :         Flow{TK.CHAIN, '|' len=2}
    6  :             Ref(TK.IDENT, 'c')
    7  :             ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'd'))
    8  :                 Ref(TK.IDENT, 'd')

tree12:  a() | b
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     FnCall('a')
    3  :         Get(TK.IDENT, 'a')
    4  :         List(TK.LIST, [])
    5  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'b'))
    6  :         Ref(TK.IDENT, 'b')

tree13:  a(x) | b
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     FnCall('a')
    3  :         Get(TK.IDENT, 'a')
    4  :         List(TK.LIST, [Get()])
    5  :             Get(TK.IDENT, 'x')
    6  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'b'))
    7  :         Ref(TK.IDENT, 'b')

tree14:  a(x,y) | b
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     FnCall('a')
    3  :         Get(TK.IDENT, 'a')
    4  :         Generate(TK.LIST, len=2)
    5  :             Get(TK.IDENT, 'x')
    6  :             Get(TK.IDENT, 'y')
    7  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'b'))
    8  :         Ref(TK.IDENT, 'b')

tree15:  a.b(x) | c
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     PropRef(TK.REF: a . FnCall(TK.FUNCTION, 'b'))
    3  :         Get(TK.IDENT, 'a')
    4  :         FnCall('b')
    5  :             Get(TK.IDENT, 'b')
    6  :             List(TK.LIST, [Get()])
    7  :                 Get(TK.IDENT, 'x')
    8  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'c'))
    9  :         Ref(TK.IDENT, 'c')

tree16:  a.b(x,y) | c
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     PropRef(TK.REF: a . FnCall(TK.FUNCTION, 'b'))
    3  :         Get(TK.IDENT, 'a')
    4  :         FnCall('b')
    5  :             Get(TK.IDENT, 'b')
    6  :             Generate(TK.LIST, len=2)
    7  :                 Get(TK.IDENT, 'x')
    8  :                 Get(TK.IDENT, 'y')
    9  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'c'))
   10  :         Ref(TK.IDENT, 'c')

tree17:  a.b(1) | c
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     PropRef(TK.REF: a . FnCall(TK.FUNCTION, 'b'))
    3  :         Get(TK.IDENT, 'a')
    4  :         FnCall('b')
    5  :             Get(TK.IDENT, 'b')
    6  :             List(TK.LIST, [Int()])
    7  :                 Int(TK.INT, 1)
    8  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'c'))
    9  :         Ref(TK.IDENT, 'c')

tree18:  a.b(1d) | c
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     PropRef(TK.REF: a . FnCall(TK.FUNCTION, 'b'))
    3  :         Get(TK.IDENT, 'a')
    4  :         FnCall('b')
    5  :             Get(TK.IDENT, 'b')
    6  :             List(TK.LIST, [Duration()])
    7  :                 Duration(TK.DUR, 1 day, 0:00:00)
    8  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'c'))
    9  :         Ref(TK.IDENT, 'c')

tree19:  open.b(1d) | c
    1  : Flow{TK.CHAIN, '|' len=2}
    2  :     PropRef(TK.REF: open . FnCall(TK.FUNCTION, 'b'))
    3  :         Get(TK.IDENT, 'open')
    4  :         FnCall('b')
    5  :             Get(TK.IDENT, 'b')
    6  :             List(TK.LIST, [Duration()])
    7  :                 Duration(TK.DUR, 1 day, 0:00:00)
    8  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'c'))
    9  :         Ref(TK.IDENT, 'c')
