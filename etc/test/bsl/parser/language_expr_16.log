

test: 16:
close >| sma(20) | signal | open.delay(1d) | buy; close <| sma(10) | signal | open.delay(1d) | sell

tree1:  close >| sma(20) | signal | open.delay(1d) | buy; close <| sma(10) | signal | open.delay(1d) | sell
    1  : Flow{TK.CHAIN, '|' len=5}
    2  :     BinOp(TK.GTR, '>')
    3  :         Get(TK.IDENT, 'close')
    4  :     FnCall('sma')
    5  :         Ref(TK.IDENT, 'sma')
    6  :         List(TK.LIST, [Int()])
    7  :             Int(TK.INT, 20)
    8  :     Ref(TK.IDENT, 'signal')
    9  :     PropRef(TK.REF: open . FnCall(TK.FUNCTION, 'delay'))
   10  :         Ref(TK.IDENT, 'open')
   11  :         FnCall('delay')
   12  :             Ref(TK.IDENT, 'delay')
   13  :             List(TK.LIST, [Duration()])
   14  :                 Duration(TK.DUR, 1 day, 0:00:00)
   15  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'buy'))
   16  :         Ref(TK.IDENT, 'buy')

tree2:  close >| sma(20) | signal | open.delay(1d) | buy; close <| sma(10) | signal | open.delay(1d) | sell
    1  : Flow{TK.CHAIN, '|' len=4}
    2  :     BinOp(TK.FALL_BELOW, '<|')
    3  :         Get(TK.IDENT, 'close')
    4  :         FnCall('sma')
    5  :             Get(TK.IDENT, 'sma')
    6  :             List(TK.LIST, [Int()])
    7  :                 Int(TK.INT, 10)
    8  :     Ref(TK.IDENT, 'signal')
    9  :     PropRef(TK.REF: open . FnCall(TK.FUNCTION, 'delay'))
   10  :         Ref(TK.IDENT, 'open')
   11  :         FnCall('delay')
   12  :             Ref(TK.IDENT, 'delay')
   13  :             List(TK.LIST, [Duration()])
   14  :                 Duration(TK.DUR, 1 day, 0:00:00)
   15  :     ApplyChainProd(TK.APPLY: None | Ref(TK.IDENT, 'sell'))
   16  :         Ref(TK.IDENT, 'sell')
