

test:
"# sample rules file for pyser / qtradr
{ close }:(threshold=5) | signal

rules >> report | print



periods = {
    'train': (today-2y)..today
}
sma_periods1 = [3,5,10..20,28]
sma_periods2 = [5,10,12,20,30,60,90]

var r = range(sma_periods1)
var r2 = range(sma_periods2)

(open, high, low, close, adj_close) = yahoo( file='spq500.csv', 2y )
atr = (high + low) / 2
median_price = (open + close) / 2
price10a = price.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

rules: {
    baseline = {
        any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
        close <| sma(10) | signal >> delay(1d) | atr -> sell
    },
    scenario1 = {
        { close >| sma(r2) } | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    scenario2 = {
        { close >| sma(r1) }:(threshold=0.01) | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    scenario3 = {
        { sma(r1) >| sma(r2) } | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    {
        { close >| sma(r1) } | signal >> atr.delay(1d) => buy,
        close <| sma(r2) | signal >> atr.delay(1d) => sell
    }
}

backtest( rules, period=period['train'])
rules >> report | print
"

tree1:  { close }:(threshold=5) | signal
result: list([Define(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    2 :     Define TK.COLN(NONE, ':', V=None)
    3 :         Set TK.SET(LITERAL, '{', V=[Ref()])
    4 :             Ref TK.IDNT(IDENTIFIER, 'close', V=None)
    5 :         Define TK.EQLS(BINOP, '=', V=None)
    6 :             Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
    7 :             Int TK.INT(LITERAL, '5', V=5)
    8 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    9 :         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)

tree2:  rules >> report | print
result: list([Flow(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.APPLY(NONE, '>>', V=[Get(), ApplyChainProd()])
    3 :         Get TK.IDNT(IDENTIFIER, 'rules', V=None)
    4 :         ApplyChainProd TK.APPLY(UNARY, '>>', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    6 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'print', V=None)

tree3:  periods = {
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'periods', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Define()])
    4 :         Define TK.COLN(NONE, ':', V=None)
    5 :             Str TK.STR(LITERAL, 'train', V=train)
    6 :             BinOp TK.RANGE(BINOP, '..', V=None)
    7 :                 BinOp TK.SUB(BINOP, '-', V=None)
    8 :                     Get TK.TODAY(IDENTIFIER, 'today', V=None)
    9 :                     Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)
   10 :                 Get TK.TODAY(IDENTIFIER, 'today', V=None)

tree4:  sma_periods1 = [3,5,10..20,28]
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'sma_periods1', V=None)
    3 :     List TK.LIST(LITERAL, '[', V=[Int(), Int(), BinOp(), Int()])
    4 :         Int TK.INT(LITERAL, '3', V=3)
    5 :         Int TK.INT(LITERAL, '5', V=5)
    6 :         BinOp TK.RANGE(BINOP, '.', V=None)
    7 :             Float TK.FLOT(LITERAL, '10.', V=10.0)
    8 :             Int TK.INT(LITERAL, '20', V=20)
    9 :         Int TK.INT(LITERAL, '28', V=28)

tree5:  sma_periods2 = [5,10,12,20,30,60,90]
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'sma_periods2', V=None)
    3 :     List TK.LIST(LITERAL, '[', V=[Int(), Int(), Int(), Int(), Int(), Int(), Int()])
    4 :         Int TK.INT(LITERAL, '5', V=5)
    5 :         Int TK.INT(LITERAL, '10', V=10)
    6 :         Int TK.INT(LITERAL, '12', V=12)
    7 :         Int TK.INT(LITERAL, '20', V=20)
    8 :         Int TK.INT(LITERAL, '30', V=30)
    9 :         Int TK.INT(LITERAL, '60', V=60)
   10 :         Int TK.INT(LITERAL, '90', V=90)

tree6:  var r = range(sma_periods1)
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'r', V=None)
    3 :     DefineFn TK.FUNCTION(BINOP, '(', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'range', V=None)
    5 :         List TK.TUPLE(LITERAL, '(', V=[Ref()])
    6 :             Ref TK.IDNT(IDENTIFIER, 'sma_periods1', V=None)

tree7:  var r2 = range(sma_periods2)
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'r2', V=None)
    3 :     DefineFn TK.FUNCTION(BINOP, '(', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'range', V=None)
    5 :         List TK.TUPLE(LITERAL, '(', V=[Ref()])
    6 :             Ref TK.IDNT(IDENTIFIER, 'sma_periods2', V=None)

tree8:  (open, high, low, close, adj_close) = yahoo( file='spq500.csv', 2y )
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     List TK.TUPLE(LITERAL, '(', V=[Ref(), Ref(), Ref(), Ref(), Ref()])
    3 :         Ref TK.IDNT(IDENTIFIER, 'open', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'high', V=None)
    5 :         Ref TK.IDNT(IDENTIFIER, 'low', V=None)
    6 :         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'adj_close', V=None)
    8 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    9 :         Get TK.IDNT(IDENTIFIER, 'yahoo', V=None)
   10 :         List TK.TUPLE(LITERAL, '(', V=[Define(), Duration()])
   11 :             Define TK.EQLS(BINOP, '=', V=None)
   12 :                 Ref TK.IDNT(IDENTIFIER, 'file', V=None)
   13 :                 Str TK.STR(LITERAL, 'spq500.csv', V=spq500.csv)
   14 :             Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)

tree9:  atr = (high + low) / 2
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'high', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'low', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree10:  median_price = (open + close) / 2
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'median_price', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'open', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree11:  price10a = price.delay(1d)[10:00]
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'price10a', V=None)
    3 :     PropRef TK.REF(BINOP, '.', V=None)
    4 :         Get TK.IDNT(IDENTIFIER, 'price', V=None)
    5 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'delay', V=None)
    7 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
    8 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)

tree12:  price10a = price.delay(1d)[10:00]
result: list([Time()])
    1 : List TK.LIST(LITERAL, '[', V=[Time()])
    2 :     Time TK.TIME(LITERAL, '10:00', V=10:00:00)

tree13:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow()])
    4 :         Flow TK.CHAIN(NONE, '|', V=[Get(), FnCall()])
    5 :             Get TK.IDNT(IDENTIFIER, 'trades', V=None)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ref TK.IDNT(IDENTIFIER, 'select', V=None)
    8 :                 List TK.TUPLE(LITERAL, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree14:  rules: {
result: Lit(None)
    1 : Define TK.COLN(NONE, ':', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Define(), Define(), Define(), Define(), Block()])
    4 :         Define TK.EQLS(BINOP, '=', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'baseline', V=None)
    6 :             Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    7 :                 UnaryOp TK.ANY(UNARY, 'any', V=None)
    8 :                     Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    9 :                         Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   10 :                             Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   11 :                                 Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
   12 :                                     Define TK.COLN(NONE, ':', V=None)
   13 :                                         Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp(), BinOp()])
   14 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   15 :                                                 Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   16 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   17 :                                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   18 :                                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   19 :                                                         Int TK.INT(LITERAL, '10', V=10)
   20 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   21 :                                                 Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   22 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   23 :                                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   24 :                                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   25 :                                                         Int TK.INT(LITERAL, '20', V=20)
   26 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   27 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   28 :                                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   29 :                                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   30 :                                                         Int TK.INT(LITERAL, '10', V=10)
   31 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   32 :                                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   33 :                                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   34 :                                                         Int TK.INT(LITERAL, '20', V=20)
   35 :                                         Define TK.EQLS(BINOP, '=', V=None)
   36 :                                             Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   37 :                                             Float TK.FLOT(LITERAL, '0.01', V=0.01)
   38 :                                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   39 :                                         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   40 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   41 :                                     Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   42 :                                     List TK.TUPLE(LITERAL, '(', V=[Duration()])
   43 :                                         Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   44 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   45 :                                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   47 :                             Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   48 :                 Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   49 :                     Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   50 :                         Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   51 :                             Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   52 :                                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   53 :                                     Get TK.IDNT(IDENTIFIER, 'close', V=None)
   54 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   55 :                                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   56 :                                         List TK.TUPLE(LITERAL, '(', V=[Int()])
   57 :                                             Int TK.INT(LITERAL, '10', V=10)
   58 :                                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   59 :                                     Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   60 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   61 :                                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   62 :                                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
   63 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   64 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   65 :                             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   66 :                     ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   67 :                         Ref TK.SELL(IDENTIFIER, 'sell', V=None)
   68 :         Define TK.EQLS(BINOP, '=', V=None)
   69 :             Ref TK.IDNT(IDENTIFIER, 'scenario1', V=None)
   70 :             Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
   71 :                 Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
   72 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
   73 :                         Flow TK.CHAIN(NONE, '|', V=[Block(), ApplyChainProd()])
   74 :                             Block TK.BLOCK(SCOPE, '', V=[BinOp()])
   75 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   76 :                                     Get TK.IDNT(IDENTIFIER, 'close', V=None)
   77 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   78 :                                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   79 :                                         List TK.TUPLE(LITERAL, '(', V=[Get()])
   80 :                                             Get TK.IDNT(IDENTIFIER, 'r2', V=None)
   81 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   82 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   83 :                         PropRef TK.REF(BINOP, '.', V=None)
   84 :                             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   85 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   86 :                                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   87 :                                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
   88 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   89 :                     ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   90 :                         Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   91 :                 Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
   92 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
   93 :                         Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   94 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   95 :                                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
   96 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   97 :                                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   98 :                                     List TK.TUPLE(LITERAL, '(', V=[Get()])
   99 :                                         Get TK.IDNT(IDENTIFIER, 'r1', V=None)
  100 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
  101 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
  102 :                         PropRef TK.REF(BINOP, '.', V=None)
  103 :                             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
  104 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  105 :                                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
  106 :                                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
  107 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  108 :                     ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
  109 :                         Ref TK.SELL(IDENTIFIER, 'sell', V=None)
  110 :         Define TK.EQLS(BINOP, '=', V=None)
  111 :             Ref TK.IDNT(IDENTIFIER, 'scenario2', V=None)
  112 :             Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
  113 :                 Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
  114 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
  115 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
  116 :                             Define TK.COLN(NONE, ':', V=None)
  117 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp()])
  118 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  119 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
  120 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  121 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
  122 :                                             List TK.TUPLE(LITERAL, '(', V=[Ref()])
  123 :                                                 Ref TK.IDNT(IDENTIFIER, 'r1', V=None)
  124 :                                 Define TK.EQLS(BINOP, '=', V=None)
  125 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
  126 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
  127 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
  128 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
  129 :                         PropRef TK.REF(BINOP, '.', V=None)
  130 :                             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
  131 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  132 :                                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
  133 :                                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
  134 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  135 :                     ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
  136 :                         Ref TK.BUY(IDENTIFIER, 'buy', V=None)
  137 :                 Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
  138 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
  139 :                         Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
  140 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  141 :                                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
  142 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  143 :                                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
  144 :                                     List TK.TUPLE(LITERAL, '(', V=[Get()])
  145 :                                         Get TK.IDNT(IDENTIFIER, 'r1', V=None)
  146 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
  147 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
  148 :                         PropRef TK.REF(BINOP, '.', V=None)
  149 :                             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
  150 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  151 :                                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
  152 :                                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
  153 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  154 :                     ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
  155 :                         Ref TK.SELL(IDENTIFIER, 'sell', V=None)
  156 :         Define TK.EQLS(BINOP, '=', V=None)
  157 :             Ref TK.IDNT(IDENTIFIER, 'scenario3', V=None)
  158 :             Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
  159 :                 Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
  160 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
  161 :                         Flow TK.CHAIN(NONE, '|', V=[Block(), ApplyChainProd()])
  162 :                             Block TK.BLOCK(SCOPE, '', V=[BinOp()])
  163 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  164 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
  165 :                                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
  166 :                                         List TK.TUPLE(LITERAL, '(', V=[Get()])
  167 :                                             Get TK.IDNT(IDENTIFIER, 'r1', V=None)
  168 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
  169 :                                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
  170 :                                         List TK.TUPLE(LITERAL, '(', V=[Get()])
  171 :                                             Get TK.IDNT(IDENTIFIER, 'r2', V=None)
  172 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
  173 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
  174 :                         PropRef TK.REF(BINOP, '.', V=None)
  175 :                             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
  176 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  177 :                                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
  178 :                                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
  179 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  180 :                     ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
  181 :                         Ref TK.BUY(IDENTIFIER, 'buy', V=None)
  182 :                 Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
  183 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
  184 :                         Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
  185 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  186 :                                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
  187 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  188 :                                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
  189 :                                     List TK.TUPLE(LITERAL, '(', V=[Get()])
  190 :                                         Get TK.IDNT(IDENTIFIER, 'r1', V=None)
  191 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
  192 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
  193 :                         PropRef TK.REF(BINOP, '.', V=None)
  194 :                             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
  195 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  196 :                                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
  197 :                                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
  198 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  199 :                     ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
  200 :                         Ref TK.SELL(IDENTIFIER, 'sell', V=None)
  201 :         Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
  202 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
  203 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
  204 :                     Flow TK.CHAIN(NONE, '|', V=[Block(), ApplyChainProd()])
  205 :                         Block TK.BLOCK(SCOPE, '', V=[BinOp()])
  206 :                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  207 :                                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
  208 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  209 :                                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
  210 :                                     List TK.TUPLE(LITERAL, '(', V=[Get()])
  211 :                                         Get TK.IDNT(IDENTIFIER, 'r1', V=None)
  212 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
  213 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
  214 :                     PropRef TK.REF(BINOP, '.', V=None)
  215 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
  216 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  217 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
  218 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
  219 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  220 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
  221 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
  222 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
  223 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
  224 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
  225 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  226 :                             Get TK.IDNT(IDENTIFIER, 'close', V=None)
  227 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  228 :                                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
  229 :                                 List TK.TUPLE(LITERAL, '(', V=[Get()])
  230 :                                     Get TK.IDNT(IDENTIFIER, 'r2', V=None)
  231 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
  232 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
  233 :                     PropRef TK.REF(BINOP, '.', V=None)
  234 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
  235 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  236 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
  237 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
  238 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  239 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
  240 :                     Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree15:  backtest( rules, period=period['train'])
result: Lit(None)
    1 : FnCall TK.FUNCTION(BINOP, '(', V=None)
    2 :     Get TK.IDNT(IDENTIFIER, 'backtest', V=None)
    3 :     List TK.TUPLE(LITERAL, '(', V=[Get(), Define()])
    4 :         Get TK.IDNT(IDENTIFIER, 'rules', V=None)
    5 :         Define TK.EQLS(BINOP, '=', V=None)
    6 :             Ref TK.IDNT(IDENTIFIER, 'period', V=None)
    7 :             Index TK.INDEX(BINOP, '[', V=None)
    8 :                 Get TK.IDNT(IDENTIFIER, 'period', V=None)
    9 :                 List TK.TUPLE(LITERAL, '[', V=[Str()])
   10 :                     Str TK.STR(LITERAL, 'train', V=train)

tree16:  rules >> report | print
result: list([Flow(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.APPLY(NONE, '>>', V=[Get(), ApplyChainProd()])
    3 :         Get TK.IDNT(IDENTIFIER, 'rules', V=None)
    4 :         ApplyChainProd TK.APPLY(UNARY, '>>', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    6 :     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'print', V=None)
