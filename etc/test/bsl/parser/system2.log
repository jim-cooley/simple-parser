

test:
periods = {
    'train': (today-2y)..today
}

var sma_periods1 = [3,5,10..20,28]
var sma_periods2 = [5,10,12,20,30,60,90]

(open, high, low, close, adj_close) = yahoo( file='spq500.csv', periods['train5'] )
atr = (high + low) / 2
median_price = (open + close) / 2
price10a := _.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

rules := {
    baseline = {
        any:{ close |> sma(10), close |> sma(20), sma(10) |> sma(20) }:(threshold=0.01) | signal(close) >> delay(1d) -> buy(atr),
        close <| sma(10) | signal(close) >> delay(1d) -> sell(atr)
    },
    scenario1 = {
        { close |> sma(r2) } | signal >> atr.delay(1d) -> buy(atr),
        close <| sma(r1) | signal(close) >> atr.delay(1d) -> sell(atr)
    },
    scenario2 = {
        { close |> sma(r1) }:(threshold=0.01) | signal >> atr.delay(1d) -> buy(atr),
        close <| sma(r1) | signal(close) >> atr.delay(1d) -> sell(atr)
    },
    scenario3 = {
        { sma(r1) |> sma(r2) } | signal >> atr.delay(1d) -> buy(atr),
        close <| sma(r1) | signal(close) >> atr.delay(1d) -> sell(atr)
    },
    {
        { close |> sma(r1) } | signal >> atr.delay(1d) -> buy(atr),
        close <| sma(r2) | signal(close) >> atr.delay(1d) -> sell(atr)
    }
}

backtest( rules:{r1=sma_periods1, r2=sma_periods2}, period=period['train'])
rules >> report | print


tree1:  periods = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'periods')
    3  :     Block(TK.BLOCK, v=[Define()], '')
    4  :         Define(TK.DEFINE, TK.COLN, ':')
    5  :             Str(TK.STR, train)
    6  :             BinOp(TK.RANGE, '..')
    7  :                 BinOp(TK.SUB, '-')
    8  :                     Get(TK.IDNT, 'today')
    9  :                     Duration(TK.DUR, 730 days, 0:00:00)
   10  :                 Get(TK.IDNT, 'today')

tree2:  var sma_periods1 = [3,5,10..20,28]
    1  : DefineVar(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'sma_periods1')
    3  :     List(TK.LIST, [Int(), Int(), BinOp(), Int()])
    4  :         Int(TK.INT, 3)
    5  :         Int(TK.INT, 5)
    6  :         BinOp(TK.RANGE, '.')
    7  :             Float(TK.FLOT, 10.0)
    8  :             Int(TK.INT, 20)
    9  :         Int(TK.INT, 28)

tree3:  var sma_periods2 = [5,10,12,20,30,60,90]
    1  : DefineVar(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'sma_periods2')
    3  :     List(TK.LIST, [Int(), Int(), Int(), Int(), Int(), Int(), Int()])
    4  :         Int(TK.INT, 5)
    5  :         Int(TK.INT, 10)
    6  :         Int(TK.INT, 12)
    7  :         Int(TK.INT, 20)
    8  :         Int(TK.INT, 30)
    9  :         Int(TK.INT, 60)
   10  :         Int(TK.INT, 90)

tree4:  (open, high, low, close, adj_close) = yahoo( file='spq500.csv', periods['train5'] )
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     List(TK.TUPLE, [Ref(), Ref(), Ref(), Ref(), Ref()])
    3  :         Ref(TK.IDNT, 'open')
    4  :         Ref(TK.IDNT, 'high')
    5  :         Ref(TK.IDNT, 'low')
    6  :         Ref(TK.IDNT, 'close')
    7  :         Ref(TK.IDNT, 'adj_close')
    8  :     FnCall('yahoo')
    9  :         Get(TK.IDNT, 'yahoo')
   10  :         List(TK.TUPLE, [Define(), Index()])
   11  :             Define(TK.DEFINE, TK.EQLS, '=')
   12  :                 Ref(TK.IDNT, 'file')
   13  :                 Str(TK.STR, spq500.csv)
   14  :             Index('periods')
   15  :                 Get(TK.IDNT, 'periods')
   16  :                 List(TK.TUPLE, [Str()])
   17  :                     Str(TK.STR, train5)

tree5:  atr = (high + low) / 2
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'atr')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDNT, 'high')
    6  :             Get(TK.IDNT, 'low')
    7  :         Int(TK.INT, 2)

tree6:  median_price = (open + close) / 2
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'median_price')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDNT, 'open')
    6  :             Get(TK.IDNT, 'close')
    7  :         Int(TK.INT, 2)

tree7:  price10a := _.delay(1d)[10:00]
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'price10a')
    3  :     PropRef(TK.REF, '.')
    4  :         Get(TK.ANON, '_')
    5  :         FnCall('delay')
    6  :             Get(TK.IDNT, 'delay')
    7  :             List(TK.TUPLE, [Duration()])
    8  :                 Duration(TK.DUR, 1 day, 0:00:00)

tree8:  price10a := _.delay(1d)[10:00]
    1  : List(TK.LIST, [Time()])
    2  :     Time(TK.TIME, 10:00:00)

tree9:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'report')
    3  :     Block(TK.BLOCK, v=[Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Get(), FnCall()], '|')
    5  :             Get(TK.IDNT, 'trades')
    6  :             FnCall('select')
    7  :                 Ref(TK.IDNT, 'select')
    8  :                 List(TK.TUPLE, [Str(), Str(), Str(), Str(), Str()])
    9  :                     Str(TK.STR, symbol)
   10  :                     Str(TK.STR, buy_date)
   11  :                     Str(TK.STR, buy_price)
   12  :                     Str(TK.STR, sell_date)
   13  :                     Str(TK.STR, sell_price)

tree10:  rules := {
    1  : DefineVar(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'rules')
    3  :     Block(TK.BLOCK, v=[Define(), Define(), Define(), Define(), Block()], '')
    4  :         Define(TK.DEFINE, TK.EQLS, '=')
    5  :             Ref(TK.IDNT, 'baseline')
    6  :             Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    7  :                 UnaryOp(TK.ANY, TK.ANY, 'any')
    8  :                     Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
    9  :                         Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   10  :                             Flow(TK.CHAIN, v=[Define(), FnCall()], '|')
   11  :                                 Define(TK.DEFINE, TK.COLN, ':')
   12  :                                     Block(TK.BLOCK, v=[BinOp(), BinOp(), BinOp()], '')
   13  :                                         BinOp(TK.RISE_ABOVE, '|>')
   14  :                                             Ref(TK.IDNT, 'close')
   15  :                                             FnCall('sma')
   16  :                                                 Ref(TK.IDNT, 'sma')
   17  :                                                 List(TK.TUPLE, [Int()])
   18  :                                                     Int(TK.INT, 10)
   19  :                                         BinOp(TK.RISE_ABOVE, '|>')
   20  :                                             Ref(TK.IDNT, 'close')
   21  :                                             FnCall('sma')
   22  :                                                 Ref(TK.IDNT, 'sma')
   23  :                                                 List(TK.TUPLE, [Int()])
   24  :                                                     Int(TK.INT, 20)
   25  :                                         BinOp(TK.RISE_ABOVE, '|>')
   26  :                                             FnCall('sma')
   27  :                                                 Ref(TK.IDNT, 'sma')
   28  :                                                 List(TK.TUPLE, [Int()])
   29  :                                                     Int(TK.INT, 10)
   30  :                                             FnCall('sma')
   31  :                                                 Ref(TK.IDNT, 'sma')
   32  :                                                 List(TK.TUPLE, [Int()])
   33  :                                                     Int(TK.INT, 20)
   34  :                                     Define(TK.DEFINE, TK.EQLS, '=')
   35  :                                         Ref(TK.IDNT, 'threshold')
   36  :                                         Float(TK.FLOT, 0.01)
   37  :                                 FnCall('signal')
   38  :                                     Ref(TK.IDNT, 'signal')
   39  :                                     List(TK.TUPLE, [Ref()])
   40  :                                         Ref(TK.IDNT, 'close')
   41  :                             FnCall('delay')
   42  :                                 Ref(TK.IDNT, 'delay')
   43  :                                 List(TK.TUPLE, [Duration()])
   44  :                                     Duration(TK.DUR, 1 day, 0:00:00)
   45  :                         FnCall('buy')
   46  :                             Ref(TK.BUY, 'buy')
   47  :                             List(TK.TUPLE, [Ref()])
   48  :                                 Ref(TK.IDNT, 'atr')
   49  :                 Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
   50  :                     Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   51  :                         Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   52  :                             BinOp(TK.FALL_BELOW, '<|')
   53  :                                 Get(TK.IDNT, 'close')
   54  :                                 FnCall('sma')
   55  :                                     Get(TK.IDNT, 'sma')
   56  :                                     List(TK.TUPLE, [Int()])
   57  :                                         Int(TK.INT, 10)
   58  :                             FnCall('signal')
   59  :                                 Ref(TK.IDNT, 'signal')
   60  :                                 List(TK.TUPLE, [Ref()])
   61  :                                     Ref(TK.IDNT, 'close')
   62  :                         FnCall('delay')
   63  :                             Ref(TK.IDNT, 'delay')
   64  :                             List(TK.TUPLE, [Duration()])
   65  :                                 Duration(TK.DUR, 1 day, 0:00:00)
   66  :                     FnCall('sell')
   67  :                         Ref(TK.SELL, 'sell')
   68  :                         List(TK.TUPLE, [Ref()])
   69  :                             Ref(TK.IDNT, 'atr')
   70  :         Define(TK.DEFINE, TK.EQLS, '=')
   71  :             Ref(TK.IDNT, 'scenario1')
   72  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   73  :                 Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
   74  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
   75  :                         Flow(TK.CHAIN, v=[Block(), ApplyChainProd()], '|')
   76  :                             Block(TK.BLOCK, v=[BinOp()], '')
   77  :                                 BinOp(TK.RISE_ABOVE, '|>')
   78  :                                     Get(TK.IDNT, 'close')
   79  :                                     FnCall('sma')
   80  :                                         Get(TK.IDNT, 'sma')
   81  :                                         List(TK.TUPLE, [Get()])
   82  :                                             Get(TK.IDNT, 'r2')
   83  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   84  :                                 Ref(TK.IDNT, 'signal')
   85  :                         PropRef(TK.REF, '.')
   86  :                             Ref(TK.IDNT, 'atr')
   87  :                             FnCall('delay')
   88  :                                 Ref(TK.IDNT, 'delay')
   89  :                                 List(TK.TUPLE, [Duration()])
   90  :                                     Duration(TK.DUR, 1 day, 0:00:00)
   91  :                     FnCall('buy')
   92  :                         Ref(TK.BUY, 'buy')
   93  :                         List(TK.TUPLE, [Ref()])
   94  :                             Ref(TK.IDNT, 'atr')
   95  :                 Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
   96  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
   97  :                         Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   98  :                             BinOp(TK.FALL_BELOW, '<|')
   99  :                                 Get(TK.IDNT, 'close')
  100  :                                 FnCall('sma')
  101  :                                     Get(TK.IDNT, 'sma')
  102  :                                     List(TK.TUPLE, [Get()])
  103  :                                         Get(TK.IDNT, 'r1')
  104  :                             FnCall('signal')
  105  :                                 Ref(TK.IDNT, 'signal')
  106  :                                 List(TK.TUPLE, [Ref()])
  107  :                                     Ref(TK.IDNT, 'close')
  108  :                         PropRef(TK.REF, '.')
  109  :                             Ref(TK.IDNT, 'atr')
  110  :                             FnCall('delay')
  111  :                                 Ref(TK.IDNT, 'delay')
  112  :                                 List(TK.TUPLE, [Duration()])
  113  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  114  :                     FnCall('sell')
  115  :                         Ref(TK.SELL, 'sell')
  116  :                         List(TK.TUPLE, [Ref()])
  117  :                             Ref(TK.IDNT, 'atr')
  118  :         Define(TK.DEFINE, TK.EQLS, '=')
  119  :             Ref(TK.IDNT, 'scenario2')
  120  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
  121  :                 Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
  122  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  123  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
  124  :                             Define(TK.DEFINE, TK.COLN, ':')
  125  :                                 Block(TK.BLOCK, v=[BinOp()], '')
  126  :                                     BinOp(TK.RISE_ABOVE, '|>')
  127  :                                         Ref(TK.IDNT, 'close')
  128  :                                         FnCall('sma')
  129  :                                             Ref(TK.IDNT, 'sma')
  130  :                                             List(TK.TUPLE, [Ref()])
  131  :                                                 Ref(TK.IDNT, 'r1')
  132  :                                 Define(TK.DEFINE, TK.EQLS, '=')
  133  :                                     Ref(TK.IDNT, 'threshold')
  134  :                                     Float(TK.FLOT, 0.01)
  135  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  136  :                                 Ref(TK.IDNT, 'signal')
  137  :                         PropRef(TK.REF, '.')
  138  :                             Ref(TK.IDNT, 'atr')
  139  :                             FnCall('delay')
  140  :                                 Ref(TK.IDNT, 'delay')
  141  :                                 List(TK.TUPLE, [Duration()])
  142  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  143  :                     FnCall('buy')
  144  :                         Ref(TK.BUY, 'buy')
  145  :                         List(TK.TUPLE, [Ref()])
  146  :                             Ref(TK.IDNT, 'atr')
  147  :                 Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
  148  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  149  :                         Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
  150  :                             BinOp(TK.FALL_BELOW, '<|')
  151  :                                 Get(TK.IDNT, 'close')
  152  :                                 FnCall('sma')
  153  :                                     Get(TK.IDNT, 'sma')
  154  :                                     List(TK.TUPLE, [Get()])
  155  :                                         Get(TK.IDNT, 'r1')
  156  :                             FnCall('signal')
  157  :                                 Ref(TK.IDNT, 'signal')
  158  :                                 List(TK.TUPLE, [Ref()])
  159  :                                     Ref(TK.IDNT, 'close')
  160  :                         PropRef(TK.REF, '.')
  161  :                             Ref(TK.IDNT, 'atr')
  162  :                             FnCall('delay')
  163  :                                 Ref(TK.IDNT, 'delay')
  164  :                                 List(TK.TUPLE, [Duration()])
  165  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  166  :                     FnCall('sell')
  167  :                         Ref(TK.SELL, 'sell')
  168  :                         List(TK.TUPLE, [Ref()])
  169  :                             Ref(TK.IDNT, 'atr')
  170  :         Define(TK.DEFINE, TK.EQLS, '=')
  171  :             Ref(TK.IDNT, 'scenario3')
  172  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
  173  :                 Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
  174  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  175  :                         Flow(TK.CHAIN, v=[Block(), ApplyChainProd()], '|')
  176  :                             Block(TK.BLOCK, v=[BinOp()], '')
  177  :                                 BinOp(TK.RISE_ABOVE, '|>')
  178  :                                     FnCall('sma')
  179  :                                         Get(TK.IDNT, 'sma')
  180  :                                         List(TK.TUPLE, [Get()])
  181  :                                             Get(TK.IDNT, 'r1')
  182  :                                     FnCall('sma')
  183  :                                         Get(TK.IDNT, 'sma')
  184  :                                         List(TK.TUPLE, [Get()])
  185  :                                             Get(TK.IDNT, 'r2')
  186  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  187  :                                 Ref(TK.IDNT, 'signal')
  188  :                         PropRef(TK.REF, '.')
  189  :                             Ref(TK.IDNT, 'atr')
  190  :                             FnCall('delay')
  191  :                                 Ref(TK.IDNT, 'delay')
  192  :                                 List(TK.TUPLE, [Duration()])
  193  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  194  :                     FnCall('buy')
  195  :                         Ref(TK.BUY, 'buy')
  196  :                         List(TK.TUPLE, [Ref()])
  197  :                             Ref(TK.IDNT, 'atr')
  198  :                 Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
  199  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  200  :                         Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
  201  :                             BinOp(TK.FALL_BELOW, '<|')
  202  :                                 Get(TK.IDNT, 'close')
  203  :                                 FnCall('sma')
  204  :                                     Get(TK.IDNT, 'sma')
  205  :                                     List(TK.TUPLE, [Get()])
  206  :                                         Get(TK.IDNT, 'r1')
  207  :                             FnCall('signal')
  208  :                                 Ref(TK.IDNT, 'signal')
  209  :                                 List(TK.TUPLE, [Ref()])
  210  :                                     Ref(TK.IDNT, 'close')
  211  :                         PropRef(TK.REF, '.')
  212  :                             Ref(TK.IDNT, 'atr')
  213  :                             FnCall('delay')
  214  :                                 Ref(TK.IDNT, 'delay')
  215  :                                 List(TK.TUPLE, [Duration()])
  216  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  217  :                     FnCall('sell')
  218  :                         Ref(TK.SELL, 'sell')
  219  :                         List(TK.TUPLE, [Ref()])
  220  :                             Ref(TK.IDNT, 'atr')
  221  :         Block(TK.BLOCK, v=[Flow(), Flow()], '')
  222  :             Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
  223  :                 Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  224  :                     Flow(TK.CHAIN, v=[Block(), ApplyChainProd()], '|')
  225  :                         Block(TK.BLOCK, v=[BinOp()], '')
  226  :                             BinOp(TK.RISE_ABOVE, '|>')
  227  :                                 Get(TK.IDNT, 'close')
  228  :                                 FnCall('sma')
  229  :                                     Get(TK.IDNT, 'sma')
  230  :                                     List(TK.TUPLE, [Get()])
  231  :                                         Get(TK.IDNT, 'r1')
  232  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  233  :                             Ref(TK.IDNT, 'signal')
  234  :                     PropRef(TK.REF, '.')
  235  :                         Ref(TK.IDNT, 'atr')
  236  :                         FnCall('delay')
  237  :                             Ref(TK.IDNT, 'delay')
  238  :                             List(TK.TUPLE, [Duration()])
  239  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  240  :                 FnCall('buy')
  241  :                     Ref(TK.BUY, 'buy')
  242  :                     List(TK.TUPLE, [Ref()])
  243  :                         Ref(TK.IDNT, 'atr')
  244  :             Flow(TK.RAISE, v=[Flow(), FnCall()], '->')
  245  :                 Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  246  :                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
  247  :                         BinOp(TK.FALL_BELOW, '<|')
  248  :                             Get(TK.IDNT, 'close')
  249  :                             FnCall('sma')
  250  :                                 Get(TK.IDNT, 'sma')
  251  :                                 List(TK.TUPLE, [Get()])
  252  :                                     Get(TK.IDNT, 'r2')
  253  :                         FnCall('signal')
  254  :                             Ref(TK.IDNT, 'signal')
  255  :                             List(TK.TUPLE, [Ref()])
  256  :                                 Ref(TK.IDNT, 'close')
  257  :                     PropRef(TK.REF, '.')
  258  :                         Ref(TK.IDNT, 'atr')
  259  :                         FnCall('delay')
  260  :                             Ref(TK.IDNT, 'delay')
  261  :                             List(TK.TUPLE, [Duration()])
  262  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  263  :                 FnCall('sell')
  264  :                     Ref(TK.SELL, 'sell')
  265  :                     List(TK.TUPLE, [Ref()])
  266  :                         Ref(TK.IDNT, 'atr')

tree11:  backtest( rules:{r1=sma_periods1, r2=sma_periods2}, period=period['train'])
    1  : FnCall('backtest')
    2  :     Get(TK.IDNT, 'backtest')
    3  :     List(TK.TUPLE, [Define(), Define()])
    4  :         Define(TK.DEFINE, TK.COLN, ':')
    5  :             Ref(TK.IDNT, 'rules')
    6  :             Set(TK.SET, [Define(), Define()])
    7  :                 Define(TK.DEFINE, TK.EQLS, '=')
    8  :                     Ref(TK.IDNT, 'r1')
    9  :                     Get(TK.IDNT, 'sma_periods1')
   10  :                 Define(TK.DEFINE, TK.EQLS, '=')
   11  :                     Ref(TK.IDNT, 'r2')
   12  :                     Get(TK.IDNT, 'sma_periods2')
   13  :         Define(TK.DEFINE, TK.EQLS, '=')
   14  :             Ref(TK.IDNT, 'period')
   15  :             Index('period')
   16  :                 Get(TK.IDNT, 'period')
   17  :                 List(TK.TUPLE, [Str()])
   18  :                     Str(TK.STR, train)

tree12:  rules >> report | print
    1  : Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    2  :     Flow(TK.APPLY, v=[Get(), ApplyChainProd()], '>>')
    3  :         Get(TK.IDNT, 'rules')
    4  :         ApplyChainProd(TK.DEFINE, TK.APPLY, '>>')
    5  :             Ref(TK.IDNT, 'report')
    6  :     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
    7  :         Ref(TK.IDNT, 'print')
