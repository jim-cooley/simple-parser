

test: "# sample rules file for pyser / qtradr

periods = {
    'train': (today-2y)..today
}
sma_periods1 = [3,5,10..20,28]
sma_periods2 = [5,10,12,20,30,60,90]

var r = range(sma_periods1)
var r2 = range(sma_periods2)

(open, high, low, close, adj_close) = yahoo( file='spq500.csv', 2y )
atr = (high + low) / 2
median_price = (open + close) / 2
price10a = price.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

rules: {
    baseline = {
        any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
        close <| sma(10) | signal >> delay(1d) | atr -> sell
    },
    scenario1 = {
        { close >| sma(r2) } | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    scenario2 = {
        { close >| sma(r1) }:(threshold=0.01) | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    scenario3 = {
        { sma(r1) >| sma(r2) } | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    {
        { close >| sma(r1) } | signal >> atr.delay(1d) => buy,
        close <| sma(r2) | signal >> atr.delay(1d) => sell
    }
}

backtest( rules, period=period['train'])
report >> rules | print
"

tree1:  periods = {
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'periods', V=periods)
    3 :     Set TK.SET(SET, '{', V=[BinOp()])
    4 :         BinOp TK.TUPLE(BINOP, ':', V=None)
    5 :             Str TK.STR(LITERAL, 'train', V=train)
    6 :             BinOp TK.RANGE(BINOP, '..', V=None)
    7 :                 BinOp TK.SUB(BINOP, '-', V=None)
    8 :                     Ident TK.TODAY(KEYWORD, 'today', V=today)
    9 :                     Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)
   10 :                 Ident TK.TODAY(KEYWORD, 'today', V=today)

tree2:  sma_periods1 = [3,5,10..20,28]
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'sma_periods1', V=sma_periods1)
    3 :     List TK.LIST(LIST, '[', V=[Int(), Int(), BinOp(), Int()])
    4 :         Int TK.INT(LITERAL, '3', V=3)
    5 :         Int TK.INT(LITERAL, '5', V=5)
    6 :         BinOp TK.RANGE(BINOP, '.', V=None)
    7 :             Float TK.FLOT(LITERAL, '10.', V=10.0)
    8 :             Int TK.INT(LITERAL, '20', V=20)
    9 :         Int TK.INT(LITERAL, '28', V=28)

tree3:  sma_periods2 = [5,10,12,20,30,60,90]
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'sma_periods2', V=sma_periods2)
    3 :     List TK.LIST(LIST, '[', V=[Int(), Int(), Int(), Int(), Int(), Int(), Int()])
    4 :         Int TK.INT(LITERAL, '5', V=5)
    5 :         Int TK.INT(LITERAL, '10', V=10)
    6 :         Int TK.INT(LITERAL, '12', V=12)
    7 :         Int TK.INT(LITERAL, '20', V=20)
    8 :         Int TK.INT(LITERAL, '30', V=30)
    9 :         Int TK.INT(LITERAL, '60', V=60)
   10 :         Int TK.INT(LITERAL, '90', V=90)

tree4:  var r = range(sma_periods1)
result: None
    1 : UnaryOp TK.VAR(UNARY, 'var', V=None)
    2 :     BinOp TK.ASSIGN(BINOP, '=', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'r', V=r)
    4 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    5 :             Ident TK.IDNT(IDENTIFIER, 'range', V=range)
    6 :             List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
    7 :                 Ident TK.IDNT(IDENTIFIER, 'sma_periods1', V=sma_periods1)

tree5:  var r2 = range(sma_periods2)
result: None
    1 : UnaryOp TK.VAR(UNARY, 'var', V=None)
    2 :     BinOp TK.ASSIGN(BINOP, '=', V=None)
    3 :         Ident TK.IDNT(IDENTIFIER, 'r2', V=r2)
    4 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    5 :             Ident TK.IDNT(IDENTIFIER, 'range', V=range)
    6 :             List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
    7 :                 Ident TK.IDNT(IDENTIFIER, 'sma_periods2', V=sma_periods2)

tree6:  (open, high, low, close, adj_close) = yahoo( file='spq500.csv', 2y )
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     List TK.PARAMETER_LIST(LIST, '(', V=[Ident(), Ident(), Ident(), Ident(), Ident()])
    3 :         Ident TK.IDNT(DATASET, 'open', V=open)
    4 :         Ident TK.IDNT(DATASET, 'high', V=high)
    5 :         Ident TK.IDNT(DATASET, 'low', V=low)
    6 :         Ident TK.IDNT(DATASET, 'close', V=close)
    7 :         Ident TK.IDNT(IDENTIFIER, 'adj_close', V=adj_close)
    8 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    9 :         Ident TK.IDNT(IDENTIFIER, 'yahoo', V=yahoo)
   10 :         List TK.PARAMETER_LIST(LIST, '(', V=[BinOp(), Duration()])
   11 :             BinOp TK.ASSIGN(BINOP, '=', V=None)
   12 :                 Ident TK.IDNT(IDENTIFIER, 'file', V=file)
   13 :                 Str TK.STR(LITERAL, 'spq500.csv', V=spq500.csv)
   14 :             Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)

tree7:  atr = (high + low) / 2
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'high', V=high)
    6 :             Ident TK.IDNT(DATASET, 'low', V=low)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree8:  median_price = (open + close) / 2
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'median_price', V=median_price)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Ident TK.IDNT(DATASET, 'open', V=open)
    6 :             Ident TK.IDNT(DATASET, 'close', V=close)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree9:  price10a = price.delay(1d)[10:00]
result: None
    1 : BinOp TK.ASSIGN(BINOP, '=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'price10a', V=price10a)
    3 :     PropRef TK.REF(BINOP, '.', V=None)
    4 :         Ident TK.IDNT(IDENTIFIER, 'price', V=price)
    5 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
    7 :             List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
    8 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)

tree10:  price10a = price.delay(1d)[10:00]
result: time(10:00:00)
    1 : List TK.LIST(LIST, '[', V=[Time()])
    2 :     Time TK.TIME(LITERAL, '10:00', V=10:00:00)

tree11:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
result: None
    1 : BinOp TK.DEFINE(BINOP, ':=', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    3 :     Set TK.SET(SET, '{', V=[List()])
    4 :         List TK.CHAIN(LIST, '|', V=[Ident(), FnCall()])
    5 :             Ident TK.IDNT(IDENTIFIER, 'trades', V=trades)
    6 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                 Ident TK.IDNT(KEYWORD, 'select', V=select)
    8 :                 List TK.PARAMETER_LIST(LIST, '(', V=[Str(), Str(), Str(), Str(), Str()])
    9 :                     Str TK.STR(LITERAL, 'symbol', V=symbol)
   10 :                     Str TK.STR(LITERAL, 'buy_date', V=buy_date)
   11 :                     Str TK.STR(LITERAL, 'buy_price', V=buy_price)
   12 :                     Str TK.STR(LITERAL, 'sell_date', V=sell_date)
   13 :                     Str TK.STR(LITERAL, 'sell_price', V=sell_price)

tree12:  rules: {
result: None
    1 : BinOp TK.TUPLE(BINOP, ':', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    3 :     Set TK.SET(SET, '{', V=[BinOp(), BinOp(), BinOp(), BinOp(), Set()])
    4 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
    5 :             Ident TK.IDNT(IDENTIFIER, 'baseline', V=baseline)
    6 :             Set TK.SET(SET, '{', V=[List(), List()])
    7 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
    8 :                     List TK.CHAIN(LIST, '|', V=[List(), Ident()])
    9 :                         List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   10 :                             List TK.CHAIN(LIST, '|', V=[UnaryOp(), Ident()])
   11 :                                 UnaryOp TK.ANY(UNARY, 'any:', V=None)
   12 :                                     BinOp TK.TUPLE(BINOP, ':', V=None)
   13 :                                         Set TK.SET(SET, '{', V=[BinOp(), BinOp(), BinOp()])
   14 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   15 :                                                 Ident TK.IDNT(DATASET, 'close', V=close)
   16 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   17 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   18 :                                                     List TK.PARAMETER_LIST(LIST, '(', V=[Int()])
   19 :                                                         Int TK.INT(LITERAL, '10', V=10)
   20 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   21 :                                                 Ident TK.IDNT(DATASET, 'close', V=close)
   22 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   23 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   24 :                                                     List TK.PARAMETER_LIST(LIST, '(', V=[Int()])
   25 :                                                         Int TK.INT(LITERAL, '20', V=20)
   26 :                                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   27 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   28 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   29 :                                                     List TK.PARAMETER_LIST(LIST, '(', V=[Int()])
   30 :                                                         Int TK.INT(LITERAL, '10', V=10)
   31 :                                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   32 :                                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   33 :                                                     List TK.PARAMETER_LIST(LIST, '(', V=[Int()])
   34 :                                                         Int TK.INT(LITERAL, '20', V=20)
   35 :                                         BinOp TK.ASSIGN(BINOP, '=', V=None)
   36 :                                             Ident TK.IDNT(IDENTIFIER, 'threshold', V=threshold)
   37 :                                             Float TK.FLOT(LITERAL, '0.01', V=0.01)
   38 :                                 Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   39 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   40 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   41 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
   42 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   43 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   44 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
   45 :                 List TK.RAISE(LIST, '->', V=[List(), Ident()])
   46 :                     List TK.CHAIN(LIST, '|', V=[List(), Ident()])
   47 :                         List TK.APPLY(LIST, '>>', V=[List(), FnCall()])
   48 :                             List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
   49 :                                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   50 :                                     Ident TK.IDNT(DATASET, 'close', V=close)
   51 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   52 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   53 :                                         List TK.PARAMETER_LIST(LIST, '(', V=[Int()])
   54 :                                             Int TK.INT(LITERAL, '10', V=10)
   55 :                                 Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   56 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   57 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   58 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
   59 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   60 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   61 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
   62 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
   63 :             Ident TK.IDNT(IDENTIFIER, 'scenario1', V=scenario1)
   64 :             Set TK.SET(SET, '{', V=[List(), List()])
   65 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
   66 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
   67 :                         List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
   68 :                             Set TK.SET(SET, '{', V=[BinOp()])
   69 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   70 :                                     Ident TK.IDNT(DATASET, 'close', V=close)
   71 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   72 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   73 :                                         List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
   74 :                                             Ident TK.IDNT(IDENTIFIER, 'r2', V=r2)
   75 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   76 :                         PropRef TK.REF(BINOP, '.', V=None)
   77 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   78 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   79 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   80 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
   81 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   82 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
   83 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
   84 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
   85 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
   86 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   87 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
   88 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   89 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
   90 :                                     List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
   91 :                                         Ident TK.IDNT(IDENTIFIER, 'r1', V=r1)
   92 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
   93 :                         PropRef TK.REF(BINOP, '.', V=None)
   94 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
   95 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   96 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
   97 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
   98 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   99 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  100 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
  101 :             Ident TK.IDNT(IDENTIFIER, 'scenario2', V=scenario2)
  102 :             Set TK.SET(SET, '{', V=[List(), List()])
  103 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  104 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  105 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  106 :                             BinOp TK.TUPLE(BINOP, ':', V=None)
  107 :                                 Set TK.SET(SET, '{', V=[BinOp()])
  108 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  109 :                                         Ident TK.IDNT(DATASET, 'close', V=close)
  110 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  111 :                                             Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  112 :                                             List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
  113 :                                                 Ident TK.IDNT(IDENTIFIER, 'r1', V=r1)
  114 :                                 BinOp TK.ASSIGN(BINOP, '=', V=None)
  115 :                                     Ident TK.IDNT(IDENTIFIER, 'threshold', V=threshold)
  116 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
  117 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  118 :                         PropRef TK.REF(BINOP, '.', V=None)
  119 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  120 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  121 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  122 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
  123 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  124 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
  125 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  126 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  127 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  128 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  129 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  130 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  131 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  132 :                                     List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
  133 :                                         Ident TK.IDNT(IDENTIFIER, 'r1', V=r1)
  134 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  135 :                         PropRef TK.REF(BINOP, '.', V=None)
  136 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  137 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  138 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  139 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
  140 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  141 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  142 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
  143 :             Ident TK.IDNT(IDENTIFIER, 'scenario3', V=scenario3)
  144 :             Set TK.SET(SET, '{', V=[List(), List()])
  145 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  146 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  147 :                         List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
  148 :                             Set TK.SET(SET, '{', V=[BinOp()])
  149 :                                 BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  150 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
  151 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  152 :                                         List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
  153 :                                             Ident TK.IDNT(IDENTIFIER, 'r1', V=r1)
  154 :                                     FnCall TK.FUNCTION(BINOP, '(', V=None)
  155 :                                         Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  156 :                                         List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
  157 :                                             Ident TK.IDNT(IDENTIFIER, 'r2', V=r2)
  158 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  159 :                         PropRef TK.REF(BINOP, '.', V=None)
  160 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  161 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  162 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  163 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
  164 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  165 :                     Ident TK.BUY(KEYWORD, 'buy', V=buy)
  166 :                 List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  167 :                     List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  168 :                         List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  169 :                             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  170 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  171 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  172 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  173 :                                     List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
  174 :                                         Ident TK.IDNT(IDENTIFIER, 'r1', V=r1)
  175 :                             Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  176 :                         PropRef TK.REF(BINOP, '.', V=None)
  177 :                             Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  178 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  179 :                                 Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  180 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
  181 :                                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  182 :                     Ident TK.SELL(KEYWORD, 'sell', V=sell)
  183 :         Set TK.SET(SET, '{', V=[List(), List()])
  184 :             List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  185 :                 List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  186 :                     List TK.CHAIN(LIST, '|', V=[Set(), Ident()])
  187 :                         Set TK.SET(SET, '{', V=[BinOp()])
  188 :                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
  189 :                                 Ident TK.IDNT(DATASET, 'close', V=close)
  190 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
  191 :                                     Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  192 :                                     List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
  193 :                                         Ident TK.IDNT(IDENTIFIER, 'r1', V=r1)
  194 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  195 :                     PropRef TK.REF(BINOP, '.', V=None)
  196 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  197 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  198 :                             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  199 :                             List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
  200 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  201 :                 Ident TK.BUY(KEYWORD, 'buy', V=buy)
  202 :             List TK.RAISE(LIST, '=>', V=[List(), Ident()])
  203 :                 List TK.APPLY(LIST, '>>', V=[List(), PropRef()])
  204 :                     List TK.CHAIN(LIST, '|', V=[BinOp(), Ident()])
  205 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
  206 :                             Ident TK.IDNT(DATASET, 'close', V=close)
  207 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
  208 :                                 Ident TK.IDNT(FUNCTION, 'sma', V=sma)
  209 :                                 List TK.PARAMETER_LIST(LIST, '(', V=[Ident()])
  210 :                                     Ident TK.IDNT(IDENTIFIER, 'r2', V=r2)
  211 :                         Ident TK.SIGNAL(KEYWORD, 'signal', V=signal)
  212 :                     PropRef TK.REF(BINOP, '.', V=None)
  213 :                         Ident TK.IDNT(IDENTIFIER, 'atr', V=atr)
  214 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
  215 :                             Ident TK.IDNT(IDENTIFIER, 'delay', V=delay)
  216 :                             List TK.PARAMETER_LIST(LIST, '(', V=[Duration()])
  217 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
  218 :                 Ident TK.SELL(KEYWORD, 'sell', V=sell)

tree13:  backtest( rules, period=period['train'])
result: None
    1 : FnCall TK.FUNCTION(BINOP, '(', V=None)
    2 :     Ident TK.IDNT(IDENTIFIER, 'backtest', V=backtest)
    3 :     List TK.PARAMETER_LIST(LIST, '(', V=[Ident(), BinOp()])
    4 :         Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    5 :         BinOp TK.ASSIGN(BINOP, '=', V=None)
    6 :             Ident TK.IDNT(IDENTIFIER, 'period', V=period)
    7 :             Index TK.INDEX(BINOP, '[', V=None)
    8 :                 Ident TK.IDNT(IDENTIFIER, 'period', V=period)
    9 :                 List TK.TUPLE(LIST, '[', V=[Str()])
   10 :                     Str TK.STR(LITERAL, 'train', V=train)

tree14:  report >> rules | print
result: list([Ident(), Ident()])
    1 : List TK.CHAIN(LIST, '|', V=[List(), Ident()])
    2 :     List TK.APPLY(LIST, '>>', V=[Ident(), Ident()])
    3 :         Ident TK.IDNT(IDENTIFIER, 'report', V=report)
    4 :         Ident TK.IDNT(IDENTIFIER, 'rules', V=rules)
    5 :     Ident TK.IDNT(IDENTIFIER, 'print', V=print)
