

test:
"# sample rules file for pyser / qtradr
{ close }:(threshold=5) | signal

rules >> report | print



periods = {
    'train': (today-2y)..today
}
sma_periods1 = [3,5,10..20,28]
sma_periods2 = [5,10,12,20,30,60,90]

var r = range(sma_periods1)
var r2 = range(sma_periods2)

(open, high, low, close, adj_close) = yahoo( file='spq500.csv', 2y )
atr = (high + low) / 2
median_price = (open + close) / 2
price10a = price.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

rules: {
    baseline = {
        any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
        close <| sma(10) | signal >> delay(1d) | atr -> sell
    },
    scenario1 = {
        { close >| sma(r2) } | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    scenario2 = {
        { close >| sma(r1) }:(threshold=0.01) | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    scenario3 = {
        { sma(r1) >| sma(r2) } | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    {
        { close >| sma(r1) } | signal >> atr.delay(1d) => buy,
        close <| sma(r2) | signal >> atr.delay(1d) => sell
    }
}

backtest( rules, period=period['train'])
rules >> report | print
"

tree1:  { close }:(threshold=5) | signal
result: list([Define(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    2 :     Define TK.COLN(NONE, ':', V=None)
    3 :         Set TK.SET(LITERAL, '{', V=None)
    4 :         Define TK.EQLS(BINOP, '=', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
    6 :             Int TK.INT(LITERAL, '5', V=5)
    7 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
    8 :         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)

tree2:  rules >> report | print
result: list([Flow(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.APPLY(NONE, '>>', V=[Get(), ApplyChainProd()])
    3 :         Get TK.IDNT(IDENTIFIER, 'rules', V=None)
    4 :         ApplyChainProd TK.APPLY(UNARY, '', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    6 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'print', V=None)

tree3:  periods = {
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'periods', V=None)
    3 :     Set TK.SET(LITERAL, '{', V=None)

tree4:  sma_periods1 = [3,5,10..20,28]
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'sma_periods1', V=None)
    3 :     List TK.LIST(LITERAL, '[', V=[Int(), Int(), BinOp(), Int()])
    4 :         Int TK.INT(LITERAL, '3', V=3)
    5 :         Int TK.INT(LITERAL, '5', V=5)
    6 :         BinOp TK.RANGE(BINOP, '.', V=None)
    7 :             Float TK.FLOT(LITERAL, '10.', V=10.0)
    8 :             Int TK.INT(LITERAL, '20', V=20)
    9 :         Int TK.INT(LITERAL, '28', V=28)

tree5:  sma_periods2 = [5,10,12,20,30,60,90]
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'sma_periods2', V=None)
    3 :     List TK.LIST(LITERAL, '[', V=[Int(), Int(), Int(), Int(), Int(), Int(), Int()])
    4 :         Int TK.INT(LITERAL, '5', V=5)
    5 :         Int TK.INT(LITERAL, '10', V=10)
    6 :         Int TK.INT(LITERAL, '12', V=12)
    7 :         Int TK.INT(LITERAL, '20', V=20)
    8 :         Int TK.INT(LITERAL, '30', V=30)
    9 :         Int TK.INT(LITERAL, '60', V=60)
   10 :         Int TK.INT(LITERAL, '90', V=90)

tree6:  var r = range(sma_periods1)
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'r', V=None)
    3 :     DefineFn TK.FUNCTION(BINOP, '(', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'range', V=None)
    5 :         List TK.TUPLE(LITERAL, '(', V=[Ref()])
    6 :             Ref TK.IDNT(IDENTIFIER, 'sma_periods1', V=None)

tree7:  var r2 = range(sma_periods2)
result: Lit(None)
    1 : DefineVar TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'r2', V=None)
    3 :     DefineFn TK.FUNCTION(BINOP, '(', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'range', V=None)
    5 :         List TK.TUPLE(LITERAL, '(', V=[Ref()])
    6 :             Ref TK.IDNT(IDENTIFIER, 'sma_periods2', V=None)

tree8:  (open, high, low, close, adj_close) = yahoo( file='spq500.csv', 2y )
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     List TK.TUPLE(LITERAL, '(', V=[Ref(), Ref(), Ref(), Ref(), Ref()])
    3 :         Ref TK.IDNT(IDENTIFIER, 'open', V=None)
    4 :         Ref TK.IDNT(IDENTIFIER, 'high', V=None)
    5 :         Ref TK.IDNT(IDENTIFIER, 'low', V=None)
    6 :         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'adj_close', V=None)
    8 :     FnCall TK.FUNCTION(BINOP, '(', V=None)
    9 :         Get TK.IDNT(IDENTIFIER, 'yahoo', V=None)
   10 :         List TK.TUPLE(LITERAL, '(', V=[Define(), Duration()])
   11 :             Define TK.EQLS(BINOP, '=', V=None)
   12 :                 Ref TK.IDNT(IDENTIFIER, 'file', V=None)
   13 :                 Str TK.STR(LITERAL, 'spq500.csv', V=spq500.csv)
   14 :             Duration TK.DUR(LITERAL, '2y', V=730 days, 0:00:00)

tree9:  atr = (high + low) / 2
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'high', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'low', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree10:  median_price = (open + close) / 2
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'median_price', V=None)
    3 :     BinOp TK.DIV(BINOP, '/', V=None)
    4 :         BinOp TK.ADD(BINOP, '+', V=None)
    5 :             Get TK.IDNT(IDENTIFIER, 'open', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :         Int TK.INT(LITERAL, '2', V=2)

tree11:  price10a = price.delay(1d)[10:00]
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'price10a', V=None)
    3 :     PropRef TK.REF(BINOP, '.', V=None)
    4 :         Get TK.IDNT(IDENTIFIER, 'price', V=None)
    5 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :             Get TK.IDNT(IDENTIFIER, 'delay', V=None)
    7 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
    8 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)

tree12:  price10a = price.delay(1d)[10:00]
result: list([Time()])
    1 : List TK.LIST(LITERAL, '[', V=[Time()])
    2 :     Time TK.TIME(LITERAL, '10:00', V=10:00:00)

tree13:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree14:  rules: {
result: Lit(None)
    1 : Define TK.COLN(NONE, ':', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=None)

tree15:  backtest( rules, period=period['train'])
result: Lit(None)
    1 : FnCall TK.FUNCTION(BINOP, '(', V=None)
    2 :     Get TK.IDNT(IDENTIFIER, 'backtest', V=None)
    3 :     List TK.TUPLE(LITERAL, '(', V=[Get(), Define()])
    4 :         Get TK.IDNT(IDENTIFIER, 'rules', V=None)
    5 :         Define TK.EQLS(BINOP, '=', V=None)
    6 :             Ref TK.IDNT(IDENTIFIER, 'period', V=None)
    7 :             Index TK.INDEX(BINOP, '[', V=None)
    8 :                 Get TK.IDNT(IDENTIFIER, 'period', V=None)
    9 :                 List TK.TUPLE(LITERAL, '[', V=[Str()])
   10 :                     Str TK.STR(LITERAL, 'train', V=train)

tree16:  rules >> report | print
result: list([Flow(), ApplyChainProd()])
    1 : Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    2 :     Flow TK.APPLY(NONE, '>>', V=[Get(), ApplyChainProd()])
    3 :         Get TK.IDNT(IDENTIFIER, 'rules', V=None)
    4 :         ApplyChainProd TK.APPLY(UNARY, '', V=None)
    5 :             Ref TK.IDNT(IDENTIFIER, 'report', V=None)
    6 :     ApplyChainProd TK.APPLY(UNARY, '', V=None)
    7 :         Ref TK.IDNT(IDENTIFIER, 'print', V=None)
