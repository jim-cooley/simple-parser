

test:
# sample rules file for pyser / qtradr
{ close }:(threshold=5) | signal

rules >> report | print



periods = {
    'train': (today-2y)..today
}
sma_periods1 = [3,5,10..20,28]
sma_periods2 = [5,10,12,20,30,60,90]

var r = range(sma_periods1)
var r2 = range(sma_periods2)

(open, high, low, close, adj_close) = yahoo( file='spq500.csv', 2y )
atr = (high + low) / 2
median_price = (open + close) / 2
price10a = price.delay(1d)[10:00]

report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }

rules: {
    baseline = {
        any:{ close >| sma(10), close >| sma(20), sma(10) >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
        close <| sma(10) | signal >> delay(1d) | atr -> sell
    },
    scenario1 = {
        { close >| sma(r2) } | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    scenario2 = {
        { close >| sma(r1) }:(threshold=0.01) | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    scenario3 = {
        { sma(r1) >| sma(r2) } | signal >> atr.delay(1d) => buy,
        close <| sma(r1) | signal >> atr.delay(1d) => sell
    },
    {
        { close >| sma(r1) } | signal >> atr.delay(1d) => buy,
        close <| sma(r2) | signal >> atr.delay(1d) => sell
    }
}

backtest( rules, period=period['train'])
rules >> report | print


tree1:  { close }:(threshold=5) | signal
    1  : Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
    2  :     Define(TK.DEFINE, TK.COLN, ':')
    3  :         Set(TK.SET, [Ref()])
    4  :             Ref(TK.IDNT, 'close')
    5  :         Define(TK.DEFINE, TK.EQLS, '=')
    6  :             Ref(TK.IDNT, 'threshold')
    7  :             Int(TK.INT, 5)
    8  :     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
    9  :         Ref(TK.SIGNAL, 'signal')

tree2:  rules >> report | print
    1  : Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    2  :     Flow(TK.APPLY, v=[Get(), ApplyChainProd()], '>>')
    3  :         Get(TK.IDNT, 'rules')
    4  :         ApplyChainProd(TK.DEFINE, TK.APPLY, '>>')
    5  :             Ref(TK.IDNT, 'report')
    6  :     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
    7  :         Ref(TK.IDNT, 'print')

tree3:  periods = {
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'periods')
    3  :     Block(TK.BLOCK, v=[Define()], '')
    4  :         Define(TK.DEFINE, TK.COLN, ':')
    5  :             Str(TK.STR, train)
    6  :             BinOp(TK.RANGE, '..')
    7  :                 BinOp(TK.SUB, '-')
    8  :                     Get(TK.TODAY, 'today')
    9  :                     Duration(TK.DUR, 730 days, 0:00:00)
   10  :                 Get(TK.TODAY, 'today')

tree4:  sma_periods1 = [3,5,10..20,28]
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'sma_periods1')
    3  :     List(TK.LIST, [Int(), Int(), BinOp(), Int()])
    4  :         Int(TK.INT, 3)
    5  :         Int(TK.INT, 5)
    6  :         BinOp(TK.RANGE, '.')
    7  :             Float(TK.FLOT, 10.0)
    8  :             Int(TK.INT, 20)
    9  :         Int(TK.INT, 28)

tree5:  sma_periods2 = [5,10,12,20,30,60,90]
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'sma_periods2')
    3  :     List(TK.LIST, [Int(), Int(), Int(), Int(), Int(), Int(), Int()])
    4  :         Int(TK.INT, 5)
    5  :         Int(TK.INT, 10)
    6  :         Int(TK.INT, 12)
    7  :         Int(TK.INT, 20)
    8  :         Int(TK.INT, 30)
    9  :         Int(TK.INT, 60)
   10  :         Int(TK.INT, 90)

tree6:  var r = range(sma_periods1)
    1  : DefineVar(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'r')
    3  :     DefineFn(TK.DEFINE, TK.FUNCTION, '(')
    4  :         Ref(TK.IDNT, 'range')
    5  :         List(TK.TUPLE, [Ref()])
    6  :             Ref(TK.IDNT, 'sma_periods1')

tree7:  var r2 = range(sma_periods2)
    1  : DefineVar(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'r2')
    3  :     DefineFn(TK.DEFINE, TK.FUNCTION, '(')
    4  :         Ref(TK.IDNT, 'range')
    5  :         List(TK.TUPLE, [Ref()])
    6  :             Ref(TK.IDNT, 'sma_periods2')

tree8:  (open, high, low, close, adj_close) = yahoo( file='spq500.csv', 2y )
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     List(TK.TUPLE, [Ref(), Ref(), Ref(), Ref(), Ref()])
    3  :         Ref(TK.IDNT, 'open')
    4  :         Ref(TK.IDNT, 'high')
    5  :         Ref(TK.IDNT, 'low')
    6  :         Ref(TK.IDNT, 'close')
    7  :         Ref(TK.IDNT, 'adj_close')
    8  :     FnCall('yahoo')
    9  :         Get(TK.IDNT, 'yahoo')
   10  :         List(TK.TUPLE, [Define(), Duration()])
   11  :             Define(TK.DEFINE, TK.EQLS, '=')
   12  :                 Ref(TK.IDNT, 'file')
   13  :                 Str(TK.STR, spq500.csv)
   14  :             Duration(TK.DUR, 730 days, 0:00:00)

tree9:  atr = (high + low) / 2
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'atr')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDNT, 'high')
    6  :             Get(TK.IDNT, 'low')
    7  :         Int(TK.INT, 2)

tree10:  median_price = (open + close) / 2
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'median_price')
    3  :     BinOp(TK.DIV, '/')
    4  :         BinOp(TK.ADD, '+')
    5  :             Get(TK.IDNT, 'open')
    6  :             Get(TK.IDNT, 'close')
    7  :         Int(TK.INT, 2)

tree11:  price10a = price.delay(1d)[10:00]
    1  : Define(TK.DEFINE, TK.EQLS, '=')
    2  :     Ref(TK.IDNT, 'price10a')
    3  :     PropRef(TK.REF, '.')
    4  :         Get(TK.IDNT, 'price')
    5  :         FnCall('delay')
    6  :             Get(TK.IDNT, 'delay')
    7  :             List(TK.TUPLE, [Duration()])
    8  :                 Duration(TK.DUR, 1 day, 0:00:00)

tree12:  price10a = price.delay(1d)[10:00]
    1  : List(TK.LIST, [Time()])
    2  :     Time(TK.TIME, 10:00:00)

tree13:  report := { trades | select('symbol', 'buy_date', 'buy_price', 'sell_date', 'sell_price') }
    1  : DefineVarFn(TK.DEFINE, TK.COEQ, ':=')
    2  :     Ref(TK.IDNT, 'report')
    3  :     Block(TK.BLOCK, v=[Flow()], '')
    4  :         Flow(TK.CHAIN, v=[Get(), FnCall()], '|')
    5  :             Get(TK.IDNT, 'trades')
    6  :             FnCall('select')
    7  :                 Ref(TK.IDNT, 'select')
    8  :                 List(TK.TUPLE, [Str(), Str(), Str(), Str(), Str()])
    9  :                     Str(TK.STR, symbol)
   10  :                     Str(TK.STR, buy_date)
   11  :                     Str(TK.STR, buy_price)
   12  :                     Str(TK.STR, sell_date)
   13  :                     Str(TK.STR, sell_price)

tree14:  rules: {
    1  : Define(TK.DEFINE, TK.COLN, ':')
    2  :     Ref(TK.IDNT, 'rules')
    3  :     Block(TK.BLOCK, v=[Define(), Define(), Define(), Define(), Block()], '')
    4  :         Define(TK.DEFINE, TK.EQLS, '=')
    5  :             Ref(TK.IDNT, 'baseline')
    6  :             Block(TK.BLOCK, v=[UnaryOp(), Flow()], '')
    7  :                 UnaryOp(TK.ANY, TK.ANY, 'any')
    8  :                     Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
    9  :                         Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   10  :                             Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   11  :                                 Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
   12  :                                     Define(TK.DEFINE, TK.COLN, ':')
   13  :                                         Block(TK.BLOCK, v=[Flow(), Flow(), Flow()], '')
   14  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   15  :                                                 BinOp(TK.GTR, '>')
   16  :                                                     Ref(TK.IDNT, 'close')
   17  :                                                 FnCall('sma')
   18  :                                                     Ref(TK.IDNT, 'sma')
   19  :                                                     List(TK.TUPLE, [Int()])
   20  :                                                         Int(TK.INT, 10)
   21  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   22  :                                                 BinOp(TK.GTR, '>')
   23  :                                                     Ref(TK.IDNT, 'close')
   24  :                                                 FnCall('sma')
   25  :                                                     Ref(TK.IDNT, 'sma')
   26  :                                                     List(TK.TUPLE, [Int()])
   27  :                                                         Int(TK.INT, 20)
   28  :                                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   29  :                                                 BinOp(TK.GTR, '>')
   30  :                                                     FnCall('sma')
   31  :                                                         Ref(TK.IDNT, 'sma')
   32  :                                                         List(TK.TUPLE, [Int()])
   33  :                                                             Int(TK.INT, 10)
   34  :                                                 FnCall('sma')
   35  :                                                     Ref(TK.IDNT, 'sma')
   36  :                                                     List(TK.TUPLE, [Int()])
   37  :                                                         Int(TK.INT, 20)
   38  :                                         Define(TK.DEFINE, TK.EQLS, '=')
   39  :                                             Ref(TK.IDNT, 'threshold')
   40  :                                             Float(TK.FLOT, 0.01)
   41  :                                     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   42  :                                         Ref(TK.SIGNAL, 'signal')
   43  :                                 FnCall('delay')
   44  :                                     Ref(TK.IDNT, 'delay')
   45  :                                     List(TK.TUPLE, [Duration()])
   46  :                                         Duration(TK.DUR, 1 day, 0:00:00)
   47  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   48  :                                 Ref(TK.IDNT, 'atr')
   49  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   50  :                             Ref(TK.BUY, 'buy')
   51  :                 Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '->')
   52  :                     Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
   53  :                         Flow(TK.APPLY, v=[Flow(), FnCall()], '>>')
   54  :                             Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   55  :                                 BinOp(TK.FALL_BELOW, '<|')
   56  :                                     Get(TK.IDNT, 'close')
   57  :                                     FnCall('sma')
   58  :                                         Get(TK.IDNT, 'sma')
   59  :                                         List(TK.TUPLE, [Int()])
   60  :                                             Int(TK.INT, 10)
   61  :                                 ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   62  :                                     Ref(TK.SIGNAL, 'signal')
   63  :                             FnCall('delay')
   64  :                                 Ref(TK.IDNT, 'delay')
   65  :                                 List(TK.TUPLE, [Duration()])
   66  :                                     Duration(TK.DUR, 1 day, 0:00:00)
   67  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   68  :                             Ref(TK.IDNT, 'atr')
   69  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '->')
   70  :                         Ref(TK.SELL, 'sell')
   71  :         Define(TK.DEFINE, TK.EQLS, '=')
   72  :             Ref(TK.IDNT, 'scenario1')
   73  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
   74  :                 Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
   75  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
   76  :                         Flow(TK.CHAIN, v=[Block(), ApplyChainProd()], '|')
   77  :                             Block(TK.BLOCK, v=[Flow()], '')
   78  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
   79  :                                     BinOp(TK.GTR, '>')
   80  :                                         Get(TK.IDNT, 'close')
   81  :                                     FnCall('sma')
   82  :                                         Ref(TK.IDNT, 'sma')
   83  :                                         List(TK.TUPLE, [Ref()])
   84  :                                             Ref(TK.IDNT, 'r2')
   85  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
   86  :                                 Ref(TK.SIGNAL, 'signal')
   87  :                         PropRef(TK.REF, '.')
   88  :                             Ref(TK.IDNT, 'atr')
   89  :                             FnCall('delay')
   90  :                                 Ref(TK.IDNT, 'delay')
   91  :                                 List(TK.TUPLE, [Duration()])
   92  :                                     Duration(TK.DUR, 1 day, 0:00:00)
   93  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
   94  :                         Ref(TK.BUY, 'buy')
   95  :                 Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
   96  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
   97  :                         Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
   98  :                             BinOp(TK.FALL_BELOW, '<|')
   99  :                                 Get(TK.IDNT, 'close')
  100  :                                 FnCall('sma')
  101  :                                     Get(TK.IDNT, 'sma')
  102  :                                     List(TK.TUPLE, [Get()])
  103  :                                         Get(TK.IDNT, 'r1')
  104  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  105  :                                 Ref(TK.SIGNAL, 'signal')
  106  :                         PropRef(TK.REF, '.')
  107  :                             Ref(TK.IDNT, 'atr')
  108  :                             FnCall('delay')
  109  :                                 Ref(TK.IDNT, 'delay')
  110  :                                 List(TK.TUPLE, [Duration()])
  111  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  112  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
  113  :                         Ref(TK.SELL, 'sell')
  114  :         Define(TK.DEFINE, TK.EQLS, '=')
  115  :             Ref(TK.IDNT, 'scenario2')
  116  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
  117  :                 Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
  118  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  119  :                         Flow(TK.CHAIN, v=[Define(), ApplyChainProd()], '|')
  120  :                             Define(TK.DEFINE, TK.COLN, ':')
  121  :                                 Block(TK.BLOCK, v=[Flow()], '')
  122  :                                     Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
  123  :                                         BinOp(TK.GTR, '>')
  124  :                                             Ref(TK.IDNT, 'close')
  125  :                                         FnCall('sma')
  126  :                                             Ref(TK.IDNT, 'sma')
  127  :                                             List(TK.TUPLE, [Ref()])
  128  :                                                 Ref(TK.IDNT, 'r1')
  129  :                                 Define(TK.DEFINE, TK.EQLS, '=')
  130  :                                     Ref(TK.IDNT, 'threshold')
  131  :                                     Float(TK.FLOT, 0.01)
  132  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  133  :                                 Ref(TK.SIGNAL, 'signal')
  134  :                         PropRef(TK.REF, '.')
  135  :                             Ref(TK.IDNT, 'atr')
  136  :                             FnCall('delay')
  137  :                                 Ref(TK.IDNT, 'delay')
  138  :                                 List(TK.TUPLE, [Duration()])
  139  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  140  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
  141  :                         Ref(TK.BUY, 'buy')
  142  :                 Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
  143  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  144  :                         Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
  145  :                             BinOp(TK.FALL_BELOW, '<|')
  146  :                                 Get(TK.IDNT, 'close')
  147  :                                 FnCall('sma')
  148  :                                     Get(TK.IDNT, 'sma')
  149  :                                     List(TK.TUPLE, [Get()])
  150  :                                         Get(TK.IDNT, 'r1')
  151  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  152  :                                 Ref(TK.SIGNAL, 'signal')
  153  :                         PropRef(TK.REF, '.')
  154  :                             Ref(TK.IDNT, 'atr')
  155  :                             FnCall('delay')
  156  :                                 Ref(TK.IDNT, 'delay')
  157  :                                 List(TK.TUPLE, [Duration()])
  158  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  159  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
  160  :                         Ref(TK.SELL, 'sell')
  161  :         Define(TK.DEFINE, TK.EQLS, '=')
  162  :             Ref(TK.IDNT, 'scenario3')
  163  :             Block(TK.BLOCK, v=[Flow(), Flow()], '')
  164  :                 Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
  165  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  166  :                         Flow(TK.CHAIN, v=[Block(), ApplyChainProd()], '|')
  167  :                             Block(TK.BLOCK, v=[Flow()], '')
  168  :                                 Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
  169  :                                     BinOp(TK.GTR, '>')
  170  :                                         FnCall('sma')
  171  :                                             Get(TK.IDNT, 'sma')
  172  :                                             List(TK.TUPLE, [Get()])
  173  :                                                 Get(TK.IDNT, 'r1')
  174  :                                     FnCall('sma')
  175  :                                         Ref(TK.IDNT, 'sma')
  176  :                                         List(TK.TUPLE, [Ref()])
  177  :                                             Ref(TK.IDNT, 'r2')
  178  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  179  :                                 Ref(TK.SIGNAL, 'signal')
  180  :                         PropRef(TK.REF, '.')
  181  :                             Ref(TK.IDNT, 'atr')
  182  :                             FnCall('delay')
  183  :                                 Ref(TK.IDNT, 'delay')
  184  :                                 List(TK.TUPLE, [Duration()])
  185  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  186  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
  187  :                         Ref(TK.BUY, 'buy')
  188  :                 Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
  189  :                     Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  190  :                         Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
  191  :                             BinOp(TK.FALL_BELOW, '<|')
  192  :                                 Get(TK.IDNT, 'close')
  193  :                                 FnCall('sma')
  194  :                                     Get(TK.IDNT, 'sma')
  195  :                                     List(TK.TUPLE, [Get()])
  196  :                                         Get(TK.IDNT, 'r1')
  197  :                             ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  198  :                                 Ref(TK.SIGNAL, 'signal')
  199  :                         PropRef(TK.REF, '.')
  200  :                             Ref(TK.IDNT, 'atr')
  201  :                             FnCall('delay')
  202  :                                 Ref(TK.IDNT, 'delay')
  203  :                                 List(TK.TUPLE, [Duration()])
  204  :                                     Duration(TK.DUR, 1 day, 0:00:00)
  205  :                     ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
  206  :                         Ref(TK.SELL, 'sell')
  207  :         Block(TK.BLOCK, v=[Flow(), Flow()], '')
  208  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
  209  :                 Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  210  :                     Flow(TK.CHAIN, v=[Block(), ApplyChainProd()], '|')
  211  :                         Block(TK.BLOCK, v=[Flow()], '')
  212  :                             Flow(TK.CHAIN, v=[BinOp(), FnCall()], '|')
  213  :                                 BinOp(TK.GTR, '>')
  214  :                                     Get(TK.IDNT, 'close')
  215  :                                 FnCall('sma')
  216  :                                     Ref(TK.IDNT, 'sma')
  217  :                                     List(TK.TUPLE, [Ref()])
  218  :                                         Ref(TK.IDNT, 'r1')
  219  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  220  :                             Ref(TK.SIGNAL, 'signal')
  221  :                     PropRef(TK.REF, '.')
  222  :                         Ref(TK.IDNT, 'atr')
  223  :                         FnCall('delay')
  224  :                             Ref(TK.IDNT, 'delay')
  225  :                             List(TK.TUPLE, [Duration()])
  226  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  227  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
  228  :                     Ref(TK.BUY, 'buy')
  229  :             Flow(TK.PRODUCE, v=[Flow(), ApplyChainProd()], '=>')
  230  :                 Flow(TK.APPLY, v=[Flow(), PropRef()], '>>')
  231  :                     Flow(TK.CHAIN, v=[BinOp(), ApplyChainProd()], '|')
  232  :                         BinOp(TK.FALL_BELOW, '<|')
  233  :                             Get(TK.IDNT, 'close')
  234  :                             FnCall('sma')
  235  :                                 Get(TK.IDNT, 'sma')
  236  :                                 List(TK.TUPLE, [Get()])
  237  :                                     Get(TK.IDNT, 'r2')
  238  :                         ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
  239  :                             Ref(TK.SIGNAL, 'signal')
  240  :                     PropRef(TK.REF, '.')
  241  :                         Ref(TK.IDNT, 'atr')
  242  :                         FnCall('delay')
  243  :                             Ref(TK.IDNT, 'delay')
  244  :                             List(TK.TUPLE, [Duration()])
  245  :                                 Duration(TK.DUR, 1 day, 0:00:00)
  246  :                 ApplyChainProd(TK.DEFINE, TK.APPLY, '=>')
  247  :                     Ref(TK.SELL, 'sell')

tree15:  backtest( rules, period=period['train'])
    1  : FnCall('backtest')
    2  :     Get(TK.IDNT, 'backtest')
    3  :     List(TK.TUPLE, [Get(), Define()])
    4  :         Get(TK.IDNT, 'rules')
    5  :         Define(TK.DEFINE, TK.EQLS, '=')
    6  :             Ref(TK.IDNT, 'period')
    7  :             Index('period')
    8  :                 Get(TK.IDNT, 'period')
    9  :                 List(TK.TUPLE, [Str()])
   10  :                     Str(TK.STR, train)

tree16:  rules >> report | print
    1  : Flow(TK.CHAIN, v=[Flow(), ApplyChainProd()], '|')
    2  :     Flow(TK.APPLY, v=[Get(), ApplyChainProd()], '>>')
    3  :         Get(TK.IDNT, 'rules')
    4  :         ApplyChainProd(TK.DEFINE, TK.APPLY, '>>')
    5  :             Ref(TK.IDNT, 'report')
    6  :     ApplyChainProd(TK.DEFINE, TK.APPLY, '|')
    7  :         Ref(TK.IDNT, 'print')
