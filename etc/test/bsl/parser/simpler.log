

test:
"rules0a := {
    buy:: any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal | delay(1d) | atr,
    sell:: close <| sma(10) | signal | delay(1d) | atr
}
rules0 := {
    close >| sma(10) | signal | delay(1d) | atr | buy,
    close <| sma(10) | signal | delay(1d) | atr | sell
}
rules1 => {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules2 := {
    buy: any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr,
    sell: close <| sma(10) | signal >> delay(1d) | atr
}
rules3 := {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
rules4 = {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
def rules5 = {
    any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy,
    close <| sma(10) | signal >> delay(1d) | atr -> sell
}
"

tree1:  rules0a := {
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules0a', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
    4 :         Flow TK.CHAIN(NONE, '|', V=[Define(), Ref(), FnCall(), ApplyChainProd()])
    5 :             Define TK.COLN(NONE, ':', V=None)
    6 :                 BinOp TK.DEF(BINOP, '::', V=None)
    7 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
    8 :                     UnaryOp TK.ANY(UNARY, 'any', V=None)
    9 :                 Define TK.COLN(NONE, ':', V=None)
   10 :                     Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                         BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                             Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                 Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                     Int TK.INT(LITERAL, '10', V=10)
   17 :                         BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                             Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                 Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                     Int TK.INT(LITERAL, '20', V=20)
   23 :                     Define TK.EQLS(BINOP, '=', V=None)
   24 :                         Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                         Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   27 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   28 :                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   29 :                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
   30 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   31 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   32 :                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   33 :         Flow TK.CHAIN(NONE, '|', V=[BinOp(), Ref(), FnCall(), ApplyChainProd()])
   34 :             BinOp TK.DEF(BINOP, '::', V=None)
   35 :                 Get TK.SELL(IDENTIFIER, 'sell', V=None)
   36 :                 BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   37 :                     Get TK.IDNT(IDENTIFIER, 'close', V=None)
   38 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   39 :                         Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   40 :                         List TK.TUPLE(LITERAL, '(', V=[Int()])
   41 :                             Int TK.INT(LITERAL, '10', V=10)
   42 :             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   43 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   44 :                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   45 :                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
   46 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   47 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   48 :                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)

tree2:  rules0 := {
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules0', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
    4 :         Flow TK.CHAIN(NONE, '|', V=[BinOp(), Ref(), FnCall(), Ref(), ApplyChainProd()])
    5 :             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    6 :                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
    7 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
    8 :                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    9 :                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   10 :                         Int TK.INT(LITERAL, '10', V=10)
   11 :             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   12 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   13 :                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   14 :                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
   15 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   16 :             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   17 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   18 :                 Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   19 :         Flow TK.CHAIN(NONE, '|', V=[BinOp(), Ref(), FnCall(), Ref(), ApplyChainProd()])
   20 :             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   21 :                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
   22 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   23 :                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   24 :                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   25 :                         Int TK.INT(LITERAL, '10', V=10)
   26 :             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   27 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
   28 :                 Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   29 :                 List TK.TUPLE(LITERAL, '(', V=[Duration()])
   30 :                     Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   31 :             Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   32 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree3:  rules1 => {
result: list([Get(), Block()])
    1 : Flow TK.PRODUCE(NONE, '=>', V=[Get(), Block()])
    2 :     Get TK.IDNT(IDENTIFIER, 'rules1', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    4 :         UnaryOp TK.ANY(UNARY, 'any', V=None)
    5 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    7 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    8 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    9 :                             Define TK.COLN(NONE, ':', V=None)
   10 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 Define TK.EQLS(BINOP, '=', V=None)
   24 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   27 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   28 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   31 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   34 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   35 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   36 :         Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   37 :             Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   38 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   39 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   49 :                         Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                         List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   54 :             ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   55 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree4:  rules2 := {
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules2', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[Flow(), Flow()])
    4 :         Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    5 :             Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    7 :                     Define TK.COLN(NONE, ':', V=None)
    8 :                         Ref TK.BUY(IDENTIFIER, 'buy', V=None)
    9 :                         UnaryOp TK.ANY(UNARY, 'any:', V=None)
   10 :                             Define TK.COLN(NONE, ':', V=None)
   11 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   12 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   13 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   14 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   15 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   16 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   17 :                                                 Int TK.INT(LITERAL, '10', V=10)
   18 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   19 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   20 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   21 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   22 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   23 :                                                 Int TK.INT(LITERAL, '20', V=20)
   24 :                                 Define TK.EQLS(BINOP, '=', V=None)
   25 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   26 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   27 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   28 :                         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   29 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   30 :                     Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   31 :                     List TK.TUPLE(LITERAL, '(', V=[Duration()])
   32 :                         Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   33 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   34 :                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   35 :         Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   36 :             Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   37 :                 Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
   38 :                     Define TK.COLN(NONE, ':', V=None)
   39 :                         Ref TK.SELL(IDENTIFIER, 'sell', V=None)
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Get TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   49 :                     Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                     List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                         Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)

tree5:  rules3 := {
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules3', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    4 :         UnaryOp TK.ANY(UNARY, 'any', V=None)
    5 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    7 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    8 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    9 :                             Define TK.COLN(NONE, ':', V=None)
   10 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 Define TK.EQLS(BINOP, '=', V=None)
   24 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   27 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   28 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   31 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   34 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   35 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   36 :         Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   37 :             Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   38 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   39 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Get TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   49 :                         Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                         List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   54 :             ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   55 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree6:  rules4 = {
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules4', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    4 :         UnaryOp TK.ANY(UNARY, 'any', V=None)
    5 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    7 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    8 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    9 :                             Define TK.COLN(NONE, ':', V=None)
   10 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 Define TK.EQLS(BINOP, '=', V=None)
   24 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   27 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   28 :                         FnCall TK.FUNCTION(BINOP, '(', V=None)
   29 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   31 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   34 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   35 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   36 :         Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   37 :             Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   38 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
   39 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Get TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             FnCall TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                     FnCall TK.FUNCTION(BINOP, '(', V=None)
   49 :                         Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                         List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   54 :             ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   55 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)

tree7:  def rules5 = {
result: Lit(None)
    1 : Define TK.EQLS(BINOP, '=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'rules5', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[UnaryOp(), Flow()])
    4 :         UnaryOp TK.ANY(UNARY, 'any', V=None)
    5 :             Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    6 :                 Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    7 :                     Flow TK.APPLY(NONE, '>>', V=[Flow(), DefineFn()])
    8 :                         Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    9 :                             Define TK.COLN(NONE, ':', V=None)
   10 :                                 Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
   11 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   12 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   13 :                                         DefineFn TK.FUNCTION(BINOP, '(', V=None)
   14 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   15 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   16 :                                                 Int TK.INT(LITERAL, '10', V=10)
   17 :                                     BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   18 :                                         Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   19 :                                         DefineFn TK.FUNCTION(BINOP, '(', V=None)
   20 :                                             Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   21 :                                             List TK.TUPLE(LITERAL, '(', V=[Int()])
   22 :                                                 Int TK.INT(LITERAL, '20', V=20)
   23 :                                 Define TK.EQLS(BINOP, '=', V=None)
   24 :                                     Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   25 :                                     Float TK.FLOT(LITERAL, '0.01', V=0.01)
   26 :                             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   27 :                                 Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   28 :                         DefineFn TK.FUNCTION(BINOP, '(', V=None)
   29 :                             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   30 :                             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   31 :                                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   32 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   33 :                         Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   34 :                 ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   35 :                     Ref TK.BUY(IDENTIFIER, 'buy', V=None)
   36 :         Flow TK.PRODUCE(NONE, '->', V=[Flow(), ApplyChainProd()])
   37 :             Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
   38 :                 Flow TK.APPLY(NONE, '>>', V=[Flow(), DefineFn()])
   39 :                     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
   40 :                         BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   41 :                             Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   42 :                             DefineFn TK.FUNCTION(BINOP, '(', V=None)
   43 :                                 Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   44 :                                 List TK.TUPLE(LITERAL, '(', V=[Int()])
   45 :                                     Int TK.INT(LITERAL, '10', V=10)
   46 :                         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   47 :                             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   48 :                     DefineFn TK.FUNCTION(BINOP, '(', V=None)
   49 :                         Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   50 :                         List TK.TUPLE(LITERAL, '(', V=[Duration()])
   51 :                             Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   52 :                 ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   53 :                     Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   54 :             ApplyChainProd TK.APPLY(UNARY, '->', V=None)
   55 :                 Ref TK.SELL(IDENTIFIER, 'sell', V=None)
