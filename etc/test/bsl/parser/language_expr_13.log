

test: 13:
close >| sma(10) and close <| sma(20) | signal >> open.delay(1d)

tree1:  close >| sma(10) and close <| sma(20) | signal >> open.delay(1d)
    1 : Flow TK.APPLY(NONE, '>>', V=[Flow(), PropRef()])
    2 :     Flow TK.CHAIN(NONE, '|', V=[BinOp(), ApplyChainProd()])
    3 :         BinOp TK.AND(BINOP, 'and', V=None)
    4 :             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    5 :                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
    6 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
    7 :                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
    8 :                     List TK.TUPLE(LITERAL, '(', V=[Int()])
    9 :                         Int TK.INT(LITERAL, '10', V=10)
   10 :             BinOp TK.FALL_BELOW(BINOP, '<|', V=None)
   11 :                 Get TK.IDNT(IDENTIFIER, 'close', V=None)
   12 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   13 :                     Get TK.IDNT(IDENTIFIER, 'sma', V=None)
   14 :                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   15 :                         Int TK.INT(LITERAL, '20', V=20)
   16 :         ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   17 :             Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   18 :     PropRef TK.REF(BINOP, '.', V=None)
   19 :         Ref TK.IDNT(IDENTIFIER, 'open', V=None)
   20 :         FnCall TK.FUNCTION(BINOP, '(', V=None)
   21 :             Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   22 :             List TK.TUPLE(LITERAL, '(', V=[Duration()])
   23 :                 Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
