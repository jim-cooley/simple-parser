

test: 3:
"any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy"

tree1:  any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy
result: Lit(None)
    1 : UnaryOp TK.ANY(UNARY, 'any', V=None)
    2 :     Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    3 :         Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    4 :             Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    5 :                 Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    6 :                     Define TK.COLN(NONE, ':', V=None)
    7 :                         Block TK.BLOCK(SCOPE, '', V=None)
    8 :                         Define TK.EQLS(BINOP, '=', V=None)
    9 :                             Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   10 :                             Float TK.FLOT(LITERAL, '0.01', V=0.01)
   11 :                     ApplyChainProd TK.APPLY(UNARY, '', V=None)
   12 :                         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   13 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   14 :                     Get TK.IDNT(IDENTIFIER, 'delay', V=None)
   15 :                     List TK.TUPLE(LITERAL, '(', V=[Duration()])
   16 :                         Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   17 :             ApplyChainProd TK.APPLY(UNARY, '', V=None)
   18 :                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   19 :         ApplyChainProd TK.APPLY(UNARY, '', V=None)
   20 :             Ref TK.BUY(IDENTIFIER, 'buy', V=None)
