

test: 3:
any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy

tree1:  any:{ close >| sma(10), close >| sma(20) }:(threshold=0.01) | signal >> delay(1d) | atr => buy
    1 : UnaryOp TK.ANY(UNARY, 'any', V=None)
    2 :     Flow TK.PRODUCE(NONE, '=>', V=[Flow(), ApplyChainProd()])
    3 :         Flow TK.CHAIN(NONE, '|', V=[Flow(), ApplyChainProd()])
    4 :             Flow TK.APPLY(NONE, '>>', V=[Flow(), FnCall()])
    5 :                 Flow TK.CHAIN(NONE, '|', V=[Define(), ApplyChainProd()])
    6 :                     Define TK.COLN(NONE, ':', V=None)
    7 :                         Block TK.BLOCK(SCOPE, '', V=[BinOp(), BinOp()])
    8 :                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
    9 :                                 Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   10 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   11 :                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   12 :                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   13 :                                         Int TK.INT(LITERAL, '10', V=10)
   14 :                             BinOp TK.RISE_ABOVE(BINOP, '>|', V=None)
   15 :                                 Ref TK.IDNT(IDENTIFIER, 'close', V=None)
   16 :                                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   17 :                                     Ref TK.IDNT(IDENTIFIER, 'sma', V=None)
   18 :                                     List TK.TUPLE(LITERAL, '(', V=[Int()])
   19 :                                         Int TK.INT(LITERAL, '20', V=20)
   20 :                         Define TK.EQLS(BINOP, '=', V=None)
   21 :                             Ref TK.IDNT(IDENTIFIER, 'threshold', V=None)
   22 :                             Float TK.FLOT(LITERAL, '0.01', V=0.01)
   23 :                     ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   24 :                         Ref TK.SIGNAL(IDENTIFIER, 'signal', V=None)
   25 :                 FnCall TK.FUNCTION(BINOP, '(', V=None)
   26 :                     Ref TK.IDNT(IDENTIFIER, 'delay', V=None)
   27 :                     List TK.TUPLE(LITERAL, '(', V=[Duration()])
   28 :                         Duration TK.DUR(LITERAL, '1d', V=1 day, 0:00:00)
   29 :             ApplyChainProd TK.APPLY(UNARY, '|', V=None)
   30 :                 Ref TK.IDNT(IDENTIFIER, 'atr', V=None)
   31 :         ApplyChainProd TK.APPLY(UNARY, '=>', V=None)
   32 :             Ref TK.BUY(IDENTIFIER, 'buy', V=None)
