

test: 43:
f := { a(x):x*x }; { b: b.left = b.right}:(node);

tree1:  f := { a(x):x*x }; { b: b.left = b.right}:(node);
    1  : DefineVar(TK.DEFINE, TK.DEFINE, ':=')
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block(TK.BLOCK, v=[DefineFn()], '')
    4  :         DefineFn(TK.DEFINE, TK.DEFINE, ':')
    5  :             Ref(TK.IDENT, 'a')
    6  :             BinOp(TK.MUL, '*')
    7  :                 Get(TK.IDENT, 'x')
    8  :                 Get(TK.IDENT, 'x')
    9  :             List(TK.LIST, [Ref()])
   10  :                 Ref(TK.IDENT, 'x')

tree2:  f := { a(x):x*x }; { b: b.left = b.right}:(node);
    1  : Define(TK.DEFINE, TK.DEFINE, ':')
    2  :     Block(TK.BLOCK, v=[Define()], '')
    3  :         Define(TK.DEFINE, TK.DEFINE, ':')
    4  :             Ref(TK.IDENT, 'b')
    5  :             Define(TK.DEFINE, TK.DEFINE, '=')
    6  :                 PropRef(TK.REF, '.')
    7  :                     Ref(TK.IDENT, 'b')
    8  :                     Ref(TK.IDENT, 'left')
    9  :                 PropRef(TK.REF, '.')
   10  :                     Ref(TK.IDENT, 'b')
   11  :                     Ref(TK.IDENT, 'right')
   12  :     Get(TK.IDENT, 'node')
