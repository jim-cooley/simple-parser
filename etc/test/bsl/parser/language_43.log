

test: 43:
"f := { a(x):x*x }; { b: b.left = b.right}:(node);"

tree1:  f := { a(x):x*x }; { b: b.left = b.right}:(node);
result: Lit(None)
    1 : DefineVarFn TK.COEQ(NONE, ':=', V=None)
    2 :     Ref TK.IDNT(IDENTIFIER, 'f', V=None)
    3 :     Block TK.BLOCK(SCOPE, '', V=[DefineFn()])
    4 :         DefineFn TK.COLN(NONE, ':', V=None)
    5 :             FnCall TK.FUNCTION(BINOP, '(', V=None)
    6 :                 Ref TK.IDNT(IDENTIFIER, 'a', V=None)
    7 :                 List TK.TUPLE(LITERAL, '(', V=[Ref()])
    8 :                     Ref TK.IDNT(IDENTIFIER, 'x', V=None)
    9 :             BinOp TK.MUL(BINOP, '*', V=None)
   10 :                 Get TK.IDNT(IDENTIFIER, 'x', V=None)
   11 :                 Get TK.IDNT(IDENTIFIER, 'x', V=None)

tree2:  f := { a(x):x*x }; { b: b.left = b.right}:(node);
result: Lit(None)
    1 : Define TK.COLN(NONE, ':', V=None)
    2 :     Block TK.BLOCK(SCOPE, '', V=[Define()])
    3 :         Define TK.COLN(NONE, ':', V=None)
    4 :             Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    5 :             Define TK.EQLS(BINOP, '=', V=None)
    6 :                 PropRef TK.REF(BINOP, '.', V=None)
    7 :                     Ref TK.IDNT(IDENTIFIER, 'b', V=None)
    8 :                     Ref TK.IDNT(IDENTIFIER, 'left', V=None)
    9 :                 PropRef TK.REF(BINOP, '.', V=None)
   10 :                     Ref TK.IDNT(IDENTIFIER, 'b', V=None)
   11 :                     Ref TK.IDNT(IDENTIFIER, 'right', V=None)
   12 :     Get TK.IDNT(IDENTIFIER, 'node', V=None)
