

test: 43:
f := { a(x):x*x }; { b: b.left = b.right}:(node);

tree1:  f := { a(x):x*x }; { b: b.left = b.right}:(node);
    1  : DefineVar(TK.DEFINE: f := Block(TK.BLOCK, ''))
    2  :     Ref(TK.IDENT, 'f')
    3  :     Block{TK.BLOCK, len=1}
    4  :         DefineFn(TK.COMBINE: a : BinOp(TK.MUL, '*'))
    5  :             Ref(TK.IDENT, 'a')
    6  :             BinOp(TK.MUL, '*')
    7  :                 Get(TK.IDENT, 'x')
    8  :                 Get(TK.IDENT, 'x')
    9  :             List(TK.LIST, [Ref()])
   10  :                 Ref(TK.IDENT, 'x')

tree2:  f := { a(x):x*x }; { b: b.left = b.right}:(node);
    1  : Combine(TK.COMBINE:  None Get(TK.IDENT, 'node'))
    2  :     Block{TK.BLOCK, len=1}
    3  :         Combine(TK.COMBINE: b None Define(TK.DEFINE, '='))
    4  :             Ref(TK.IDENT, 'b')
    5  :             Define(TK.DEFINE: PropRef(TK.REF, '.') = PropRef(TK.REF, '.'))
    6  :                 PropRef(TK.REF: b . Ref(TK.IDENT, 'left'))
    7  :                     Ref(TK.IDENT, 'b')
    8  :                     Ref(TK.IDENT, 'left')
    9  :                 PropRef(TK.REF: b . Get(TK.IDENT, 'right'))
   10  :                     Get(TK.IDENT, 'b')
   11  :                     Get(TK.IDENT, 'right')
   12  :     Get(TK.IDENT, 'node')
