#!/usr/local/bin/bash
logpath="./etc/test/log"
bslpath="./etc/test/bsl"

declare -i ignore_baselines=0
declare -i quiet=0

read -r -d '' help_text <<'EOF'
suite - run test suites
  -b  = ignore baselines
  -q  = silence unneccessary output
  -t  = single test mode (see -b)
  -h  = help
EOF

while [[ $# -gt 0 ]] ; do
    case "$1" in
        -b | --ignore_baselines)
            ignore_baselines=1
            ;;
        -q | --quiet)
            quiet=1
            ;;
        -t | --single_test)
            ignore_baselines=1
            quiet=1
            ;;
        -h | --help)
            display_help=1
            break
            ;;
        *)
            break;;
    esac
    shift
done

prefx=$1
suite=$2

if [ $display_help -gt 0 ]; then
  printf "$help_text\n"

else
  echo "" > "./suite.log"
  declare -i pass=0
  declare -i total=0
  declare -i no_baseline=0

  printf "\n\n================================\n"
  printf "running tests\n"
  printf "================================\n"

  if [ "$prefx" == "" ]; then prefx="parser"; fi

  start=$(date +%s)
  case "$prefx" in
      semtex|fixups|parser)
          ./test_${prefx}.py $suite
          ;;
      *)
      printf "invalid test suite: $prefx"
  esac
  end=$(date +%s)

  printf "\n\n$((end - start)) seconds\n\n"

  printf "\n\n================================\n"
  printf "verifying results\n"
  printf "================================\n"
  for test in $logpath/$prefx/$suite*; do
      total=$((total + 1))
      baseline="$bslpath/$prefx"/"$(basename $test)"
  #   printf "$(basename $test):\n"
      if [ -f "$baseline" ]; then
          result="fail"
          if [ $ignore_baselines -eq 0 ]; then
              diff "$baseline" "$test" >> ./suite.log && result="pass"
          else
              result="pass"
          fi
          grep -i "exception" "$test" && printf "in $test\n" && result="fail (exception)"
          if [ "$result" == "pass" ]; then
              pass=$((pass + 1))
          fi
          if [ $quiet -eq 0 ]; then
              printf "$(basename $test):  $result\n"
          fi
          if [ "$result" != "pass" ]; then
              printf "$(basename $test):\t$result\n" >> ./suite.log &>> ./suite.log
          fi
      else
          if [ $ignore_baselines -eq 0 ]; then
              reason="no baseline"
          else
              no_baseline=$((no_baseline + 1))
              reason=""
          fi
          grep -i "exception" "$test" && printf "in $test\n" && reason="exception"
          if [ "$reason" == "no baseline" ]; then
              no_baseline=$((no_baseline + 1))
          fi
          if [ $quiet -eq 0 ]; then
              printf "$(basename $test):\tfail: $reason\n"
          fi
          if [ $ignore_baselines -eq 0 ]; then
              printf "$(basename $test):\tfail: $reason\n" >> ./suite.log &>> ./suite.log
          elif [ "$reason" != "" ]; then

              printf "$(basename $test):\tfail: $reason\n" >> ./suite.log &>> ./suite.log
          fi
      fi
  done

  printf "\n\nresults summary:\n" >> ./suite.log
  printf "================================\n" >> ./suite.log
  printf "  pass:        $pass\n" >> ./suite.log
  printf "  fail:        $((total-pass-no_baseline))\n" >> ./suite.log
  printf "  no baseline: $no_baseline\n" >> ./suite.log
  printf "  total:       $total\n" >> ./suite.log
  printf "================================\n\n" >> ./suite.log
  printf "\n\nresults summary:\n"
  printf "================================\n"
  printf "  pass:        $pass\n"
  printf "  fail:        $((total-pass-no_baseline))\n"
  printf "  no baseline: $no_baseline\n"
  printf "  total:       $total\n"
  printf "================================\n\n"

  end=$(date +%s)
  printf "$((end - start)) seconds\n\n"


  if [ $quiet -eq 0 ]; then
      grep -i fail ./suite.log
  fi
fi
printf "\n\n"
